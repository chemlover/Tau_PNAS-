angle_charmm.cpp:    memory->destroy(setflag);
angle_charmm.cpp:    memory->destroy(k);
angle_charmm.cpp:    memory->destroy(theta0);
angle_charmm.cpp:    memory->destroy(k_ub);
angle_charmm.cpp:    memory->destroy(r_ub);
angle_charmm.cpp:  memory->create(k,n+1,"angle:k");
angle_charmm.cpp:  memory->create(theta0,n+1,"angle:theta0");
angle_charmm.cpp:  memory->create(k_ub,n+1,"angle:k_ub");
angle_charmm.cpp:  memory->create(r_ub,n+1,"angle:r_ub");
angle_charmm.cpp:  memory->create(setflag,n+1,"angle:setflag");
angle_cosine.cpp:    memory->destroy(setflag);
angle_cosine.cpp:    memory->destroy(k);
angle_cosine.cpp:  memory->create(k,n+1,"angle:k");
angle_cosine.cpp:  memory->create(setflag,n+1,"angle:setflag");
angle_cosine_periodic.cpp:    memory->destroy(setflag);
angle_cosine_periodic.cpp:    memory->destroy(k);
angle_cosine_periodic.cpp:    memory->destroy(b);
angle_cosine_periodic.cpp:    memory->destroy(multiplicity);
angle_cosine_periodic.cpp:  memory->create(k,n+1,"angle:k");
angle_cosine_periodic.cpp:  memory->create(multiplicity,n+1,"angle:multiplicity");
angle_cosine_periodic.cpp:  memory->create(b,n+1,"angle:b");
angle_cosine_periodic.cpp:  memory->create(setflag,n+1,"angle:setflag");
angle_cosine_squared.cpp:    memory->destroy(setflag);
angle_cosine_squared.cpp:    memory->destroy(k);
angle_cosine_squared.cpp:    memory->destroy(theta0);
angle_cosine_squared.cpp:  memory->create(k,n+1,"angle:k");
angle_cosine_squared.cpp:  memory->create(theta0,n+1,"angle:theta0");
angle_cosine_squared.cpp:  memory->create(setflag,n+1,"angle:setflag");
angle.cpp:  memory->destroy(eatom);
angle.cpp:  memory->destroy(vatom);
angle.cpp:    memory->destroy(eatom);
angle.cpp:    memory->create(eatom,comm->nthreads*maxeatom,"bond:eatom");
angle.cpp:    memory->destroy(vatom);
angle.cpp:    memory->create(vatom,comm->nthreads*maxvatom,6,"bond:vatom");
angle_harmonic.cpp:    memory->destroy(setflag);
angle_harmonic.cpp:    memory->destroy(k);
angle_harmonic.cpp:    memory->destroy(theta0);
angle_harmonic.cpp:  memory->create(k,n+1,"angle:k");
angle_harmonic.cpp:  memory->create(theta0,n+1,"angle:theta0");
angle_harmonic.cpp:  memory->create(setflag,n+1,"angle:setflag");
angle_hybrid.cpp:    memory->destroy(setflag);
angle_hybrid.cpp:    memory->destroy(map);
angle_hybrid.cpp:      memory->destroy(anglelist[i]);
angle_hybrid.cpp:        memory->destroy(anglelist[m]);
angle_hybrid.cpp:        memory->create(anglelist[m],maxangle[m],4,"angle_hybrid:anglelist");
angle_hybrid.cpp:  memory->create(map,n+1,"angle:map");
angle_hybrid.cpp:  memory->create(setflag,n+1,"angle:setflag");
angle_hybrid.cpp:    memory->destroy(setflag);
angle_hybrid.cpp:    memory->destroy(map);
angle_hybrid.cpp:      memory->destroy(anglelist[i]);
angle_table.cpp:  memory->sfree(tables);
angle_table.cpp:    memory->destroy(setflag);
angle_table.cpp:    memory->destroy(theta0);
angle_table.cpp:    memory->destroy(tabindex);
angle_table.cpp:  memory->create(theta0,n+1,"angle:theta0");
angle_table.cpp:  memory->create(tabindex,n+1,"angle:tabindex");
angle_table.cpp:  memory->create(setflag,n+1,"angle:setflag");
angle_table.cpp:  memory->sfree(tables);
angle_table.cpp:     memory->destroy(setflag);
angle_table.cpp:     memory->destroy(tabindex);
angle_table.cpp:    memory->srealloc(tables,(ntables+1)*sizeof(Table),"angle:tables");
angle_table.cpp:  memory->destroy(tb->afile);
angle_table.cpp:  memory->destroy(tb->efile);
angle_table.cpp:  memory->destroy(tb->ffile);
angle_table.cpp:  memory->destroy(tb->e2file);
angle_table.cpp:  memory->destroy(tb->f2file);
angle_table.cpp:  memory->destroy(tb->ang);
angle_table.cpp:  memory->destroy(tb->e);
angle_table.cpp:  memory->destroy(tb->de);
angle_table.cpp:  memory->destroy(tb->f);
angle_table.cpp:  memory->destroy(tb->df);
angle_table.cpp:  memory->destroy(tb->e2);
angle_table.cpp:  memory->destroy(tb->f2);
angle_table.cpp:  memory->create(tb->afile,tb->ninput,"angle:afile");
angle_table.cpp:  memory->create(tb->efile,tb->ninput,"angle:efile");
angle_table.cpp:  memory->create(tb->ffile,tb->ninput,"angle:ffile");
angle_table.cpp:  memory->create(tb->e2file,tb->ninput,"angle:e2file");
angle_table.cpp:  memory->create(tb->f2file,tb->ninput,"angle:f2file");
angle_table.cpp:  memory->create(tb->ang,tablength,"angle:ang");
angle_table.cpp:  memory->create(tb->e,tablength,"angle:e");
angle_table.cpp:  memory->create(tb->de,tlm1,"angle:de");
angle_table.cpp:  memory->create(tb->f,tablength,"angle:f");
angle_table.cpp:  memory->create(tb->df,tlm1,"angle:df");
angle_table.cpp:  memory->create(tb->e2,tablength,"angle:e2");
angle_table.cpp:  memory->create(tb->f2,tablength,"angle:f2");
angle_table.cpp:    memory->create(tb->afile,tb->ninput,"angle:afile");
angle_table.cpp:    memory->create(tb->efile,tb->ninput,"angle:efile");
angle_table.cpp:    memory->create(tb->ffile,tb->ninput,"angle:ffile");
atom.cpp:  memory->destroy(binhead);
atom.cpp:  memory->destroy(next);
atom.cpp:  memory->destroy(permute);
atom.cpp:  memory->destroy(tag);
atom.cpp:  memory->destroy(type);
atom.cpp:  memory->destroy(mask);
atom.cpp:  memory->destroy(image);
atom.cpp:  memory->destroy(x);
atom.cpp:  memory->destroy(v);
atom.cpp:  memory->destroy(f);
atom.cpp:  memory->destroy(q);
atom.cpp:  memory->destroy(mu);
atom.cpp:  memory->destroy(omega);
atom.cpp:  memory->destroy(angmom);
atom.cpp:  memory->destroy(torque);
atom.cpp:  memory->destroy(radius);
atom.cpp:  memory->destroy(rmass);
atom.cpp:  memory->destroy(vfrac);
atom.cpp:  memory->destroy(s0);
atom.cpp:  memory->destroy(x0);
atom.cpp:  memory->destroy(ellipsoid);
atom.cpp:  memory->destroy(line);
atom.cpp:  memory->destroy(tri);
atom.cpp:  memory->destroy(spin);
atom.cpp:  memory->destroy(eradius);
atom.cpp:  memory->destroy(ervel);
atom.cpp:  memory->destroy(erforce);
atom.cpp:  memory->destroy(molecule);
atom.cpp:  memory->destroy(residue);
atom.cpp:  memory->destroy(nspecial);
atom.cpp:  memory->destroy(special);
atom.cpp:  memory->destroy(num_bond);
atom.cpp:  memory->destroy(bond_type);
atom.cpp:  memory->destroy(bond_atom);
atom.cpp:  memory->destroy(num_angle);
atom.cpp:  memory->destroy(angle_type);
atom.cpp:  memory->destroy(angle_atom1);
atom.cpp:  memory->destroy(angle_atom2);
atom.cpp:  memory->destroy(angle_atom3);
atom.cpp:  memory->destroy(num_dihedral);
atom.cpp:  memory->destroy(dihedral_type);
atom.cpp:  memory->destroy(dihedral_atom1);
atom.cpp:  memory->destroy(dihedral_atom2);
atom.cpp:  memory->destroy(dihedral_atom3);
atom.cpp:  memory->destroy(dihedral_atom4);
atom.cpp:  memory->destroy(num_improper);
atom.cpp:  memory->destroy(improper_type);
atom.cpp:  memory->destroy(improper_atom1);
atom.cpp:  memory->destroy(improper_atom2);
atom.cpp:  memory->destroy(improper_atom3);
atom.cpp:  memory->destroy(improper_atom4);
atom.cpp:  memory->destroy(extra_grow);
atom.cpp:  memory->destroy(extra_restart);
atom.cpp:  memory->destroy(extra);
atom.cpp:  memory->destroy(sametag);
atom.cpp:    memory->destroy(extra);
atom.cpp:  memory->create(copy,n,"atom:copy");
atom.cpp:    memory->destroy(copy);
atom.cpp:  memory->destroy(copy);
atom.cpp:    memory->destroy(next);
atom.cpp:    memory->destroy(permute);
atom.cpp:    memory->create(next,maxnext,"atom:next");
atom.cpp:    memory->create(permute,maxnext,"atom:permute");
atom.cpp:    memory->destroy(binhead);
atom.cpp:    memory->create(binhead,maxbin,"atom:binhead");
atom.cpp:      memory->grow(extra_grow,nextra_grow_max,"atom:extra_grow");
atom.cpp:      memory->grow(extra_restart,nextra_restart_max,"atom:extra_restart");
atom.cpp:  memory->create(memstr,memlength,"atom:memstr");
atom.cpp:  memory->destroy(memstr);
atom.cpp:    bytes += memory->usage(map_array,map_tag_max+1);
atom.cpp:    bytes += memory->usage(next,maxnext);
atom.cpp:    bytes += memory->usage(permute,maxnext);
atom.cpp:    memory->grow(memstr,memlength,"atom:memstr");
atom_map.cpp:  memory->destroy(sametag);
atom_map.cpp:  memory->create(sametag,smax,"atom:sametag");
atom_map.cpp:    memory->create(map_array,map_tag_max+1,"atom:map_array");
atom_map.cpp:    memory->destroy(sametag);
atom_map.cpp:    memory->create(sametag,smax,"atom:sametag");
atom_map.cpp:    if (map_tag_max) memory->destroy(map_array);
atom_vec_angle.cpp:  tag = memory->grow(atom->tag,nmax,"atom:tag");
atom_vec_angle.cpp:  type = memory->grow(atom->type,nmax,"atom:type");
atom_vec_angle.cpp:  mask = memory->grow(atom->mask,nmax,"atom:mask");
atom_vec_angle.cpp:  image = memory->grow(atom->image,nmax,"atom:image");
atom_vec_angle.cpp:  x = memory->grow(atom->x,nmax,3,"atom:x");
atom_vec_angle.cpp:  v = memory->grow(atom->v,nmax,3,"atom:v");
atom_vec_angle.cpp:  f = memory->grow(atom->f,nmax*comm->nthreads,3,"atom:f");
atom_vec_angle.cpp:  molecule = memory->grow(atom->molecule,nmax,"atom:molecule");
atom_vec_angle.cpp:  nspecial = memory->grow(atom->nspecial,nmax,3,"atom:nspecial");
atom_vec_angle.cpp:  special = memory->grow(atom->special,nmax,atom->maxspecial,"atom:special");
atom_vec_angle.cpp:  num_bond = memory->grow(atom->num_bond,nmax,"atom:num_bond");
atom_vec_angle.cpp:  bond_type = memory->grow(atom->bond_type,nmax,atom->bond_per_atom,
atom_vec_angle.cpp:  bond_atom = memory->grow(atom->bond_atom,nmax,atom->bond_per_atom,
atom_vec_angle.cpp:  num_angle = memory->grow(atom->num_angle,nmax,"atom:num_angle");
atom_vec_angle.cpp:  angle_type = memory->grow(atom->angle_type,nmax,atom->angle_per_atom,
atom_vec_angle.cpp:  angle_atom1 = memory->grow(atom->angle_atom1,nmax,atom->angle_per_atom,
atom_vec_angle.cpp:  angle_atom2 = memory->grow(atom->angle_atom2,nmax,atom->angle_per_atom,
atom_vec_angle.cpp:  angle_atom3 = memory->grow(atom->angle_atom3,nmax,atom->angle_per_atom,
atom_vec_angle.cpp:      memory->grow(atom->extra,nmax,atom->nextra_store,"atom:extra");
atom_vec_angle.cpp:  if (atom->memcheck("tag")) bytes += memory->usage(tag,nmax);
atom_vec_angle.cpp:  if (atom->memcheck("type")) bytes += memory->usage(type,nmax);
atom_vec_angle.cpp:  if (atom->memcheck("mask")) bytes += memory->usage(mask,nmax);
atom_vec_angle.cpp:  if (atom->memcheck("image")) bytes += memory->usage(image,nmax);
atom_vec_angle.cpp:  if (atom->memcheck("x")) bytes += memory->usage(x,nmax,3);
atom_vec_angle.cpp:  if (atom->memcheck("v")) bytes += memory->usage(v,nmax,3);
atom_vec_angle.cpp:  if (atom->memcheck("f")) bytes += memory->usage(f,nmax*comm->nthreads,3);
atom_vec_angle.cpp:  if (atom->memcheck("molecule")) bytes += memory->usage(molecule,nmax);
atom_vec_angle.cpp:  if (atom->memcheck("nspecial")) bytes += memory->usage(nspecial,nmax,3);
atom_vec_angle.cpp:    bytes += memory->usage(special,nmax,atom->maxspecial);
atom_vec_angle.cpp:  if (atom->memcheck("num_bond")) bytes += memory->usage(num_bond,nmax);
atom_vec_angle.cpp:    bytes += memory->usage(bond_type,nmax,atom->bond_per_atom);
atom_vec_angle.cpp:    bytes += memory->usage(bond_atom,nmax,atom->bond_per_atom);
atom_vec_angle.cpp:  if (atom->memcheck("num_angle")) bytes += memory->usage(num_angle,nmax);
atom_vec_angle.cpp:    bytes += memory->usage(angle_type,nmax,atom->angle_per_atom);
atom_vec_angle.cpp:    bytes += memory->usage(angle_atom1,nmax,atom->angle_per_atom);
atom_vec_angle.cpp:    bytes += memory->usage(angle_atom2,nmax,atom->angle_per_atom);
atom_vec_angle.cpp:    bytes += memory->usage(angle_atom3,nmax,atom->angle_per_atom);
atom_vec_atomic.cpp:  tag = memory->grow(atom->tag,nmax,"atom:tag");
atom_vec_atomic.cpp:  type = memory->grow(atom->type,nmax,"atom:type");
atom_vec_atomic.cpp:  mask = memory->grow(atom->mask,nmax,"atom:mask");
atom_vec_atomic.cpp:  image = memory->grow(atom->image,nmax,"atom:image");
atom_vec_atomic.cpp:  x = memory->grow(atom->x,nmax,3,"atom:x");
atom_vec_atomic.cpp:  v = memory->grow(atom->v,nmax,3,"atom:v");
atom_vec_atomic.cpp:  f = memory->grow(atom->f,nmax*comm->nthreads,3,"atom:f");
atom_vec_atomic.cpp:      memory->grow(atom->extra,nmax,atom->nextra_store,"atom:extra");
atom_vec_atomic.cpp:  if (atom->memcheck("tag")) bytes += memory->usage(tag,nmax);
atom_vec_atomic.cpp:  if (atom->memcheck("type")) bytes += memory->usage(type,nmax);
atom_vec_atomic.cpp:  if (atom->memcheck("mask")) bytes += memory->usage(mask,nmax);
atom_vec_atomic.cpp:  if (atom->memcheck("image")) bytes += memory->usage(image,nmax);
atom_vec_atomic.cpp:  if (atom->memcheck("x")) bytes += memory->usage(x,nmax,3);
atom_vec_atomic.cpp:  if (atom->memcheck("v")) bytes += memory->usage(v,nmax,3);
atom_vec_atomic.cpp:  if (atom->memcheck("f")) bytes += memory->usage(f,nmax*comm->nthreads,3);
atom_vec_bond.cpp:  tag = memory->grow(atom->tag,nmax,"atom:tag");
atom_vec_bond.cpp:  type = memory->grow(atom->type,nmax,"atom:type");
atom_vec_bond.cpp:  mask = memory->grow(atom->mask,nmax,"atom:mask");
atom_vec_bond.cpp:  image = memory->grow(atom->image,nmax,"atom:image");
atom_vec_bond.cpp:  x = memory->grow(atom->x,nmax,3,"atom:x");
atom_vec_bond.cpp:  v = memory->grow(atom->v,nmax,3,"atom:v");
atom_vec_bond.cpp:  f = memory->grow(atom->f,nmax*comm->nthreads,3,"atom:f");
atom_vec_bond.cpp:  molecule = memory->grow(atom->molecule,nmax,"atom:molecule");
atom_vec_bond.cpp:  nspecial = memory->grow(atom->nspecial,nmax,3,"atom:nspecial");
atom_vec_bond.cpp:  special = memory->grow(atom->special,nmax,atom->maxspecial,"atom:special");
atom_vec_bond.cpp:  num_bond = memory->grow(atom->num_bond,nmax,"atom:num_bond");
atom_vec_bond.cpp:  bond_type = memory->grow(atom->bond_type,nmax,atom->bond_per_atom,
atom_vec_bond.cpp:  bond_atom = memory->grow(atom->bond_atom,nmax,atom->bond_per_atom,
atom_vec_bond.cpp:      memory->grow(atom->extra,nmax,atom->nextra_store,"atom:extra");
atom_vec_bond.cpp:  if (atom->memcheck("tag")) bytes += memory->usage(tag,nmax);
atom_vec_bond.cpp:  if (atom->memcheck("type")) bytes += memory->usage(type,nmax);
atom_vec_bond.cpp:  if (atom->memcheck("mask")) bytes += memory->usage(mask,nmax);
atom_vec_bond.cpp:  if (atom->memcheck("image")) bytes += memory->usage(image,nmax);
atom_vec_bond.cpp:  if (atom->memcheck("x")) bytes += memory->usage(x,nmax,3);
atom_vec_bond.cpp:  if (atom->memcheck("v")) bytes += memory->usage(v,nmax,3);
atom_vec_bond.cpp:  if (atom->memcheck("f")) bytes += memory->usage(f,nmax*comm->nthreads,3);
atom_vec_bond.cpp:  if (atom->memcheck("molecule")) bytes += memory->usage(molecule,nmax);
atom_vec_bond.cpp:  if (atom->memcheck("nspecial")) bytes += memory->usage(nspecial,nmax,3);
atom_vec_bond.cpp:    bytes += memory->usage(special,nmax,atom->maxspecial);
atom_vec_bond.cpp:  if (atom->memcheck("num_bond")) bytes += memory->usage(num_bond,nmax);
atom_vec_bond.cpp:    bytes += memory->usage(bond_type,nmax,atom->bond_per_atom);
atom_vec_bond.cpp:    bytes += memory->usage(bond_atom,nmax,atom->bond_per_atom);
atom_vec_charge.cpp:  tag = memory->grow(atom->tag,nmax,"atom:tag");
atom_vec_charge.cpp:  type = memory->grow(atom->type,nmax,"atom:type");
atom_vec_charge.cpp:  mask = memory->grow(atom->mask,nmax,"atom:mask");
atom_vec_charge.cpp:  image = memory->grow(atom->image,nmax,"atom:image");
atom_vec_charge.cpp:  x = memory->grow(atom->x,nmax,3,"atom:x");
atom_vec_charge.cpp:  v = memory->grow(atom->v,nmax,3,"atom:v");
atom_vec_charge.cpp:  f = memory->grow(atom->f,nmax*comm->nthreads,3,"atom:f");
atom_vec_charge.cpp:  q = memory->grow(atom->q,nmax,"atom:q");
atom_vec_charge.cpp:      memory->grow(atom->extra,nmax,atom->nextra_store,"atom:extra");
atom_vec_charge.cpp:  if (atom->memcheck("tag")) bytes += memory->usage(tag,nmax);
atom_vec_charge.cpp:  if (atom->memcheck("type")) bytes += memory->usage(type,nmax);
atom_vec_charge.cpp:  if (atom->memcheck("mask")) bytes += memory->usage(mask,nmax);
atom_vec_charge.cpp:  if (atom->memcheck("image")) bytes += memory->usage(image,nmax);
atom_vec_charge.cpp:  if (atom->memcheck("x")) bytes += memory->usage(x,nmax,3);
atom_vec_charge.cpp:  if (atom->memcheck("v")) bytes += memory->usage(v,nmax,3);
atom_vec_charge.cpp:  if (atom->memcheck("f")) bytes += memory->usage(f,nmax*comm->nthreads,3);
atom_vec_charge.cpp:  if (atom->memcheck("q")) bytes += memory->usage(q,nmax);
atom_vec_ellipsoid.cpp:  memory->sfree(bonus);
atom_vec_ellipsoid.cpp:  tag = memory->grow(atom->tag,nmax,"atom:tag");
atom_vec_ellipsoid.cpp:  type = memory->grow(atom->type,nmax,"atom:type");
atom_vec_ellipsoid.cpp:  mask = memory->grow(atom->mask,nmax,"atom:mask");
atom_vec_ellipsoid.cpp:  image = memory->grow(atom->image,nmax,"atom:image");
atom_vec_ellipsoid.cpp:  x = memory->grow(atom->x,nmax,3,"atom:x");
atom_vec_ellipsoid.cpp:  v = memory->grow(atom->v,nmax,3,"atom:v");
atom_vec_ellipsoid.cpp:  f = memory->grow(atom->f,nmax*comm->nthreads,3,"atom:f");
atom_vec_ellipsoid.cpp:  rmass = memory->grow(atom->rmass,nmax,"atom:rmass");
atom_vec_ellipsoid.cpp:  angmom = memory->grow(atom->angmom,nmax,3,"atom:angmom");
atom_vec_ellipsoid.cpp:  torque = memory->grow(atom->torque,nmax*comm->nthreads,3,"atom:torque");
atom_vec_ellipsoid.cpp:  ellipsoid = memory->grow(atom->ellipsoid,nmax,"atom:ellipsoid");
atom_vec_ellipsoid.cpp:  bonus = (Bonus *) memory->srealloc(bonus,nmax_bonus*sizeof(Bonus),
atom_vec_ellipsoid.cpp:      memory->grow(atom->extra,nmax,atom->nextra_store,"atom:extra");
atom_vec_ellipsoid.cpp:  if (atom->memcheck("tag")) bytes += memory->usage(tag,nmax);
atom_vec_ellipsoid.cpp:  if (atom->memcheck("type")) bytes += memory->usage(type,nmax);
atom_vec_ellipsoid.cpp:  if (atom->memcheck("mask")) bytes += memory->usage(mask,nmax);
atom_vec_ellipsoid.cpp:  if (atom->memcheck("image")) bytes += memory->usage(image,nmax);
atom_vec_ellipsoid.cpp:  if (atom->memcheck("x")) bytes += memory->usage(x,nmax,3);
atom_vec_ellipsoid.cpp:  if (atom->memcheck("v")) bytes += memory->usage(v,nmax,3);
atom_vec_ellipsoid.cpp:  if (atom->memcheck("f")) bytes += memory->usage(f,nmax*comm->nthreads,3);
atom_vec_ellipsoid.cpp:  if (atom->memcheck("rmass")) bytes += memory->usage(rmass,nmax);
atom_vec_ellipsoid.cpp:  if (atom->memcheck("angmom")) bytes += memory->usage(angmom,nmax,3);
atom_vec_ellipsoid.cpp:  if (atom->memcheck("torque")) bytes += memory->usage(torque,nmax*comm->nthreads,3);
atom_vec_ellipsoid.cpp:  if (atom->memcheck("ellipsoid")) bytes += memory->usage(ellipsoid,nmax);
atom_vec_full.cpp:  tag = memory->grow(atom->tag,nmax,"atom:tag");
atom_vec_full.cpp:  type = memory->grow(atom->type,nmax,"atom:type");
atom_vec_full.cpp:  mask = memory->grow(atom->mask,nmax,"atom:mask");
atom_vec_full.cpp:  image = memory->grow(atom->image,nmax,"atom:image");
atom_vec_full.cpp:  x = memory->grow(atom->x,nmax,3,"atom:x");
atom_vec_full.cpp:  v = memory->grow(atom->v,nmax,3,"atom:v");
atom_vec_full.cpp:  f = memory->grow(atom->f,nmax*comm->nthreads,3,"atom:f");
atom_vec_full.cpp:  q = memory->grow(atom->q,nmax,"atom:q");
atom_vec_full.cpp:  molecule = memory->grow(atom->molecule,nmax,"atom:molecule");
atom_vec_full.cpp:  nspecial = memory->grow(atom->nspecial,nmax,3,"atom:nspecial");
atom_vec_full.cpp:  special = memory->grow(atom->special,nmax,atom->maxspecial,"atom:special");
atom_vec_full.cpp:  num_bond = memory->grow(atom->num_bond,nmax,"atom:num_bond");
atom_vec_full.cpp:  bond_type = memory->grow(atom->bond_type,nmax,atom->bond_per_atom,
atom_vec_full.cpp:  bond_atom = memory->grow(atom->bond_atom,nmax,atom->bond_per_atom,
atom_vec_full.cpp:  num_angle = memory->grow(atom->num_angle,nmax,"atom:num_angle");
atom_vec_full.cpp:  angle_type = memory->grow(atom->angle_type,nmax,atom->angle_per_atom,
atom_vec_full.cpp:  angle_atom1 = memory->grow(atom->angle_atom1,nmax,atom->angle_per_atom,
atom_vec_full.cpp:  angle_atom2 = memory->grow(atom->angle_atom2,nmax,atom->angle_per_atom,
atom_vec_full.cpp:  angle_atom3 = memory->grow(atom->angle_atom3,nmax,atom->angle_per_atom,
atom_vec_full.cpp:  num_dihedral = memory->grow(atom->num_dihedral,nmax,"atom:num_dihedral");
atom_vec_full.cpp:  dihedral_type = memory->grow(atom->dihedral_type,nmax,
atom_vec_full.cpp:    memory->grow(atom->dihedral_atom1,nmax,atom->dihedral_per_atom,
atom_vec_full.cpp:    memory->grow(atom->dihedral_atom2,nmax,atom->dihedral_per_atom,
atom_vec_full.cpp:    memory->grow(atom->dihedral_atom3,nmax,atom->dihedral_per_atom,
atom_vec_full.cpp:    memory->grow(atom->dihedral_atom4,nmax,atom->dihedral_per_atom,
atom_vec_full.cpp:  num_improper = memory->grow(atom->num_improper,nmax,"atom:num_improper");
atom_vec_full.cpp:    memory->grow(atom->improper_type,nmax,atom->improper_per_atom,
atom_vec_full.cpp:    memory->grow(atom->improper_atom1,nmax,atom->improper_per_atom,
atom_vec_full.cpp:    memory->grow(atom->improper_atom2,nmax,atom->improper_per_atom,
atom_vec_full.cpp:    memory->grow(atom->improper_atom3,nmax,atom->improper_per_atom,
atom_vec_full.cpp:    memory->grow(atom->improper_atom4,nmax,atom->improper_per_atom,
atom_vec_full.cpp:      memory->grow(atom->extra,nmax,atom->nextra_store,"atom:extra");
atom_vec_full.cpp:  if (atom->memcheck("tag")) bytes += memory->usage(tag,nmax);
atom_vec_full.cpp:  if (atom->memcheck("type")) bytes += memory->usage(type,nmax);
atom_vec_full.cpp:  if (atom->memcheck("mask")) bytes += memory->usage(mask,nmax);
atom_vec_full.cpp:  if (atom->memcheck("image")) bytes += memory->usage(image,nmax);
atom_vec_full.cpp:  if (atom->memcheck("x")) bytes += memory->usage(x,nmax,3);
atom_vec_full.cpp:  if (atom->memcheck("v")) bytes += memory->usage(v,nmax,3);
atom_vec_full.cpp:  if (atom->memcheck("f")) bytes += memory->usage(f,nmax*comm->nthreads,3);
atom_vec_full.cpp:  if (atom->memcheck("q")) bytes += memory->usage(q,nmax);
atom_vec_full.cpp:  if (atom->memcheck("molecule")) bytes += memory->usage(molecule,nmax);
atom_vec_full.cpp:  if (atom->memcheck("nspecial")) bytes += memory->usage(nspecial,nmax,3);
atom_vec_full.cpp:    bytes += memory->usage(special,nmax,atom->maxspecial);
atom_vec_full.cpp:  if (atom->memcheck("num_bond")) bytes += memory->usage(num_bond,nmax);
atom_vec_full.cpp:    bytes += memory->usage(bond_type,nmax,atom->bond_per_atom);
atom_vec_full.cpp:    bytes += memory->usage(bond_atom,nmax,atom->bond_per_atom);
atom_vec_full.cpp:  if (atom->memcheck("num_angle")) bytes += memory->usage(num_angle,nmax);
atom_vec_full.cpp:    bytes += memory->usage(angle_type,nmax,atom->angle_per_atom);
atom_vec_full.cpp:    bytes += memory->usage(angle_atom1,nmax,atom->angle_per_atom);
atom_vec_full.cpp:    bytes += memory->usage(angle_atom2,nmax,atom->angle_per_atom);
atom_vec_full.cpp:    bytes += memory->usage(angle_atom3,nmax,atom->angle_per_atom);
atom_vec_full.cpp:  if (atom->memcheck("num_dihedral")) bytes += memory->usage(num_dihedral,nmax);
atom_vec_full.cpp:    bytes += memory->usage(dihedral_type,nmax,atom->dihedral_per_atom);
atom_vec_full.cpp:    bytes += memory->usage(dihedral_atom1,nmax,atom->dihedral_per_atom);
atom_vec_full.cpp:    bytes += memory->usage(dihedral_atom2,nmax,atom->dihedral_per_atom);
atom_vec_full.cpp:    bytes += memory->usage(dihedral_atom3,nmax,atom->dihedral_per_atom);
atom_vec_full.cpp:    bytes += memory->usage(dihedral_atom4,nmax,atom->dihedral_per_atom);
atom_vec_full.cpp:  if (atom->memcheck("num_improper")) bytes += memory->usage(num_improper,nmax);
atom_vec_full.cpp:    bytes += memory->usage(improper_type,nmax,atom->improper_per_atom);
atom_vec_full.cpp:    bytes += memory->usage(improper_atom1,nmax,atom->improper_per_atom);
atom_vec_full.cpp:    bytes += memory->usage(improper_atom2,nmax,atom->improper_per_atom);
atom_vec_full.cpp:    bytes += memory->usage(improper_atom3,nmax,atom->improper_per_atom);
atom_vec_full.cpp:    bytes += memory->usage(improper_atom4,nmax,atom->improper_per_atom);
atom_vec_hybrid.cpp:      memory->grow(atom->extra,nmax,atom->nextra_store,"atom:extra");
atom_vec_line.cpp:  memory->sfree(bonus);
atom_vec_line.cpp:  tag = memory->grow(atom->tag,nmax,"atom:tag");
atom_vec_line.cpp:  type = memory->grow(atom->type,nmax,"atom:type");
atom_vec_line.cpp:  mask = memory->grow(atom->mask,nmax,"atom:mask");
atom_vec_line.cpp:  image = memory->grow(atom->image,nmax,"atom:image");
atom_vec_line.cpp:  x = memory->grow(atom->x,nmax,3,"atom:x");
atom_vec_line.cpp:  v = memory->grow(atom->v,nmax,3,"atom:v");
atom_vec_line.cpp:  f = memory->grow(atom->f,nmax*comm->nthreads,3,"atom:f");
atom_vec_line.cpp:  molecule = memory->grow(atom->molecule,nmax,"atom:molecule");
atom_vec_line.cpp:  rmass = memory->grow(atom->rmass,nmax,"atom:rmass");
atom_vec_line.cpp:  omega = memory->grow(atom->omega,nmax,3,"atom:omega");
atom_vec_line.cpp:  torque = memory->grow(atom->torque,nmax*comm->nthreads,3,"atom:torque");
atom_vec_line.cpp:  line = memory->grow(atom->line,nmax,"atom:line");
atom_vec_line.cpp:  bonus = (Bonus *) memory->srealloc(bonus,nmax_bonus*sizeof(Bonus),
atom_vec_line.cpp:      memory->grow(atom->extra,nmax,atom->nextra_store,"atom:extra");
atom_vec_line.cpp:  if (atom->memcheck("tag")) bytes += memory->usage(tag,nmax);
atom_vec_line.cpp:  if (atom->memcheck("type")) bytes += memory->usage(type,nmax);
atom_vec_line.cpp:  if (atom->memcheck("mask")) bytes += memory->usage(mask,nmax);
atom_vec_line.cpp:  if (atom->memcheck("image")) bytes += memory->usage(image,nmax);
atom_vec_line.cpp:  if (atom->memcheck("x")) bytes += memory->usage(x,nmax,3);
atom_vec_line.cpp:  if (atom->memcheck("v")) bytes += memory->usage(v,nmax,3);
atom_vec_line.cpp:  if (atom->memcheck("f")) bytes += memory->usage(f,nmax*comm->nthreads,3);
atom_vec_line.cpp:  if (atom->memcheck("molecule")) bytes += memory->usage(molecule,nmax);
atom_vec_line.cpp:  if (atom->memcheck("rmass")) bytes += memory->usage(rmass,nmax);
atom_vec_line.cpp:  if (atom->memcheck("omega")) bytes += memory->usage(omega,nmax,3);
atom_vec_line.cpp:  if (atom->memcheck("torque")) bytes += memory->usage(torque,nmax*comm->nthreads,3);
atom_vec_line.cpp:  if (atom->memcheck("line")) bytes += memory->usage(line,nmax);
atom_vec_molecular.cpp:  tag = memory->grow(atom->tag,nmax,"atom:tag");
atom_vec_molecular.cpp:  type = memory->grow(atom->type,nmax,"atom:type");
atom_vec_molecular.cpp:  mask = memory->grow(atom->mask,nmax,"atom:mask");
atom_vec_molecular.cpp:  image = memory->grow(atom->image,nmax,"atom:image");
atom_vec_molecular.cpp:  x = memory->grow(atom->x,nmax,3,"atom:x");
atom_vec_molecular.cpp:  v = memory->grow(atom->v,nmax,3,"atom:v");
atom_vec_molecular.cpp:  f = memory->grow(atom->f,nmax*comm->nthreads,3,"atom:f");
atom_vec_molecular.cpp:  molecule = memory->grow(atom->molecule,nmax,"atom:molecule");
atom_vec_molecular.cpp:  nspecial = memory->grow(atom->nspecial,nmax,3,"atom:nspecial");
atom_vec_molecular.cpp:  special = memory->grow(atom->special,nmax,atom->maxspecial,"atom:special");
atom_vec_molecular.cpp:  num_bond = memory->grow(atom->num_bond,nmax,"atom:num_bond");
atom_vec_molecular.cpp:  bond_type = memory->grow(atom->bond_type,nmax,atom->bond_per_atom,
atom_vec_molecular.cpp:  bond_atom = memory->grow(atom->bond_atom,nmax,atom->bond_per_atom,
atom_vec_molecular.cpp:  num_angle = memory->grow(atom->num_angle,nmax,"atom:num_angle");
atom_vec_molecular.cpp:  angle_type = memory->grow(atom->angle_type,nmax,atom->angle_per_atom,
atom_vec_molecular.cpp:  angle_atom1 = memory->grow(atom->angle_atom1,nmax,atom->angle_per_atom,
atom_vec_molecular.cpp:  angle_atom2 = memory->grow(atom->angle_atom2,nmax,atom->angle_per_atom,
atom_vec_molecular.cpp:  angle_atom3 = memory->grow(atom->angle_atom3,nmax,atom->angle_per_atom,
atom_vec_molecular.cpp:  num_dihedral = memory->grow(atom->num_dihedral,nmax,"atom:num_dihedral");
atom_vec_molecular.cpp:  dihedral_type = memory->grow(atom->dihedral_type,nmax,
atom_vec_molecular.cpp:    memory->grow(atom->dihedral_atom1,nmax,atom->dihedral_per_atom,
atom_vec_molecular.cpp:    memory->grow(atom->dihedral_atom2,nmax,atom->dihedral_per_atom,
atom_vec_molecular.cpp:    memory->grow(atom->dihedral_atom3,nmax,atom->dihedral_per_atom,
atom_vec_molecular.cpp:    memory->grow(atom->dihedral_atom4,nmax,atom->dihedral_per_atom,
atom_vec_molecular.cpp:  num_improper = memory->grow(atom->num_improper,nmax,"atom:num_improper");
atom_vec_molecular.cpp:    memory->grow(atom->improper_type,nmax,atom->improper_per_atom,
atom_vec_molecular.cpp:    memory->grow(atom->improper_atom1,nmax,atom->improper_per_atom,
atom_vec_molecular.cpp:    memory->grow(atom->improper_atom2,nmax,atom->improper_per_atom,
atom_vec_molecular.cpp:    memory->grow(atom->improper_atom3,nmax,atom->improper_per_atom,
atom_vec_molecular.cpp:    memory->grow(atom->improper_atom4,nmax,atom->improper_per_atom,
atom_vec_molecular.cpp:      memory->grow(atom->extra,nmax,atom->nextra_store,"atom:extra");
atom_vec_molecular.cpp:  if (atom->memcheck("tag")) bytes += memory->usage(tag,nmax);
atom_vec_molecular.cpp:  if (atom->memcheck("type")) bytes += memory->usage(type,nmax);
atom_vec_molecular.cpp:  if (atom->memcheck("mask")) bytes += memory->usage(mask,nmax);
atom_vec_molecular.cpp:  if (atom->memcheck("image")) bytes += memory->usage(image,nmax);
atom_vec_molecular.cpp:  if (atom->memcheck("x")) bytes += memory->usage(x,nmax,3);
atom_vec_molecular.cpp:  if (atom->memcheck("v")) bytes += memory->usage(v,nmax,3);
atom_vec_molecular.cpp:  if (atom->memcheck("f")) bytes += memory->usage(f,nmax*comm->nthreads,3);
atom_vec_molecular.cpp:  if (atom->memcheck("molecule")) bytes += memory->usage(molecule,nmax);
atom_vec_molecular.cpp:  if (atom->memcheck("nspecial")) bytes += memory->usage(nspecial,nmax,3);
atom_vec_molecular.cpp:    bytes += memory->usage(special,nmax,atom->maxspecial);
atom_vec_molecular.cpp:  if (atom->memcheck("num_bond")) bytes += memory->usage(num_bond,nmax);
atom_vec_molecular.cpp:    bytes += memory->usage(bond_type,nmax,atom->bond_per_atom);
atom_vec_molecular.cpp:    bytes += memory->usage(bond_atom,nmax,atom->bond_per_atom);
atom_vec_molecular.cpp:  if (atom->memcheck("num_angle")) bytes += memory->usage(num_angle,nmax);
atom_vec_molecular.cpp:    bytes += memory->usage(angle_type,nmax,atom->angle_per_atom);
atom_vec_molecular.cpp:    bytes += memory->usage(angle_atom1,nmax,atom->angle_per_atom);
atom_vec_molecular.cpp:    bytes += memory->usage(angle_atom2,nmax,atom->angle_per_atom);
atom_vec_molecular.cpp:    bytes += memory->usage(angle_atom3,nmax,atom->angle_per_atom);
atom_vec_molecular.cpp:  if (atom->memcheck("num_dihedral")) bytes += memory->usage(num_dihedral,nmax);
atom_vec_molecular.cpp:    bytes += memory->usage(dihedral_type,nmax,atom->dihedral_per_atom);
atom_vec_molecular.cpp:    bytes += memory->usage(dihedral_atom1,nmax,atom->dihedral_per_atom);
atom_vec_molecular.cpp:    bytes += memory->usage(dihedral_atom2,nmax,atom->dihedral_per_atom);
atom_vec_molecular.cpp:    bytes += memory->usage(dihedral_atom3,nmax,atom->dihedral_per_atom);
atom_vec_molecular.cpp:    bytes += memory->usage(dihedral_atom4,nmax,atom->dihedral_per_atom);
atom_vec_molecular.cpp:  if (atom->memcheck("num_improper")) bytes += memory->usage(num_improper,nmax);
atom_vec_molecular.cpp:    bytes += memory->usage(improper_type,nmax,atom->improper_per_atom);
atom_vec_molecular.cpp:    bytes += memory->usage(improper_atom1,nmax,atom->improper_per_atom);
atom_vec_molecular.cpp:    bytes += memory->usage(improper_atom2,nmax,atom->improper_per_atom);
atom_vec_molecular.cpp:    bytes += memory->usage(improper_atom3,nmax,atom->improper_per_atom);
atom_vec_molecular.cpp:    bytes += memory->usage(improper_atom4,nmax,atom->improper_per_atom);
atom_vec_peptide.cpp:  tag = memory->grow(atom->tag,nmax,"atom:tag");
atom_vec_peptide.cpp:  type = memory->grow(atom->type,nmax,"atom:type");
atom_vec_peptide.cpp:  mask = memory->grow(atom->mask,nmax,"atom:mask");
atom_vec_peptide.cpp:  image = memory->grow(atom->image,nmax,"atom:image");
atom_vec_peptide.cpp:  x = memory->grow(atom->x,nmax,3,"atom:x");
atom_vec_peptide.cpp:  v = memory->grow(atom->v,nmax,3,"atom:v");
atom_vec_peptide.cpp:  f = memory->grow(atom->f,nmax*comm->nthreads,3,"atom:f");
atom_vec_peptide.cpp:  q = memory->grow(atom->q,nmax,"atom:q");
atom_vec_peptide.cpp:  molecule = memory->grow(atom->molecule,nmax,"atom:molecule");
atom_vec_peptide.cpp:  residue = memory->grow(atom->residue,nmax,"atom:residue");
atom_vec_peptide.cpp:  nspecial = memory->grow(atom->nspecial,nmax,3,"atom:nspecial");
atom_vec_peptide.cpp:  special = memory->grow(atom->special,nmax,atom->maxspecial,"atom:special");
atom_vec_peptide.cpp:  num_bond = memory->grow(atom->num_bond,nmax,"atom:num_bond");
atom_vec_peptide.cpp:  bond_type = memory->grow(atom->bond_type,nmax,atom->bond_per_atom,
atom_vec_peptide.cpp:  bond_atom = memory->grow(atom->bond_atom,nmax,atom->bond_per_atom,
atom_vec_peptide.cpp:  num_angle = memory->grow(atom->num_angle,nmax,"atom:num_angle");
atom_vec_peptide.cpp:  angle_type = memory->grow(atom->angle_type,nmax,atom->angle_per_atom,
atom_vec_peptide.cpp:  angle_atom1 = memory->grow(atom->angle_atom1,nmax,atom->angle_per_atom,
atom_vec_peptide.cpp:  angle_atom2 = memory->grow(atom->angle_atom2,nmax,atom->angle_per_atom,
atom_vec_peptide.cpp:  angle_atom3 = memory->grow(atom->angle_atom3,nmax,atom->angle_per_atom,
atom_vec_peptide.cpp:  num_dihedral = memory->grow(atom->num_dihedral,nmax,"atom:num_dihedral");
atom_vec_peptide.cpp:  dihedral_type = memory->grow(atom->dihedral_type,nmax,
atom_vec_peptide.cpp:    memory->grow(atom->dihedral_atom1,nmax,atom->dihedral_per_atom,
atom_vec_peptide.cpp:    memory->grow(atom->dihedral_atom2,nmax,atom->dihedral_per_atom,
atom_vec_peptide.cpp:    memory->grow(atom->dihedral_atom3,nmax,atom->dihedral_per_atom,
atom_vec_peptide.cpp:    memory->grow(atom->dihedral_atom4,nmax,atom->dihedral_per_atom,
atom_vec_peptide.cpp:  num_improper = memory->grow(atom->num_improper,nmax,"atom:num_improper");
atom_vec_peptide.cpp:    memory->grow(atom->improper_type,nmax,atom->improper_per_atom,
atom_vec_peptide.cpp:    memory->grow(atom->improper_atom1,nmax,atom->improper_per_atom,
atom_vec_peptide.cpp:    memory->grow(atom->improper_atom2,nmax,atom->improper_per_atom,
atom_vec_peptide.cpp:    memory->grow(atom->improper_atom3,nmax,atom->improper_per_atom,
atom_vec_peptide.cpp:    memory->grow(atom->improper_atom4,nmax,atom->improper_per_atom,
atom_vec_peptide.cpp:      memory->grow(atom->extra,nmax,atom->nextra_store,"atom:extra");
atom_vec_peptide.cpp:  if (atom->memcheck("tag")) bytes += memory->usage(tag,nmax);
atom_vec_peptide.cpp:  if (atom->memcheck("type")) bytes += memory->usage(type,nmax);
atom_vec_peptide.cpp:  if (atom->memcheck("mask")) bytes += memory->usage(mask,nmax);
atom_vec_peptide.cpp:  if (atom->memcheck("image")) bytes += memory->usage(image,nmax);
atom_vec_peptide.cpp:  if (atom->memcheck("x")) bytes += memory->usage(x,nmax,3);
atom_vec_peptide.cpp:  if (atom->memcheck("v")) bytes += memory->usage(v,nmax,3);
atom_vec_peptide.cpp:  if (atom->memcheck("f")) bytes += memory->usage(f,nmax*comm->nthreads,3);
atom_vec_peptide.cpp:  if (atom->memcheck("q")) bytes += memory->usage(q,nmax);
atom_vec_peptide.cpp:  if (atom->memcheck("molecule")) bytes += memory->usage(molecule,nmax);
atom_vec_peptide.cpp:  if (atom->memcheck("residue")) bytes += memory->usage(residue,nmax);
atom_vec_peptide.cpp:  if (atom->memcheck("nspecial")) bytes += memory->usage(nspecial,nmax,3);
atom_vec_peptide.cpp:    bytes += memory->usage(special,nmax,atom->maxspecial);
atom_vec_peptide.cpp:  if (atom->memcheck("num_bond")) bytes += memory->usage(num_bond,nmax);
atom_vec_peptide.cpp:    bytes += memory->usage(bond_type,nmax,atom->bond_per_atom);
atom_vec_peptide.cpp:    bytes += memory->usage(bond_atom,nmax,atom->bond_per_atom);
atom_vec_peptide.cpp:  if (atom->memcheck("num_angle")) bytes += memory->usage(num_angle,nmax);
atom_vec_peptide.cpp:    bytes += memory->usage(angle_type,nmax,atom->angle_per_atom);
atom_vec_peptide.cpp:    bytes += memory->usage(angle_atom1,nmax,atom->angle_per_atom);
atom_vec_peptide.cpp:    bytes += memory->usage(angle_atom2,nmax,atom->angle_per_atom);
atom_vec_peptide.cpp:    bytes += memory->usage(angle_atom3,nmax,atom->angle_per_atom);
atom_vec_peptide.cpp:  if (atom->memcheck("num_dihedral")) bytes += memory->usage(num_dihedral,nmax);
atom_vec_peptide.cpp:    bytes += memory->usage(dihedral_type,nmax,atom->dihedral_per_atom);
atom_vec_peptide.cpp:    bytes += memory->usage(dihedral_atom1,nmax,atom->dihedral_per_atom);
atom_vec_peptide.cpp:    bytes += memory->usage(dihedral_atom2,nmax,atom->dihedral_per_atom);
atom_vec_peptide.cpp:    bytes += memory->usage(dihedral_atom3,nmax,atom->dihedral_per_atom);
atom_vec_peptide.cpp:    bytes += memory->usage(dihedral_atom4,nmax,atom->dihedral_per_atom);
atom_vec_peptide.cpp:  if (atom->memcheck("num_improper")) bytes += memory->usage(num_improper,nmax);
atom_vec_peptide.cpp:    bytes += memory->usage(improper_type,nmax,atom->improper_per_atom);
atom_vec_peptide.cpp:    bytes += memory->usage(improper_atom1,nmax,atom->improper_per_atom);
atom_vec_peptide.cpp:    bytes += memory->usage(improper_atom2,nmax,atom->improper_per_atom);
atom_vec_peptide.cpp:    bytes += memory->usage(improper_atom3,nmax,atom->improper_per_atom);
atom_vec_peptide.cpp:    bytes += memory->usage(improper_atom4,nmax,atom->improper_per_atom);
atom_vec_sphere.cpp:  tag = memory->grow(atom->tag,nmax,"atom:tag");
atom_vec_sphere.cpp:  type = memory->grow(atom->type,nmax,"atom:type");
atom_vec_sphere.cpp:  mask = memory->grow(atom->mask,nmax,"atom:mask");
atom_vec_sphere.cpp:  image = memory->grow(atom->image,nmax,"atom:image");
atom_vec_sphere.cpp:  x = memory->grow(atom->x,nmax,3,"atom:x");
atom_vec_sphere.cpp:  v = memory->grow(atom->v,nmax,3,"atom:v");
atom_vec_sphere.cpp:  f = memory->grow(atom->f,nmax*comm->nthreads,3,"atom:f");
atom_vec_sphere.cpp:  radius = memory->grow(atom->radius,nmax,"atom:radius");
atom_vec_sphere.cpp:  rmass = memory->grow(atom->rmass,nmax,"atom:rmass");
atom_vec_sphere.cpp:  omega = memory->grow(atom->omega,nmax,3,"atom:omega");
atom_vec_sphere.cpp:  torque = memory->grow(atom->torque,nmax*comm->nthreads,3,"atom:torque");
atom_vec_sphere.cpp:      memory->grow(atom->extra,nmax,atom->nextra_store,"atom:extra");
atom_vec_sphere.cpp:  if (atom->memcheck("tag")) bytes += memory->usage(tag,nmax);
atom_vec_sphere.cpp:  if (atom->memcheck("type")) bytes += memory->usage(type,nmax);
atom_vec_sphere.cpp:  if (atom->memcheck("mask")) bytes += memory->usage(mask,nmax);
atom_vec_sphere.cpp:  if (atom->memcheck("image")) bytes += memory->usage(image,nmax);
atom_vec_sphere.cpp:  if (atom->memcheck("x")) bytes += memory->usage(x,nmax,3);
atom_vec_sphere.cpp:  if (atom->memcheck("v")) bytes += memory->usage(v,nmax,3);
atom_vec_sphere.cpp:  if (atom->memcheck("f")) bytes += memory->usage(f,nmax*comm->nthreads,3);
atom_vec_sphere.cpp:  if (atom->memcheck("radius")) bytes += memory->usage(radius,nmax);
atom_vec_sphere.cpp:  if (atom->memcheck("rmass")) bytes += memory->usage(rmass,nmax);
atom_vec_sphere.cpp:  if (atom->memcheck("omega")) bytes += memory->usage(omega,nmax,3);
atom_vec_sphere.cpp:  if (atom->memcheck("torque")) bytes += memory->usage(torque,nmax*comm->nthreads,3);
atom_vec_tri.cpp:  memory->sfree(bonus);
atom_vec_tri.cpp:  tag = memory->grow(atom->tag,nmax,"atom:tag");
atom_vec_tri.cpp:  type = memory->grow(atom->type,nmax,"atom:type");
atom_vec_tri.cpp:  mask = memory->grow(atom->mask,nmax,"atom:mask");
atom_vec_tri.cpp:  image = memory->grow(atom->image,nmax,"atom:image");
atom_vec_tri.cpp:  x = memory->grow(atom->x,nmax,3,"atom:x");
atom_vec_tri.cpp:  v = memory->grow(atom->v,nmax,3,"atom:v");
atom_vec_tri.cpp:  f = memory->grow(atom->f,nmax*comm->nthreads,3,"atom:f");
atom_vec_tri.cpp:  molecule = memory->grow(atom->molecule,nmax,"atom:molecule");
atom_vec_tri.cpp:  rmass = memory->grow(atom->rmass,nmax,"atom:rmass");
atom_vec_tri.cpp:  angmom = memory->grow(atom->angmom,nmax,3,"atom:angmom");
atom_vec_tri.cpp:  torque = memory->grow(atom->torque,nmax*comm->nthreads,3,"atom:torque");
atom_vec_tri.cpp:  tri = memory->grow(atom->tri,nmax,"atom:tri");
atom_vec_tri.cpp:  bonus = (Bonus *) memory->srealloc(bonus,nmax_bonus*sizeof(Bonus),
atom_vec_tri.cpp:      memory->grow(atom->extra,nmax,atom->nextra_store,"atom:extra");
atom_vec_tri.cpp:  if (atom->memcheck("tag")) bytes += memory->usage(tag,nmax);
atom_vec_tri.cpp:  if (atom->memcheck("type")) bytes += memory->usage(type,nmax);
atom_vec_tri.cpp:  if (atom->memcheck("mask")) bytes += memory->usage(mask,nmax);
atom_vec_tri.cpp:  if (atom->memcheck("image")) bytes += memory->usage(image,nmax);
atom_vec_tri.cpp:  if (atom->memcheck("x")) bytes += memory->usage(x,nmax,3);
atom_vec_tri.cpp:  if (atom->memcheck("v")) bytes += memory->usage(v,nmax,3);
atom_vec_tri.cpp:  if (atom->memcheck("f")) bytes += memory->usage(f,nmax*comm->nthreads,3);
atom_vec_tri.cpp:  if (atom->memcheck("molecule")) bytes += memory->usage(molecule,nmax);
atom_vec_tri.cpp:  if (atom->memcheck("rmass")) bytes += memory->usage(rmass,nmax);
atom_vec_tri.cpp:  if (atom->memcheck("angmom")) bytes += memory->usage(angmom,nmax,3);
atom_vec_tri.cpp:  if (atom->memcheck("torque")) bytes += memory->usage(torque,nmax*comm->nthreads,3);
atom_vec_tri.cpp:  if (atom->memcheck("tri")) bytes += memory->usage(tri,nmax);
balance.cpp:  memory->create(proccount,nprocs,"balance:proccount");
balance.cpp:  memory->create(allproccount,nprocs,"balance:allproccount");
balance.cpp:  memory->destroy(proccount);
balance.cpp:  memory->destroy(allproccount);
bond.cpp:  memory->destroy(eatom);
bond.cpp:  memory->destroy(vatom);
bond.cpp:    memory->destroy(eatom);
bond.cpp:    memory->create(eatom,comm->nthreads*maxeatom,"bond:eatom");
bond.cpp:    memory->destroy(vatom);
bond.cpp:    memory->create(vatom,comm->nthreads*maxvatom,6,"bond:vatom");
bond_fene.cpp:    memory->destroy(setflag);
bond_fene.cpp:    memory->destroy(k);
bond_fene.cpp:    memory->destroy(r0);
bond_fene.cpp:    memory->destroy(epsilon);
bond_fene.cpp:    memory->destroy(sigma);
bond_fene.cpp:  memory->create(k,n+1,"bond:k");
bond_fene.cpp:  memory->create(r0,n+1,"bond:r0");
bond_fene.cpp:  memory->create(epsilon,n+1,"bond:epsilon");
bond_fene.cpp:  memory->create(sigma,n+1,"bond:sigma");
bond_fene.cpp:  memory->create(setflag,n+1,"bond:setflag");
bond_fene_expand.cpp:    memory->destroy(setflag);
bond_fene_expand.cpp:    memory->destroy(k);
bond_fene_expand.cpp:    memory->destroy(r0);
bond_fene_expand.cpp:    memory->destroy(epsilon);
bond_fene_expand.cpp:    memory->destroy(sigma);
bond_fene_expand.cpp:    memory->destroy(shift);
bond_fene_expand.cpp:  memory->create(k,n+1,"bond:k");
bond_fene_expand.cpp:  memory->create(r0,n+1,"bond:r0");
bond_fene_expand.cpp:  memory->create(epsilon,n+1,"bond:epsilon");
bond_fene_expand.cpp:  memory->create(sigma,n+1,"bond:sigma");
bond_fene_expand.cpp:  memory->create(shift,n+1,"bond:shift");
bond_fene_expand.cpp:  memory->create(setflag,n+1,"bond:setflag");
bond_harmonic.cpp:    memory->destroy(setflag);
bond_harmonic.cpp:    memory->destroy(k);
bond_harmonic.cpp:    memory->destroy(r0);
bond_harmonic.cpp:  memory->create(k,n+1,"bond:k");
bond_harmonic.cpp:  memory->create(r0,n+1,"bond:r0");
bond_harmonic.cpp:  memory->create(setflag,n+1,"bond:setflag");
bond_hybrid.cpp:    memory->destroy(setflag);
bond_hybrid.cpp:    memory->destroy(map);
bond_hybrid.cpp:      memory->destroy(bondlist[i]);
bond_hybrid.cpp:        memory->destroy(bondlist[m]);
bond_hybrid.cpp:        memory->create(bondlist[m],maxbond[m],3,"bond_hybrid:bondlist");
bond_hybrid.cpp:  memory->create(map,n+1,"bond:map");
bond_hybrid.cpp:  memory->create(setflag,n+1,"bond:setflag");
bond_hybrid.cpp:    memory->destroy(setflag);
bond_hybrid.cpp:    memory->destroy(map);
bond_hybrid.cpp:      memory->destroy(bondlist[i]);
bond_morse.cpp:    memory->destroy(setflag);
bond_morse.cpp:    memory->destroy(d0);
bond_morse.cpp:    memory->destroy(alpha);
bond_morse.cpp:    memory->destroy(r0);
bond_morse.cpp:  memory->create(d0,n+1,"bond:d0");
bond_morse.cpp:  memory->create(alpha,n+1,"bond:alpha");
bond_morse.cpp:  memory->create(r0,n+1,"bond:r0");
bond_morse.cpp:  memory->create(setflag,n+1,"bond:setflag");
bond_nonlinear.cpp:    memory->destroy(setflag);
bond_nonlinear.cpp:    memory->destroy(epsilon);
bond_nonlinear.cpp:    memory->destroy(r0);
bond_nonlinear.cpp:    memory->destroy(lamda);
bond_nonlinear.cpp:  memory->create(epsilon,n+1,"bond:epsilon");
bond_nonlinear.cpp:  memory->create(r0,n+1,"bond:r0");
bond_nonlinear.cpp:  memory->create(lamda,n+1,"bond:lamda");
bond_nonlinear.cpp:  memory->create(setflag,n+1,"bond:setflag");
bond_quartic.cpp:    memory->destroy(setflag);
bond_quartic.cpp:    memory->destroy(k);
bond_quartic.cpp:    memory->destroy(b1);
bond_quartic.cpp:    memory->destroy(b2);
bond_quartic.cpp:    memory->destroy(rc);
bond_quartic.cpp:    memory->destroy(u0);
bond_quartic.cpp:  memory->create(k,n+1,"bond:k");
bond_quartic.cpp:  memory->create(b1,n+1,"bond:b1");
bond_quartic.cpp:  memory->create(b2,n+1,"bond:b2");
bond_quartic.cpp:  memory->create(rc,n+1,"bond:rc");
bond_quartic.cpp:  memory->create(u0,n+1,"bond:u0");
bond_quartic.cpp:  memory->create(setflag,n+1,"bond:setflag");
bond_table.cpp:  memory->sfree(tables);
bond_table.cpp:    memory->destroy(setflag);
bond_table.cpp:    memory->destroy(r0);
bond_table.cpp:    memory->destroy(tabindex);
bond_table.cpp:  memory->create(tabindex,n+1,"bond:tabindex");
bond_table.cpp:  memory->create(r0,n+1,"bond:r0");
bond_table.cpp:  memory->create(setflag,n+1,"bond:setflag");
bond_table.cpp:  memory->sfree(tables);
bond_table.cpp:     memory->destroy(setflag);
bond_table.cpp:     memory->destroy(tabindex);
bond_table.cpp:    memory->srealloc(tables,(ntables+1)*sizeof(Table),"bond:tables");
bond_table.cpp:  memory->destroy(tb->rfile);
bond_table.cpp:  memory->destroy(tb->efile);
bond_table.cpp:  memory->destroy(tb->ffile);
bond_table.cpp:  memory->destroy(tb->e2file);
bond_table.cpp:  memory->destroy(tb->f2file);
bond_table.cpp:  memory->destroy(tb->r);
bond_table.cpp:  memory->destroy(tb->e);
bond_table.cpp:  memory->destroy(tb->de);
bond_table.cpp:  memory->destroy(tb->f);
bond_table.cpp:  memory->destroy(tb->df);
bond_table.cpp:  memory->destroy(tb->e2);
bond_table.cpp:  memory->destroy(tb->f2);
bond_table.cpp:  memory->create(tb->rfile,tb->ninput,"bond:rfile");
bond_table.cpp:  memory->create(tb->efile,tb->ninput,"bond:efile");
bond_table.cpp:  memory->create(tb->ffile,tb->ninput,"bond:ffile");
bond_table.cpp:  memory->create(tb->e2file,tb->ninput,"bond:e2file");
bond_table.cpp:  memory->create(tb->f2file,tb->ninput,"bond:f2file");
bond_table.cpp:  memory->create(tb->r,tablength,"bond:r");
bond_table.cpp:  memory->create(tb->e,tablength,"bond:e");
bond_table.cpp:  memory->create(tb->de,tlm1,"bond:de");
bond_table.cpp:  memory->create(tb->f,tablength,"bond:f");
bond_table.cpp:  memory->create(tb->df,tlm1,"bond:df");
bond_table.cpp:  memory->create(tb->e2,tablength,"bond:e2");
bond_table.cpp:  memory->create(tb->f2,tablength,"bond:f2");
bond_table.cpp:    memory->create(tb->rfile,tb->ninput,"angle:rfile");
bond_table.cpp:    memory->create(tb->efile,tb->ninput,"angle:efile");
bond_table.cpp:    memory->create(tb->ffile,tb->ninput,"angle:ffile");
comm.cpp:  memory->create(buf_send,maxsend+BUFEXTRA,"comm:buf_send");
comm.cpp:  memory->create(buf_recv,maxrecv,"comm:buf_recv");
comm.cpp:  sendlist = (int **) memory->smalloc(maxswap*sizeof(int *),"comm:sendlist");
comm.cpp:  memory->create(maxsendlist,maxswap,"comm:maxsendlist");
comm.cpp:    memory->create(sendlist[i],BUFMIN,"comm:sendlist[i]");
comm.cpp:  memory->destroy(xsplit);
comm.cpp:  memory->destroy(ysplit);
comm.cpp:  memory->destroy(zsplit);
comm.cpp:  memory->destroy(grid2proc);
comm.cpp:    memory->destroy(cutghostmulti);
comm.cpp:  if (sendlist) for (int i = 0; i < maxswap; i++) memory->destroy(sendlist[i]);
comm.cpp:  memory->sfree(sendlist);
comm.cpp:  memory->destroy(maxsendlist);
comm.cpp:  memory->destroy(buf_send);
comm.cpp:  memory->destroy(buf_recv);
comm.cpp:  if (grid2proc) memory->destroy(grid2proc);
comm.cpp:  memory->create(grid2proc,procgrid[0],procgrid[1],procgrid[2],
comm.cpp:  memory->destroy(xsplit);
comm.cpp:  memory->destroy(ysplit);
comm.cpp:  memory->destroy(zsplit);
comm.cpp:  memory->create(xsplit,procgrid[0]+1,"comm:xsplit");
comm.cpp:  memory->create(ysplit,procgrid[1]+1,"comm:ysplit");
comm.cpp:  memory->create(zsplit,procgrid[2]+1,"comm:zsplit");
comm.cpp:    memory->create(cutghostmulti,atom->ntypes+1,3,"comm:cutghostmulti");
comm.cpp:    memory->destroy(cutghostmulti);
comm.cpp:    memory->grow(buf_send,(maxsend+BUFEXTRA),"comm:buf_send");
comm.cpp:    memory->destroy(buf_send);
comm.cpp:    memory->create(buf_send,maxsend+BUFEXTRA,"comm:buf_send");
comm.cpp:  memory->destroy(buf_recv);
comm.cpp:  memory->create(buf_recv,maxrecv,"comm:buf_recv");
comm.cpp:  memory->grow(sendlist[iswap],maxsendlist[iswap],"comm:sendlist[iswap]");
comm.cpp:    memory->srealloc(sendlist,n*sizeof(int *),"comm:sendlist");
comm.cpp:  memory->grow(maxsendlist,n,"comm:maxsendlist");
comm.cpp:    memory->create(sendlist[i],BUFMIN,"comm:sendlist[i]");
comm.cpp:  memory->create(sendnum,n,"comm:sendnum");
comm.cpp:  memory->create(recvnum,n,"comm:recvnum");
comm.cpp:  memory->create(sendproc,n,"comm:sendproc");
comm.cpp:  memory->create(recvproc,n,"comm:recvproc");
comm.cpp:  memory->create(size_forward_recv,n,"comm:size");
comm.cpp:  memory->create(size_reverse_send,n,"comm:size");
comm.cpp:  memory->create(size_reverse_recv,n,"comm:size");
comm.cpp:  memory->create(slablo,n,"comm:slablo");
comm.cpp:  memory->create(slabhi,n,"comm:slabhi");
comm.cpp:  memory->create(firstrecv,n,"comm:firstrecv");
comm.cpp:  memory->create(pbc_flag,n,"comm:pbc_flag");
comm.cpp:  memory->create(pbc,n,6,"comm:pbc");
comm.cpp:  multilo = memory->create(multilo,n,atom->ntypes+1,"comm:multilo");
comm.cpp:  multihi = memory->create(multihi,n,atom->ntypes+1,"comm:multihi");
comm.cpp:  memory->destroy(sendnum);
comm.cpp:  memory->destroy(recvnum);
comm.cpp:  memory->destroy(sendproc);
comm.cpp:  memory->destroy(recvproc);
comm.cpp:  memory->destroy(size_forward_recv);
comm.cpp:  memory->destroy(size_reverse_send);
comm.cpp:  memory->destroy(size_reverse_recv);
comm.cpp:  memory->destroy(slablo);
comm.cpp:  memory->destroy(slabhi);
comm.cpp:  memory->destroy(firstrecv);
comm.cpp:  memory->destroy(pbc_flag);
comm.cpp:  memory->destroy(pbc);
comm.cpp:  memory->destroy(multilo);
comm.cpp:  memory->destroy(multihi);
comm.cpp:    bytes += memory->usage(sendlist[i],maxsendlist[i]);
comm.cpp:  bytes += memory->usage(buf_send,maxsend+BUFEXTRA);
comm.cpp:  bytes += memory->usage(buf_recv,maxrecv);
compute_angle_local.cpp:  memory->destroy(vector);
compute_angle_local.cpp:  memory->destroy(array);
compute_angle_local.cpp:    memory->destroy(vector);
compute_angle_local.cpp:    memory->create(vector,nmax,"bond/local:vector");
compute_angle_local.cpp:    memory->destroy(array);
compute_angle_local.cpp:    memory->create(array,nmax,nvalues,"bond/local:array");
compute_atom_molecule.cpp:    memory->create(vone,nmolecules,"atom/molecule:vone");
compute_atom_molecule.cpp:    memory->create(vector,nmolecules,"atom/molecule:vector");
compute_atom_molecule.cpp:    memory->create(aone,nmolecules,nvalues,"atom/molecule:aone");
compute_atom_molecule.cpp:    memory->create(array,nmolecules,nvalues,"atom/molecule:array");
compute_atom_molecule.cpp:  memory->destroy(vone);
compute_atom_molecule.cpp:  memory->destroy(vector);
compute_atom_molecule.cpp:  memory->destroy(aone);
compute_atom_molecule.cpp:  memory->destroy(array);
compute_atom_molecule.cpp:  memory->destroy(scratch);
compute_atom_molecule.cpp:      memory->destroy(scratch);
compute_atom_molecule.cpp:      memory->create(scratch,maxatom,"atom/molecule:scratch");
compute_bond_local.cpp:  memory->destroy(vector);
compute_bond_local.cpp:  memory->destroy(array);
compute_bond_local.cpp:    memory->destroy(vector);
compute_bond_local.cpp:    memory->create(vector,nmax,"bond/local:vector");
compute_bond_local.cpp:    memory->destroy(array);
compute_bond_local.cpp:    memory->create(array,nmax,nvalues,"bond/local:array");
compute_centro_atom.cpp:  memory->destroy(centro);
compute_centro_atom.cpp:  memory->destroy(distsq);
compute_centro_atom.cpp:  memory->destroy(nearest);
compute_centro_atom.cpp:    memory->destroy(centro);
compute_centro_atom.cpp:    memory->create(centro,nmax,"centro/atom:centro");
compute_centro_atom.cpp:        memory->destroy(distsq);
compute_centro_atom.cpp:        memory->destroy(nearest);
compute_centro_atom.cpp:        memory->create(distsq,maxneigh,"centro/atom:distsq");
compute_centro_atom.cpp:        memory->create(nearest,maxneigh,"centro/atom:nearest");
compute_cluster_atom.cpp:  memory->destroy(clusterID);
compute_cluster_atom.cpp:    memory->destroy(clusterID);
compute_cluster_atom.cpp:    memory->create(clusterID,nmax,"cluster/atom:clusterID");
compute_cna_atom.cpp:  memory->destroy(nearest);
compute_cna_atom.cpp:  memory->destroy(nnearest);
compute_cna_atom.cpp:  memory->destroy(pattern);
compute_cna_atom.cpp:    memory->destroy(nearest);
compute_cna_atom.cpp:    memory->destroy(nnearest);
compute_cna_atom.cpp:    memory->destroy(pattern);
compute_cna_atom.cpp:    memory->create(nearest,nmax,MAXNEAR,"cna:nearest");
compute_cna_atom.cpp:    memory->create(nnearest,nmax,"cna:nnearest");
compute_cna_atom.cpp:    memory->create(pattern,nmax,"cna:cna_pattern");
compute_com_molecule.cpp:  memory->create(massproc,nmolecules,"com/molecule:massproc");
compute_com_molecule.cpp:  memory->create(masstotal,nmolecules,"com/molecule:masstotal");
compute_com_molecule.cpp:  memory->create(com,nmolecules,3,"com/molecule:com");
compute_com_molecule.cpp:  memory->create(comall,nmolecules,3,"com/molecule:comall");
compute_com_molecule.cpp:  memory->destroy(massproc);
compute_com_molecule.cpp:  memory->destroy(masstotal);
compute_com_molecule.cpp:  memory->destroy(com);
compute_com_molecule.cpp:  memory->destroy(comall);
compute_contact_atom.cpp:  memory->destroy(contact);
compute_contact_atom.cpp:    memory->destroy(contact);
compute_contact_atom.cpp:    memory->create(contact,nmax,"contact/atom:contact");
compute_coord_atom.cpp:  memory->destroy(cvec);
compute_coord_atom.cpp:  memory->destroy(carray);
compute_coord_atom.cpp:      memory->destroy(cvec);
compute_coord_atom.cpp:      memory->create(cvec,nmax,"coord/atom:cvec");
compute_coord_atom.cpp:      memory->destroy(carray);
compute_coord_atom.cpp:      memory->create(carray,nmax,ncol,"coord/atom:carray");
compute.cpp:  memory->destroy(tlist);
compute.cpp:  memory->destroy(molmap);
compute.cpp:    memory->grow(tlist,maxtime,"compute:tlist");
compute.cpp:  memory->destroy(molmap);
compute.cpp:  memory->create(molmap,nlen,"compute:molmap");
compute.cpp:  memory->create(molmapall,nlen,"compute:molmapall");
compute.cpp:  memory->destroy(molmapall);
compute.cpp:    memory->destroy(molmap);
compute_dihedral_local.cpp:  memory->destroy(vector);
compute_dihedral_local.cpp:  memory->destroy(array);
compute_dihedral_local.cpp:    memory->destroy(vector);
compute_dihedral_local.cpp:    memory->create(vector,nmax,"bond/local:vector");
compute_dihedral_local.cpp:    memory->destroy(array);
compute_dihedral_local.cpp:    memory->create(array,nmax,nvalues,"bond/local:array");
compute_displace_atom.cpp:  memory->destroy(displace);
compute_displace_atom.cpp:    memory->destroy(displace);
compute_displace_atom.cpp:    memory->create(displace,nmax,4,"displace/atom:displace");
compute_erotate_sphere_atom.cpp:  memory->destroy(erot);
compute_erotate_sphere_atom.cpp:    memory->destroy(erot);
compute_erotate_sphere_atom.cpp:    memory->create(erot,nmax,"erotate/sphere/atom:erot");
compute_gyration_molecule.cpp:  memory->create(massproc,nmolecules,"gyration/molecule:massproc");
compute_gyration_molecule.cpp:  memory->create(masstotal,nmolecules,"gyration/molecule:masstotal");
compute_gyration_molecule.cpp:  memory->create(com,nmolecules,3,"gyration/molecule:com");
compute_gyration_molecule.cpp:  memory->create(comall,nmolecules,3,"gyration/molecule:comall");
compute_gyration_molecule.cpp:    memory->create(rgt,nmolecules,6,"gyration/molecule:rgt");
compute_gyration_molecule.cpp:    memory->create(array,nmolecules,6,"gyration/molecule:array");
compute_gyration_molecule.cpp:    memory->create(rg,nmolecules,"gyration/molecule:rg");
compute_gyration_molecule.cpp:    memory->create(vector,nmolecules,"gyration/molecule:vector");
compute_gyration_molecule.cpp:  memory->destroy(massproc);
compute_gyration_molecule.cpp:  memory->destroy(masstotal);
compute_gyration_molecule.cpp:  memory->destroy(com);
compute_gyration_molecule.cpp:  memory->destroy(comall);
compute_gyration_molecule.cpp:  memory->destroy(rg);
compute_gyration_molecule.cpp:  memory->destroy(rgt);
compute_improper_local.cpp:  memory->destroy(vector);
compute_improper_local.cpp:  memory->destroy(array);
compute_improper_local.cpp:    memory->destroy(vector);
compute_improper_local.cpp:    memory->create(vector,nmax,"bond/local:vector");
compute_improper_local.cpp:    memory->destroy(array);
compute_improper_local.cpp:    memory->create(array,nmax,nvalues,"bond/local:array");
compute_ke_atom.cpp:  memory->destroy(ke);
compute_ke_atom.cpp:    memory->destroy(ke);
compute_ke_atom.cpp:    memory->create(ke,nmax,"ke/atom:ke");
compute_msd_molecule.cpp:  memory->create(massproc,nmolecules,"msd/molecule:massproc");
compute_msd_molecule.cpp:  memory->create(masstotal,nmolecules,"msd/molecule:masstotal");
compute_msd_molecule.cpp:  memory->create(com,nmolecules,3,"msd/molecule:com");
compute_msd_molecule.cpp:  memory->create(comall,nmolecules,3,"msd/molecule:comall");
compute_msd_molecule.cpp:  memory->create(cominit,nmolecules,3,"msd/molecule:cominit");
compute_msd_molecule.cpp:  memory->create(msd,nmolecules,4,"msd/molecule:msd");
compute_msd_molecule.cpp:  memory->destroy(massproc);
compute_msd_molecule.cpp:  memory->destroy(masstotal);
compute_msd_molecule.cpp:  memory->destroy(com);
compute_msd_molecule.cpp:  memory->destroy(comall);
compute_msd_molecule.cpp:  memory->destroy(cominit);
compute_msd_molecule.cpp:  memory->destroy(msd);
compute_pair_local.cpp:  memory->destroy(vector);
compute_pair_local.cpp:  memory->destroy(array);
compute_pair_local.cpp:    memory->destroy(vector);
compute_pair_local.cpp:    memory->create(vector,nmax,"pair/local:vector");
compute_pair_local.cpp:    memory->destroy(array);
compute_pair_local.cpp:    memory->create(array,nmax,nvalues,"pair/local:array");
compute_pe_atom.cpp:  memory->destroy(energy);
compute_pe_atom.cpp:    memory->destroy(energy);
compute_pe_atom.cpp:    memory->create(energy,nmax,"pe/atom:energy");
compute_property_atom.cpp:  memory->destroy(vector);
compute_property_atom.cpp:  memory->destroy(array);
compute_property_atom.cpp:      memory->destroy(vector);
compute_property_atom.cpp:      memory->create(vector,nmax,"property/atom:vector");
compute_property_atom.cpp:      memory->destroy(array);
compute_property_atom.cpp:      memory->create(array,nmax,nvalues,"property/atom:array");
compute_property_local.cpp:  memory->destroy(vector);
compute_property_local.cpp:  memory->destroy(array);
compute_property_local.cpp:  memory->destroy(indices);
compute_property_local.cpp:    memory->destroy(vector);
compute_property_local.cpp:    memory->create(vector,nmax,"property/local:vector");
compute_property_local.cpp:    memory->destroy(array);
compute_property_local.cpp:    memory->create(array,nmax,nvalues,"property/local:array");
compute_property_local.cpp:  memory->destroy(indices);
compute_property_local.cpp:  memory->create(indices,nmax,2,"property/local:indices");
compute_property_molecule.cpp:    memory->create(vector,nmolecules,"property/molecule:vector");
compute_property_molecule.cpp:    memory->create(array,nmolecules,nvalues,"property/molecule:array");
compute_property_molecule.cpp:  memory->destroy(vector);
compute_property_molecule.cpp:  memory->destroy(array);
compute_rdf.cpp:  memory->create(rdfpair,npairs,ntypes+1,ntypes+1,"rdf:rdfpair");
compute_rdf.cpp:  memory->create(nrdfpair,ntypes+1,ntypes+1,"rdf:nrdfpair");
compute_rdf.cpp:  memory->create(hist,npairs,nbin,"rdf:hist");
compute_rdf.cpp:  memory->create(histall,npairs,nbin,"rdf:histall");
compute_rdf.cpp:  memory->create(array,nbin,1+2*npairs,"rdf:array");
compute_rdf.cpp:  memory->destroy(rdfpair);
compute_rdf.cpp:  memory->destroy(nrdfpair);
compute_rdf.cpp:  memory->destroy(hist);
compute_rdf.cpp:  memory->destroy(histall);
compute_rdf.cpp:  memory->destroy(array);
compute_reduce.cpp:  memory->destroy(varatom);
compute_reduce.cpp:      memory->destroy(varatom);
compute_reduce.cpp:      memory->create(varatom,maxatom,"reduce:varatom");
compute_reduce_region.cpp:      memory->destroy(varatom);
compute_reduce_region.cpp:      memory->create(varatom,maxatom,"reduce/region:varatom");
compute_slice.cpp:    memory->create(vector,size_vector,"slice:vector");
compute_slice.cpp:    memory->create(array,size_array_rows,size_array_cols,"slice:array");
compute_slice.cpp:  memory->destroy(vector);
compute_slice.cpp:  memory->destroy(array);
compute_stress_atom.cpp:  memory->destroy(stress);
compute_stress_atom.cpp:    memory->destroy(stress);
compute_stress_atom.cpp:    memory->create(stress,nmax,6,"stress/atom:stress");
compute_temp_deform.cpp:  memory->destroy(vbiasall);
compute_temp_deform.cpp:    memory->destroy(vbiasall);
compute_temp_deform.cpp:    memory->create(vbiasall,maxbias,3,"temp/deform:vbiasall");
compute_temp_partial.cpp:  memory->destroy(vbiasall);
compute_temp_partial.cpp:    memory->destroy(vbiasall);
compute_temp_partial.cpp:    memory->create(vbiasall,maxbias,3,"temp/partial:vbiasall");
compute_temp_profile.cpp:  memory->create(vbin,nbins,ncount+1,"temp/profile:vbin");
compute_temp_profile.cpp:  memory->create(binave,nbins,ncount+1,"temp/profile:binave");
compute_temp_profile.cpp:  memory->destroy(vbin);
compute_temp_profile.cpp:  memory->destroy(binave);
compute_temp_profile.cpp:  memory->destroy(bin);
compute_temp_profile.cpp:  memory->destroy(vbiasall);
compute_temp_profile.cpp:    memory->destroy(vbiasall);
compute_temp_profile.cpp:    memory->create(vbiasall,maxbias,3,"temp/profile:vbiasall");
compute_temp_profile.cpp:    memory->destroy(bin);
compute_temp_profile.cpp:    memory->create(bin,maxatom,"temp/profile:bin");
compute_temp_ramp.cpp:  memory->destroy(vbiasall);
compute_temp_ramp.cpp:    memory->destroy(vbiasall);
compute_temp_ramp.cpp:    memory->create(vbiasall,maxbias,3,"temp/ramp:vbiasall");
compute_temp_region.cpp:  memory->destroy(vbiasall);
compute_temp_region.cpp:    memory->destroy(vbiasall);
compute_temp_region.cpp:    memory->create(vbiasall,maxbias,3,"temp/region:vbiasall");
delete_atoms.cpp:  memory->destroy(dlist);
delete_atoms.cpp:  memory->create(dlist,nlocal,"delete_atoms:dlist");
delete_atoms.cpp:  memory->create(dlist,nlocal,"delete_atoms:dlist");
delete_atoms.cpp:  memory->create(dlist,nlocal,"delete_atoms:dlist");
delete_atoms.cpp:  memory->create(dlist,nlocal,"delete_atoms:dlist");
dihedral_charmm.cpp:    memory->destroy(setflag);
dihedral_charmm.cpp:    memory->destroy(k);
dihedral_charmm.cpp:    memory->destroy(multiplicity);
dihedral_charmm.cpp:    memory->destroy(shift);
dihedral_charmm.cpp:    memory->destroy(cos_shift);
dihedral_charmm.cpp:    memory->destroy(sin_shift);
dihedral_charmm.cpp:    memory->destroy(weight);
dihedral_charmm.cpp:  memory->create(k,n+1,"dihedral:k");
dihedral_charmm.cpp:  memory->create(multiplicity,n+1,"dihedral:k");
dihedral_charmm.cpp:  memory->create(shift,n+1,"dihedral:shift");
dihedral_charmm.cpp:  memory->create(cos_shift,n+1,"dihedral:cos_shift");
dihedral_charmm.cpp:  memory->create(sin_shift,n+1,"dihedral:sin_shift");
dihedral_charmm.cpp:  memory->create(weight,n+1,"dihedral:weight");
dihedral_charmm.cpp:  memory->create(setflag,n+1,"dihedral:setflag");
dihedral.cpp:  memory->destroy(eatom);
dihedral.cpp:  memory->destroy(vatom);
dihedral.cpp:    memory->destroy(eatom);
dihedral.cpp:    memory->create(eatom,comm->nthreads*maxeatom,"bond:eatom");
dihedral.cpp:    memory->destroy(vatom);
dihedral.cpp:    memory->create(vatom,comm->nthreads*maxvatom,6,"bond:vatom");
dihedral_harmonic.cpp:    memory->destroy(setflag);
dihedral_harmonic.cpp:    memory->destroy(k);
dihedral_harmonic.cpp:    memory->destroy(sign);
dihedral_harmonic.cpp:    memory->destroy(multiplicity);
dihedral_harmonic.cpp:    memory->destroy(cos_shift);
dihedral_harmonic.cpp:    memory->destroy(sin_shift);
dihedral_harmonic.cpp:  memory->create(k,n+1,"dihedral:k");
dihedral_harmonic.cpp:  memory->create(sign,n+1,"dihedral:sign");
dihedral_harmonic.cpp:  memory->create(multiplicity,n+1,"dihedral:multiplicity");
dihedral_harmonic.cpp:  memory->create(cos_shift,n+1,"dihedral:cos_shift");
dihedral_harmonic.cpp:  memory->create(sin_shift,n+1,"dihedral:sin_shift");
dihedral_harmonic.cpp:  memory->create(setflag,n+1,"dihedral:setflag");
dihedral_helix.cpp:    memory->destroy(setflag);
dihedral_helix.cpp:    memory->destroy(aphi);
dihedral_helix.cpp:    memory->destroy(bphi);
dihedral_helix.cpp:    memory->destroy(cphi);
dihedral_helix.cpp:  memory->create(aphi,n+1,"dihedral:aphi");
dihedral_helix.cpp:  memory->create(bphi,n+1,"dihedral:bphi");
dihedral_helix.cpp:  memory->create(cphi,n+1,"dihedral:cphi");
dihedral_helix.cpp:  memory->create(setflag,n+1,"dihedral:setflag");
dihedral_hybrid.cpp:    memory->destroy(setflag);
dihedral_hybrid.cpp:    memory->destroy(map);
dihedral_hybrid.cpp:      memory->destroy(dihedrallist[i]);
dihedral_hybrid.cpp:        memory->destroy(dihedrallist[m]);
dihedral_hybrid.cpp:        memory->create(dihedrallist[m],maxdihedral[m],5,
dihedral_hybrid.cpp:  memory->create(map,n+1,"dihedral:map");
dihedral_hybrid.cpp:  memory->create(setflag,n+1,"dihedral:setflag");
dihedral_hybrid.cpp:    memory->destroy(setflag);
dihedral_hybrid.cpp:    memory->destroy(map);
dihedral_hybrid.cpp:      memory->destroy(dihedrallist[i]);
dihedral_multi_harmonic.cpp:    memory->destroy(setflag);
dihedral_multi_harmonic.cpp:    memory->destroy(a1);
dihedral_multi_harmonic.cpp:    memory->destroy(a2);
dihedral_multi_harmonic.cpp:    memory->destroy(a3);
dihedral_multi_harmonic.cpp:    memory->destroy(a4);
dihedral_multi_harmonic.cpp:    memory->destroy(a5);
dihedral_multi_harmonic.cpp:  memory->create(a1,n+1,"dihedral:a1");
dihedral_multi_harmonic.cpp:  memory->create(a2,n+1,"dihedral:a2");
dihedral_multi_harmonic.cpp:  memory->create(a3,n+1,"dihedral:a3");
dihedral_multi_harmonic.cpp:  memory->create(a4,n+1,"dihedral:a4");
dihedral_multi_harmonic.cpp:  memory->create(a5,n+1,"dihedral:a5");
dihedral_multi_harmonic.cpp:  memory->create(setflag,n+1,"dihedral:setflag");
dihedral_opls.cpp:    memory->destroy(setflag);
dihedral_opls.cpp:    memory->destroy(k1);
dihedral_opls.cpp:    memory->destroy(k2);
dihedral_opls.cpp:    memory->destroy(k3);
dihedral_opls.cpp:    memory->destroy(k4);
dihedral_opls.cpp:  memory->create(k1,n+1,"dihedral:k1");
dihedral_opls.cpp:  memory->create(k2,n+1,"dihedral:k2");
dihedral_opls.cpp:  memory->create(k3,n+1,"dihedral:k3");
dihedral_opls.cpp:  memory->create(k4,n+1,"dihedral:k4");
dihedral_opls.cpp:  memory->create(setflag,n+1,"dihedral:setflag");
domain.cpp:  memory->sfree(regions);
domain.cpp:      memory->srealloc(regions,maxregion*sizeof(Region *),"domain:regions");
dump_cfg.cpp:  if (rbuf) memory->destroy(rbuf);
dump_cfg.cpp:    if (rbuf) memory->destroy(rbuf);
dump_cfg.cpp:    memory->create(rbuf,nchosen,size_one,"dump:rbuf");
dump.cpp:  memory->destroy(buf);
dump.cpp:  memory->destroy(bufsort);
dump.cpp:  memory->destroy(ids);
dump.cpp:  memory->destroy(idsort);
dump.cpp:  memory->destroy(index);
dump.cpp:  memory->destroy(proclist);
dump.cpp:    memory->destroy(bufsort);
dump.cpp:    memory->destroy(ids);
dump.cpp:    memory->destroy(idsort);
dump.cpp:    memory->destroy(index);
dump.cpp:    memory->destroy(proclist);
dump.cpp:    memory->destroy(buf);
dump.cpp:    memory->create(buf,maxbuf*size_one,"dump:buf");
dump.cpp:    memory->destroy(ids);
dump.cpp:    memory->create(ids,maxids,"dump:ids");
dump.cpp:      memory->destroy(bufsort);
dump.cpp:      memory->create(bufsort,maxsort*size_one,"dump:bufsort");
dump.cpp:      memory->destroy(index);
dump.cpp:      memory->create(index,maxsort,"dump:index");
dump.cpp:        memory->destroy(idsort);
dump.cpp:        memory->create(idsort,maxsort,"dump:idsort");
dump.cpp:      memory->destroy(proclist);
dump.cpp:      memory->create(proclist,maxproc,"dump:proclist");
dump.cpp:      memory->destroy(bufsort);
dump.cpp:      memory->create(bufsort,maxsort*size_one,"dump:bufsort");
dump.cpp:      memory->destroy(index);
dump.cpp:      memory->create(index,maxsort,"dump:index");
dump.cpp:        memory->destroy(idsort);
dump.cpp:        memory->create(idsort,maxsort,"dump:idsort");
dump.cpp:    memory->destroy(buf);
dump.cpp:    memory->create(buf,maxbuf*size_one,"dump:buf");
dump.cpp:  bigint bytes = memory->usage(buf,size_one*maxbuf);
dump.cpp:    if (sortcol == 0) bytes += memory->usage(ids,maxids);
dump.cpp:    bytes += memory->usage(bufsort,size_one*maxsort);
dump.cpp:    if (sortcol == 0) bytes += memory->usage(idsort,maxsort);
dump.cpp:    bytes += memory->usage(index,maxsort);
dump.cpp:    bytes += memory->usage(proclist,maxproc);
dump_custom.cpp:  memory->create(field2index,nfield,"dump:field2index");
dump_custom.cpp:  memory->create(argindex,nfield,"dump:argindex");
dump_custom.cpp:  memory->destroy(field2index);
dump_custom.cpp:  memory->destroy(argindex);
dump_custom.cpp:  memory->destroy(thresh_array);
dump_custom.cpp:  memory->destroy(thresh_op);
dump_custom.cpp:  memory->destroy(thresh_value);
dump_custom.cpp:  memory->sfree(id_compute);
dump_custom.cpp:  memory->sfree(id_fix);
dump_custom.cpp:  memory->sfree(id_variable);
dump_custom.cpp:  for (int i = 0; i < nvariable; i++) memory->destroy(vbuf[i]);
dump_custom.cpp:  memory->destroy(choose);
dump_custom.cpp:  memory->destroy(dchoose);
dump_custom.cpp:  memory->destroy(clist);
dump_custom.cpp:    memory->destroy(choose);
dump_custom.cpp:    memory->destroy(dchoose);
dump_custom.cpp:    memory->destroy(clist);
dump_custom.cpp:    memory->create(choose,maxlocal,"dump:choose");
dump_custom.cpp:    memory->create(dchoose,maxlocal,"dump:dchoose");
dump_custom.cpp:    memory->create(clist,maxlocal,"dump:clist");
dump_custom.cpp:      memory->destroy(vbuf[i]);
dump_custom.cpp:      memory->create(vbuf[i],maxlocal,"dump:vbuf");
dump_custom.cpp:    memory->srealloc(id_compute,(ncompute+1)*sizeof(char *),"dump:id_compute");
dump_custom.cpp:    memory->srealloc(id_fix,(nfix+1)*sizeof(char *),"dump:id_fix");
dump_custom.cpp:    memory->srealloc(id_variable,(nvariable+1)*sizeof(char *),
dump_custom.cpp:        memory->destroy(thresh_array);
dump_custom.cpp:        memory->destroy(thresh_op);
dump_custom.cpp:        memory->destroy(thresh_value);
dump_custom.cpp:    memory->grow(thresh_array,nthresh+1,"dump:thresh_array");
dump_custom.cpp:    memory->grow(thresh_op,(nthresh+1),"dump:thresh_op");
dump_custom.cpp:    memory->grow(thresh_value,(nthresh+1),"dump:thresh_value");
dump_custom.cpp:      memory->grow(field2index,nfield+nthresh+1,"dump:field2index");
dump_custom.cpp:      memory->grow(argindex,nfield+nthresh+1,"dump:argindex");
dump_custom.cpp:      memory->grow(field2index,nfield+nthresh+1,"dump:field2index");
dump_custom.cpp:      memory->grow(argindex,nfield+nthresh+1,"dump:argindex");
dump_custom.cpp:      memory->grow(field2index,nfield+nthresh+1,"dump:field2index");
dump_custom.cpp:      memory->grow(argindex,nfield+nthresh+1,"dump:argindex");
dump_custom.cpp:  bytes += memory->usage(choose,maxlocal);
dump_custom.cpp:  bytes += memory->usage(dchoose,maxlocal);
dump_custom.cpp:  bytes += memory->usage(clist,maxlocal);
dump_custom.cpp:  bytes += memory->usage(vbuf,nvariable,maxlocal);
dump_dcd.cpp:  memory->create(coords,3*natoms,"dump:coords");
dump_dcd.cpp:  memory->destroy(coords);
dump_dcd.cpp:  bytes += memory->usage(coords,natoms*3);
dump_image.cpp:    memory->destroy(buf);
dump_image.cpp:    memory->create(buf,maxbuf*size_one,"dump:buf");
dump_image.cpp:        memory->destroy(bufcopy);
dump_image.cpp:        memory->create(bufcopy,maxbufcopy,2,"dump:bufcopy");
dump_local.cpp:  memory->sfree(id_compute);
dump_local.cpp:  memory->sfree(id_fix);
dump_local.cpp:    memory->srealloc(id_compute,(ncompute+1)*sizeof(char *),"dump:id_compute");
dump_local.cpp:    memory->srealloc(id_fix,(nfix+1)*sizeof(char *),"dump:id_fix");
ewald.cpp:  memory->destroy(ek);
ewald.cpp:  memory->destroy3d_offset(cs,-kmax_created);
ewald.cpp:  memory->destroy3d_offset(sn,-kmax_created);
ewald.cpp:    memory->destroy(ek);
ewald.cpp:    memory->destroy3d_offset(cs,-kmax_created);
ewald.cpp:    memory->destroy3d_offset(sn,-kmax_created);
ewald.cpp:    memory->create(ek,nmax,3,"ewald:ek");
ewald.cpp:    memory->create3d_offset(cs,-kmax,kmax,3,nmax,"ewald:cs");
ewald.cpp:    memory->create3d_offset(sn,-kmax,kmax,3,nmax,"ewald:sn");
ewald.cpp:    memory->destroy(ek);
ewald.cpp:    memory->destroy3d_offset(cs,-kmax_created);
ewald.cpp:    memory->destroy3d_offset(sn,-kmax_created);
ewald.cpp:    memory->create(ek,nmax,3,"ewald:ek");
ewald.cpp:    memory->create3d_offset(cs,-kmax,kmax,3,nmax,"ewald:cs");
ewald.cpp:    memory->create3d_offset(sn,-kmax,kmax,3,nmax,"ewald:sn");
ewald.cpp:  memory->create(eg,kmax3d,3,"ewald:eg");
ewald.cpp:  memory->create(vg,kmax3d,6,"ewald:vg");
ewald.cpp:  memory->destroy(eg);
ewald.cpp:  memory->destroy(vg);
ewald_disp.cpp:  memory->create(energy_self_peratom,
ewald_disp.cpp:  memory->create(virial_self_peratom,
ewald_disp.cpp:  memory->destroy(energy_self_peratom);
ewald_disp.cpp:  memory->destroy(virial_self_peratom);
finish.cpp:  memory->create(histotmp,nhisto,"finish:histotmp");
finish.cpp:  memory->destroy(histotmp);
fix_adapt.cpp:      memory->create(adapt[m].array_orig,n+1,n+1,"adapt:array_orig");
fix_adapt.cpp:      memory->destroy(adapt[m].array_orig);
fix_addforce.cpp:  memory->destroy(sforce);
fix_addforce.cpp:    memory->destroy(sforce);
fix_addforce.cpp:    memory->create(sforce,maxatom,4,"addforce:sforce");
fix_ave_atom.cpp:  memory->destroy(array);
fix_ave_atom.cpp:  memory->grow(array,nmax,nvalues,"fix_ave/atom:array");
fix_ave_correlate.cpp:  memory->create(values,nrepeat,nvalues,"ave/correlate:values");
fix_ave_correlate.cpp:  memory->create(count,nrepeat,"ave/correlate:count");
fix_ave_correlate.cpp:  memory->create(save_count,nrepeat,"ave/correlate:save_count");
fix_ave_correlate.cpp:  memory->create(corr,nrepeat,npair,"ave/correlate:corr");
fix_ave_correlate.cpp:  memory->create(save_corr,nrepeat,npair,"ave/correlate:save_corr");
fix_ave_correlate.cpp:  memory->destroy(values);
fix_ave_correlate.cpp:  memory->destroy(count);
fix_ave_correlate.cpp:  memory->destroy(save_count);
fix_ave_correlate.cpp:  memory->destroy(corr);
fix_ave_correlate.cpp:  memory->destroy(save_corr);
fix_ave_histo.cpp:    memory->create(stats_list,nwindow,4,"histo:stats_list");
fix_ave_histo.cpp:    memory->create(bin_list,nwindow,nbins,"ave/histo:bin_list");
fix_ave_histo.cpp:  memory->destroy(which);
fix_ave_histo.cpp:  memory->destroy(argindex);
fix_ave_histo.cpp:  memory->destroy(value2index);
fix_ave_histo.cpp:  memory->sfree(ids);
fix_ave_histo.cpp:  memory->destroy(stats_list);
fix_ave_histo.cpp:  memory->destroy(bin_list);
fix_ave_histo.cpp:  memory->destroy(vector);
fix_ave_histo.cpp:        memory->destroy(vector);
fix_ave_histo.cpp:        memory->create(vector,maxatom,"ave/histo:vector");
fix_ave_histo.cpp:  memory->grow(which,n,"ave/time:which");
fix_ave_histo.cpp:  memory->grow(argindex,n,"ave/time:argindex");
fix_ave_histo.cpp:  memory->grow(value2index,n,"ave/time:value2index");
fix_ave_histo.cpp:  ids = (char **) memory->srealloc(ids,n*sizeof(char *),"ave/time:ids");
fix_ave_spatial.cpp:  memory->destroy(varatom);
fix_ave_spatial.cpp:  memory->destroy(bin);
fix_ave_spatial.cpp:  memory->destroy(count_one);
fix_ave_spatial.cpp:  memory->destroy(count_many);
fix_ave_spatial.cpp:  memory->destroy(count_sum);
fix_ave_spatial.cpp:  memory->destroy(count_total);
fix_ave_spatial.cpp:  memory->destroy(coord);
fix_ave_spatial.cpp:  memory->destroy(count_list);
fix_ave_spatial.cpp:  memory->destroy(values_one);
fix_ave_spatial.cpp:  memory->destroy(values_many);
fix_ave_spatial.cpp:  memory->destroy(values_sum);
fix_ave_spatial.cpp:  memory->destroy(values_total);
fix_ave_spatial.cpp:  memory->destroy(values_list);
fix_ave_spatial.cpp:    memory->destroy(bin);
fix_ave_spatial.cpp:    memory->create(bin,maxatom,"ave/spatial:bin");
fix_ave_spatial.cpp:        memory->destroy(varatom);
fix_ave_spatial.cpp:        memory->create(varatom,maxvar,"ave/spatial:varatom");
fix_ave_spatial.cpp:    memory->grow(count_one,nbins,"ave/spatial:count_one");
fix_ave_spatial.cpp:    memory->grow(count_many,nbins,"ave/spatial:count_many");
fix_ave_spatial.cpp:    memory->grow(count_sum,nbins,"ave/spatial:count_sum");
fix_ave_spatial.cpp:    memory->grow(count_total,nbins,"ave/spatial:count_total");
fix_ave_spatial.cpp:    memory->grow(coord,nbins,ndim,"ave/spatial:coord");
fix_ave_spatial.cpp:    memory->grow(values_one,nbins,nvalues,"ave/spatial:values_one");
fix_ave_spatial.cpp:    memory->grow(values_many,nbins,nvalues,"ave/spatial:values_many");
fix_ave_spatial.cpp:    memory->grow(values_sum,nbins,nvalues,"ave/spatial:values_sum");
fix_ave_spatial.cpp:    memory->grow(values_total,nbins,nvalues,"ave/spatial:values_total");
fix_ave_spatial.cpp:      memory->create(count_list,nwindow,nbins,"ave/spatial:count_list");
fix_ave_spatial.cpp:      memory->create(values_list,nwindow,nbins,nvalues,
fix_ave_time.cpp:      memory->create(vector_list,nwindow,nvalues,"ave/time:vector_list");
fix_ave_time.cpp:    memory->create(array,nrows,nvalues,"ave/time:array");
fix_ave_time.cpp:    memory->create(array_total,nrows,nvalues,"ave/time:array_total");
fix_ave_time.cpp:      memory->create(array_list,nwindow,nrows,nvalues,"ave/time:array_list");
fix_ave_time.cpp:  memory->destroy(which);
fix_ave_time.cpp:  memory->destroy(argindex);
fix_ave_time.cpp:  memory->destroy(value2index);
fix_ave_time.cpp:  memory->destroy(offcol);
fix_ave_time.cpp:  memory->sfree(ids);
fix_ave_time.cpp:  memory->destroy(array);
fix_ave_time.cpp:  memory->destroy(array_total);
fix_ave_time.cpp:  memory->destroy(array_list);
fix_ave_time.cpp:      memory->grow(offlist,noff+1,"ave/time:offlist");
fix_ave_time.cpp:  memory->grow(which,n,"ave/time:which");
fix_ave_time.cpp:  memory->grow(argindex,n,"ave/time:argindex");
fix_ave_time.cpp:  memory->grow(value2index,n,"ave/time:value2index");
fix_ave_time.cpp:  memory->grow(offcol,n,"ave/time:offcol");
fix_ave_time.cpp:  ids = (char **) memory->srealloc(ids,n*sizeof(char *),"ave/time:ids");
fix_backbone.cpp:	frag_mem_map[i] = (int *) memory->srealloc(frag_mem_map[i],ilen_fm_map[i]*sizeof(int),"modify:frag_mem_map");
fix_backbone.cpp:	decoy_mem_map[i] = (int *) memory->srealloc(decoy_mem_map[i],ilen_decoy_map[i]*sizeof(int),"modify:decoy_mem_map");
fix_backbone.cpp:      if (n_frag_mems>0) memory->sfree(frag_mems);
fix_backbone.cpp:      for (int i=0;i<n;++i) memory->sfree(frag_mem_map[i]);
fix_backbone.cpp:    for (int i=0;i<n;++i) memory->sfree(decoy_mem_map[i]);
fix_backbone.cpp:    if (n_decoy_mems>0) memory->sfree(decoy_mems);
fix_backbone.cpp:      mems_array = (Fragment_Memory **) memory->srealloc(mems_array,n_mems*sizeof(Fragment_Memory *),"modify:mems_array");
fix_backbone.cpp:	  decoy_mem_map[i] = (int *) memory->srealloc(decoy_mem_map[i],ilen_decoy_map[i]*sizeof(int),"modify:decoy_mem_map");
fix_backbone.cpp.04_12_2016:	frag_mem_map[i] = (int *) memory->srealloc(frag_mem_map[i],ilen_fm_map[i]*sizeof(int),"modify:frag_mem_map");
fix_backbone.cpp.04_12_2016:	decoy_mem_map[i] = (int *) memory->srealloc(decoy_mem_map[i],ilen_decoy_map[i]*sizeof(int),"modify:decoy_mem_map");
fix_backbone.cpp.04_12_2016:      if (n_frag_mems>0) memory->sfree(frag_mems);
fix_backbone.cpp.04_12_2016:      for (int i=0;i<n;++i) memory->sfree(frag_mem_map[i]);
fix_backbone.cpp.04_12_2016:    for (int i=0;i<n;++i) memory->sfree(decoy_mem_map[i]);
fix_backbone.cpp.04_12_2016:    if (n_decoy_mems>0) memory->sfree(decoy_mems);
fix_backbone.cpp.04_12_2016:      mems_array = (Fragment_Memory **) memory->srealloc(mems_array,n_mems*sizeof(Fragment_Memory *),"modify:mems_array");
fix_backbone.cpp.04_12_2016:	  decoy_mem_map[i] = (int *) memory->srealloc(decoy_mem_map[i],ilen_decoy_map[i]*sizeof(int),"modify:decoy_mem_map");
fix_backbone.cpp.old:	frag_mem_map[i] = (int *) memory->srealloc(frag_mem_map[i],ilen_fm_map[i]*sizeof(int),"modify:frag_mem_map");
fix_backbone.cpp.old:	decoy_mem_map[i] = (int *) memory->srealloc(decoy_mem_map[i],ilen_decoy_map[i]*sizeof(int),"modify:decoy_mem_map");
fix_backbone.cpp.old:      if (n_frag_mems>0) memory->sfree(frag_mems);
fix_backbone.cpp.old:      for (int i=0;i<n;++i) memory->sfree(frag_mem_map[i]);
fix_backbone.cpp.old:    for (int i=0;i<n;++i) memory->sfree(decoy_mem_map[i]);
fix_backbone.cpp.old:    if (n_decoy_mems>0) memory->sfree(decoy_mems);
fix_backbone.cpp.old:      mems_array = (Fragment_Memory **) memory->srealloc(mems_array,n_mems*sizeof(Fragment_Memory *),"modify:mems_array");
fix_backbone.cpp.old:	  decoy_mem_map[i] = (int *) memory->srealloc(decoy_mem_map[i],ilen_decoy_map[i]*sizeof(int),"modify:decoy_mem_map");
fix.cpp:  memory->destroy(vatom);
fix.cpp:    memory->destroy(vatom);
fix.cpp:    memory->create(vatom,maxvatom,6,"fix:vatom");
fix_efield.cpp:  memory->destroy(efield);
fix_efield.cpp:    memory->destroy(efield);
fix_efield.cpp:    memory->create(efield,maxatom,3,"efield:efield");
fix_evaporate.cpp:  memory->destroy(list);
fix_evaporate.cpp:  memory->destroy(mark);
fix_evaporate.cpp:    memory->destroy(list);
fix_evaporate.cpp:    memory->destroy(mark);
fix_evaporate.cpp:    memory->create(list,nmax,"evaporate:list");
fix_evaporate.cpp:    memory->create(mark,nmax,"evaporate:mark");
fix_external.cpp:  memory->destroy(fexternal);
fix_external.cpp:    memory->destroy(fexternal);
fix_external.cpp:    memory->create(fexternal,nmax,3,"external:fexternal");
fix_langevin.cpp:  memory->destroy(flangevin);
fix_langevin.cpp:  memory->destroy(tforce);
fix_langevin.cpp:        memory->destroy(tforce);
fix_langevin.cpp:        memory->create(tforce,maxatom2,"langevin:tforce");
fix_langevin.cpp:    memory->destroy(flangevin);
fix_langevin.cpp:    memory->create(flangevin,maxatom1,3,"langevin:flangevin");
fix_langevin.cpp:        memory->destroy(tforce);
fix_langevin.cpp:        memory->create(tforce,maxatom2,"langevin:tforce");
fix_minimize.cpp:  memory->destroy(peratom);
fix_minimize.cpp:  for (int m = 0; m < nvector; m++) memory->destroy(vectors[m]);
fix_minimize.cpp:  memory->sfree(vectors);
fix_minimize.cpp:  memory->grow(peratom,nvector+1,"minimize:peratom");
fix_minimize.cpp:    memory->srealloc(vectors,(nvector+1)*sizeof(double *),"minimize:vectors");
fix_minimize.cpp:  memory->create(vectors[nvector],atom->nmax*n,"minimize:vector");
fix_minimize.cpp:    memory->grow(vectors[m],peratom[m]*nmax,"minimize:vector");
fix_move.cpp:  memory->destroy(xoriginal);
fix_move.cpp:  memory->destroy(displace);
fix_move.cpp:  memory->destroy(velocity);
fix_move.cpp:        memory->destroy(displace);
fix_move.cpp:        memory->create(displace,maxatom,3,"move:displace");
fix_move.cpp:        memory->destroy(velocity);
fix_move.cpp:        memory->create(velocity,maxatom,3,"move:velocity");
fix_move.cpp:  memory->grow(xoriginal,nmax,3,"move:xoriginal");
fix_nh.cpp:  memory->create(list,nsize,"nh:list");
fix_nh.cpp:  memory->destroy(list);
fix_orient_fcc.cpp:  nbr = (Nbr *) memory->smalloc(nmax*sizeof(Nbr),"orient/fcc:nbr");
fix_orient_fcc.cpp:  memory->create(order,nmax,2,"orient/fcc:order");
fix_orient_fcc.cpp:  memory->sfree(nbr);
fix_orient_fcc.cpp:  memory->destroy(order);
fix_orient_fcc.cpp:    memory->destroy(nbr);
fix_orient_fcc.cpp:    memory->destroy(order);
fix_orient_fcc.cpp:    nbr = (Nbr *) memory->smalloc(nmax*sizeof(Nbr),"orient/fcc:nbr");
fix_orient_fcc.cpp:    memory->create(order,nmax,2,"orient/fcc:order");
fix_qeq_comb.cpp:  memory->create(qf,nmax,"qeq:qf");
fix_qeq_comb.cpp:  memory->create(q1,nmax,"qeq:q1");
fix_qeq_comb.cpp:  memory->create(q2,nmax,"qeq:q2");
fix_qeq_comb.cpp:  memory->destroy(qf);
fix_qeq_comb.cpp:  memory->destroy(q1);
fix_qeq_comb.cpp:  memory->destroy(q2);
fix_qeq_comb.cpp:    memory->destroy(qf);
fix_qeq_comb.cpp:    memory->destroy(q1);
fix_qeq_comb.cpp:    memory->destroy(q2);
fix_qeq_comb.cpp:    memory->create(qf,nmax,"qeq:qf");
fix_qeq_comb.cpp:    memory->create(q1,nmax,"qeq:q1");
fix_qeq_comb.cpp:    memory->create(q2,nmax,"qeq:q2");
fix_read_restart.cpp:  memory->destroy(count);
fix_read_restart.cpp:  memory->destroy(extra);
fix_read_restart.cpp:  memory->grow(count,nmax,"read_restart:count");
fix_read_restart.cpp:  memory->grow(extra,nmax,nextra,"read_restart:extra");
fix_respa.cpp:  memory->destroy(f_level);
fix_respa.cpp:  memory->grow(f_level,nmax,nlevels,3,"fix_respa:f_level");
fix_restrain.cpp:      memory->grow(rstyle,maxrestrain,"restrain:rstyle");
fix_restrain.cpp:      memory->grow(ids,maxrestrain,4,"restrain:ids");
fix_restrain.cpp:      memory->grow(kstart,maxrestrain,"restrain:kstart");
fix_restrain.cpp:      memory->grow(kstop,maxrestrain,"restrain:kstop");
fix_restrain.cpp:      memory->grow(target,maxrestrain,"restrain:target");
fix_restrain.cpp:      memory->grow(cos_target,maxrestrain,"restrain:cos_target");
fix_restrain.cpp:      memory->grow(sin_target,maxrestrain,"restrain:sin_target");
fix_restrain.cpp:  memory->destroy(rstyle);
fix_restrain.cpp:  memory->destroy(ids);
fix_restrain.cpp:  memory->destroy(kstart);
fix_restrain.cpp:  memory->destroy(kstop);
fix_restrain.cpp:  memory->destroy(target);
fix_restrain.cpp:  memory->destroy(cos_target);
fix_restrain.cpp:  memory->destroy(sin_target);
fix_setforce.cpp:  memory->destroy(sforce);
fix_setforce.cpp:    memory->destroy(sforce);
fix_setforce.cpp:    memory->create(sforce,maxatom,3,"setforce:sforce");
fix_shake.cpp:  memory->destroy(shake_flag);
fix_shake.cpp:  memory->destroy(shake_atom);
fix_shake.cpp:  memory->destroy(shake_type);
fix_shake.cpp:  memory->destroy(xshake);
fix_shake.cpp:  memory->destroy(list);
fix_shake.cpp:    memory->destroy(list);
fix_shake.cpp:    memory->create(list,maxlist,"shake:list");
fix_shake.cpp:  memory->create(npartner,nlocal,"shake:npartner");
fix_shake.cpp:  memory->create(nshake,nlocal,"shake:nshake");
fix_shake.cpp:  memory->create(partner_tag,nlocal,max,"shake:partner_tag");
fix_shake.cpp:  memory->create(partner_mask,nlocal,max,"shake:partner_mask");
fix_shake.cpp:  memory->create(partner_type,nlocal,max,"shake:partner_type");
fix_shake.cpp:  memory->create(partner_massflag,nlocal,max,"shake:partner_massflag");
fix_shake.cpp:  memory->create(partner_bondtype,nlocal,max,"shake:partner_bondtype");
fix_shake.cpp:  memory->create(partner_shake,nlocal,max,"shake:partner_shake");
fix_shake.cpp:  memory->create(partner_nshake,nlocal,max,"shake:partner_nshake");
fix_shake.cpp:  memory->destroy(npartner);
fix_shake.cpp:  memory->destroy(nshake);
fix_shake.cpp:  memory->destroy(partner_tag);
fix_shake.cpp:  memory->destroy(partner_mask);
fix_shake.cpp:  memory->destroy(partner_type);
fix_shake.cpp:  memory->destroy(partner_massflag);
fix_shake.cpp:  memory->destroy(partner_bondtype);
fix_shake.cpp:  memory->destroy(partner_shake);
fix_shake.cpp:  memory->destroy(partner_nshake);
fix_shake.cpp:  memory->grow(shake_flag,nmax,"shake:shake_flag");
fix_shake.cpp:  memory->grow(shake_atom,nmax,4,"shake:shake_atom");
fix_shake.cpp:  memory->grow(shake_type,nmax,3,"shake:shake_type");
fix_shake.cpp:  memory->destroy(xshake);
fix_shake.cpp:  memory->create(xshake,nmax,3,"shake:xshake");
fix_shear_history.cpp:  memory->destroy(npartner);
fix_shear_history.cpp:  memory->destroy(partner);
fix_shear_history.cpp:  memory->destroy(shearpartner);
fix_shear_history.cpp:  memory->grow(npartner,nmax,"shear_history:npartner");
fix_shear_history.cpp:  memory->grow(partner,nmax,MAXTOUCH,"shear_history:partner");
fix_shear_history.cpp:  memory->grow(shearpartner,nmax,MAXTOUCH,3,"shear_history:shearpartner");
fix_spring_self.cpp:  memory->destroy(xoriginal);
fix_spring_self.cpp:  memory->grow(xoriginal,nmax,3,"fix_spring/self:xoriginal");
fix_store_force.cpp:  memory->create(foriginal,nmax,3,"store/force:foriginal");
fix_store_force.cpp:  memory->destroy(foriginal);
fix_store_force.cpp:    memory->destroy(foriginal);
fix_store_force.cpp:    memory->create(foriginal,nmax,3,"store/force:foriginal");
fix_store_state.cpp:  memory->destroy(values);
fix_store_state.cpp: memory->grow(values,nmax,nvalues,"store/state:values");
fix_tmd.cpp:  memory->destroy(xf);
fix_tmd.cpp:  memory->destroy(xold);
fix_tmd.cpp:  memory->grow(xf,nmax,3,"fix_tmd:xf");
fix_tmd.cpp:  memory->grow(xold,nmax,3,"fix_tmd:xold");
fix_ttm.cpp:  memory->create(nsum,nxnodes,nynodes,nznodes,"ttm:nsum");
fix_ttm.cpp:  memory->create(nsum_all,nxnodes,nynodes,nznodes,"ttm:nsum_all");
fix_ttm.cpp:  memory->create(T_initial_set,nxnodes,nynodes,nznodes,"ttm:T_initial_set");
fix_ttm.cpp:  memory->create(sum_vsq,nxnodes,nynodes,nznodes,"ttm:sum_vsq");
fix_ttm.cpp:  memory->create(sum_mass_vsq,nxnodes,nynodes,nznodes,"ttm:sum_mass_vsq");
fix_ttm.cpp:  memory->create(sum_vsq_all,nxnodes,nynodes,nznodes,"ttm:sum_vsq_all");
fix_ttm.cpp:  memory->create(sum_mass_vsq_all,nxnodes,nynodes,nznodes,
fix_ttm.cpp:  memory->create(T_electron_old,nxnodes,nynodes,nznodes,"ttm:T_electron_old");
fix_ttm.cpp:  memory->create(T_electron,nxnodes,nynodes,nznodes,"ttm:T_electron");
fix_ttm.cpp:  memory->create(net_energy_transfer,nxnodes,nynodes,nznodes,
fix_ttm.cpp:  memory->create(net_energy_transfer_all,nxnodes,nynodes,nznodes,
fix_ttm.cpp:  memory->destroy(nsum);
fix_ttm.cpp:  memory->destroy(nsum_all);
fix_ttm.cpp:  memory->destroy(T_initial_set);
fix_ttm.cpp:  memory->destroy(sum_vsq);
fix_ttm.cpp:  memory->destroy(sum_mass_vsq);
fix_ttm.cpp:  memory->destroy(sum_vsq_all);
fix_ttm.cpp:  memory->destroy(sum_mass_vsq_all);
fix_ttm.cpp:  memory->destroy(T_electron_old);
fix_ttm.cpp:  memory->destroy(T_electron);
fix_ttm.cpp:  memory->destroy(flangevin);
fix_ttm.cpp:  memory->destroy(net_energy_transfer);
fix_ttm.cpp:  memory->destroy(net_energy_transfer_all);
fix_ttm.cpp: memory->grow(flangevin,ngrow,3,"TTM:flangevin");
fix_ttm.cpp:  memory->create(rlist,nxnodes*nynodes*nznodes+1,"TTM:rlist");
fix_ttm.cpp:  memory->destroy(rlist);
group.cpp:    memory->create(aflag,nlocal,"group:aflag");
group.cpp:    memory->destroy(aflag);
image.cpp:  memory->sfree(username);
image.cpp:  memory->destroy(userrgb);
image.cpp:  memory->destroy(depthBuffer);
image.cpp:  memory->destroy(surfaceBuffer);
image.cpp:  memory->destroy(imageBuffer);
image.cpp:  memory->destroy(depthcopy);
image.cpp:  memory->destroy(surfacecopy);
image.cpp:  memory->destroy(rgbcopy);
image.cpp:  memory->create(depthBuffer,npixels,"image:depthBuffer");
image.cpp:  memory->create(surfaceBuffer,2*npixels,"image:surfaceBuffer");
image.cpp:  memory->create(imageBuffer,3*npixels,"image:imageBuffer");
image.cpp:  memory->create(depthcopy,npixels,"image:depthcopy");
image.cpp:  memory->create(surfacecopy,2*npixels,"image:surfacecopy");
image.cpp:  memory->create(rgbcopy,3*npixels,"image:rgbcopy");
image.cpp:      memory->srealloc(username,(ncolors+1)*sizeof(char *),"image:username");
image.cpp:    memory->grow(userrgb,ncolors+1,3,"image:userrgb");
improper.cpp:  memory->destroy(eatom);
improper.cpp:  memory->destroy(vatom);
improper.cpp:    memory->destroy(eatom);
improper.cpp:    memory->create(eatom,comm->nthreads*maxeatom,"bond:eatom");
improper.cpp:    memory->destroy(vatom);
improper.cpp:    memory->create(vatom,comm->nthreads*maxvatom,6,"bond:vatom");
improper_cvff.cpp:    memory->destroy(setflag);
improper_cvff.cpp:    memory->destroy(k);
improper_cvff.cpp:    memory->destroy(sign);
improper_cvff.cpp:    memory->destroy(multiplicity);
improper_cvff.cpp:  memory->create(k,n+1,"improper:k");
improper_cvff.cpp:  memory->create(sign,n+1,"improper:sign");
improper_cvff.cpp:  memory->create(multiplicity,n+1,"improper:multiplicity");
improper_cvff.cpp:  memory->create(setflag,n+1,"improper:setflag");
improper_harmonic.cpp:    memory->destroy(setflag);
improper_harmonic.cpp:    memory->destroy(k);
improper_harmonic.cpp:    memory->destroy(chi);
improper_harmonic.cpp:  memory->create(k,n+1,"improper:k");
improper_harmonic.cpp:  memory->create(chi,n+1,"improper:chi");
improper_harmonic.cpp:  memory->create(setflag,n+1,"improper:setflag");
improper_hybrid.cpp:    memory->destroy(setflag);
improper_hybrid.cpp:    memory->destroy(map);
improper_hybrid.cpp:      memory->destroy(improperlist[i]);
improper_hybrid.cpp:        memory->destroy(improperlist[m]);
improper_hybrid.cpp:        memory->create(improperlist[m],maximproper[m],5,
improper_hybrid.cpp:  memory->create(map,n+1,"improper:map");
improper_hybrid.cpp:  memory->create(setflag,n+1,"improper:setflag");
improper_hybrid.cpp:    memory->destroy(setflag);
improper_hybrid.cpp:    memory->destroy(map);
improper_hybrid.cpp:      memory->destroy(improperlist[i]);
improper_umbrella.cpp:    memory->destroy(setflag);
improper_umbrella.cpp:    memory->destroy(kw);
improper_umbrella.cpp:    memory->destroy(w0);
improper_umbrella.cpp:    memory->destroy(C);
improper_umbrella.cpp:  memory->create(kw,n+1,"improper:kw");
improper_umbrella.cpp:  memory->create(w0,n+1,"improper:w0");
improper_umbrella.cpp:  memory->create(C,n+1,"improper:C");
improper_umbrella.cpp:  memory->create(setflag,n+1,"improper:setflag");
input.cpp:    infiles = (FILE **) memory->smalloc(sizeof(FILE *),"input:infiles");
input.cpp:  memory->sfree(arg);
input.cpp:  memory->sfree(infiles);
input.cpp:      arg = (char **) memory->srealloc(arg,maxarg*sizeof(char *),"input:arg");
input.cpp:        memory->srealloc(infiles,maxfile*sizeof(FILE *),"input:infiles");
irregular.cpp:  memory->create(buf_send,maxsend+BUFEXTRA,"comm:buf_send");
irregular.cpp:  memory->create(buf_recv,maxrecv,"comm:buf_recv");
irregular.cpp:  memory->destroy(buf_send);
irregular.cpp:  memory->destroy(buf_recv);
irregular.cpp:  aplan = (PlanAtom *) memory->smalloc(sizeof(PlanAtom),"irregular:aplan");
irregular.cpp:  memory->create(buf,aplan->sendmax,"irregular:buf");
irregular.cpp:  memory->destroy(buf);
irregular.cpp:  memory->sfree(aplan);
irregular.cpp:  dplan = (PlanData *) memory->smalloc(sizeof(PlanData),"irregular:dplan");
irregular.cpp:  memory->create(buf,dplan->sendmax*nbytes,"irregular:buf");
irregular.cpp:  memory->destroy(buf);
irregular.cpp:  memory->sfree(dplan);
irregular.cpp:    memory->grow(buf_send,maxsend+BUFEXTRA,"comm:buf_send");
irregular.cpp:    memory->destroy(buf_send);
irregular.cpp:    memory->create(buf_send,maxsend+BUFEXTRA,"comm:buf_send");
irregular.cpp:  memory->destroy(buf_recv);
irregular.cpp:  memory->create(buf_recv,maxrecv,"comm:buf_recv");
irregular.cpp:  bigint bytes = memory->usage(buf_send,maxsend);
irregular.cpp:  bytes += memory->usage(buf_recv,maxrecv);
kspace.cpp:  memory->create(gcons,7,7,"kspace:gcons");
kspace.cpp:  memory->create(dgcons,7,6,"kspace:dgcons");
kspace.cpp:  memory->destroy(eatom);
kspace.cpp:  memory->destroy(vatom);
kspace.cpp:  memory->destroy(gcons);
kspace.cpp:  memory->destroy(dgcons);
kspace.cpp:    memory->destroy(eatom);
kspace.cpp:    memory->create(eatom,maxeatom,"kspace:eatom");
kspace.cpp:    memory->destroy(vatom);
kspace.cpp:    memory->create(vatom,maxvatom,6,"kspace:vatom");
lattice.cpp:  memory->destroy(basis);
lattice.cpp:  memory->grow(basis,nbasis+1,3,"lattice:basis");
library.cpp:    lmp->memory->create(copy,count*natoms,"lib/gather:copy");
library.cpp:    lmp->memory->destroy(copy);
library.cpp:    lmp->memory->create(copy,count*natoms,"lib/gather:copy");
library.cpp:    lmp->memory->destroy(copy);
min.cpp:  memory->sfree(xextra_atom);
min.cpp:  memory->sfree(fextra_atom);
min.cpp:  memory->destroy(extra_peratom);
min.cpp:  memory->destroy(extra_nlen);
min.cpp:  memory->destroy(extra_max);
min.cpp:  memory->sfree(requestor);
min.cpp:  memory->sfree(xextra_atom);
min.cpp:  memory->sfree(fextra_atom);
min.cpp:  memory->destroy(extra_peratom);
min.cpp:  memory->destroy(extra_nlen);
min.cpp:  memory->destroy(extra_max);
min.cpp:  memory->sfree(requestor);
min.cpp:  xextra_atom = (double **) memory->srealloc(xextra_atom,n*sizeof(double *),
min.cpp:  fextra_atom = (double **) memory->srealloc(fextra_atom,n*sizeof(double *),
min.cpp:  memory->grow(extra_peratom,n,"min:extra_peratom");
min.cpp:  memory->grow(extra_nlen,n,"min:extra_nlen");
min.cpp:  memory->grow(extra_max,n,"min:extra_max");
min.cpp:  requestor = (Pair **) memory->srealloc(requestor,n*sizeof(Pair *),
modify.cpp:  memory->sfree(fix);
modify.cpp:  memory->destroy(fmask);
modify.cpp:  memory->sfree(compute);
modify.cpp:      fix = (Fix **) memory->srealloc(fix,maxfix*sizeof(Fix *),"modify:fix");
modify.cpp:      memory->grow(fmask,maxfix,"modify:fmask");
modify.cpp:      memory->srealloc(compute,maxcompute*sizeof(Compute *),"modify:compute");
msm.cpp:  memory->destroy(part2grid);
msm.cpp:  memory->destroy(g_direct);
msm.cpp:  memory->destroy(dgx_direct);
msm.cpp:  memory->destroy(dgy_direct);
msm.cpp:  memory->destroy(dgz_direct);
msm.cpp:  memory->destroy(v0_direct);
msm.cpp:  memory->destroy(v1_direct);
msm.cpp:  memory->destroy(v2_direct);
msm.cpp:  memory->destroy(v3_direct);
msm.cpp:  memory->destroy(v4_direct);
msm.cpp:  memory->destroy(v5_direct);
msm.cpp:    memory->destroy(part2grid);
msm.cpp:    memory->create(part2grid,nmax,3,"msm:part2grid");
msm.cpp:  memory->create(buf1,nbuf,"msm:buf1");
msm.cpp:  memory->create(buf2,nbuf,"msm:buf2");
msm.cpp:    memory->create(buf3,nbuf_peratom,"msm:buf3");
msm.cpp:    memory->create(buf4,nbuf_peratom,"msm:buf4");
msm.cpp:  memory->create2d_offset(phi1d,3,-order+1,order-1,"msm:phi1d");
msm.cpp:  memory->create2d_offset(dphi1d,3,-order+1,order-1,"msm:dphi1d");
msm.cpp:    memory->create3d_offset(qgrid[n],nzlo_out[n],nzhi_out[n],
msm.cpp:      memory->create3d_offset(egrid[n],nzlo_out[n],nzhi_out[n],
msm.cpp:      memory->create3d_offset(fxgrid[n],nzlo_out[n],nzhi_out[n],
msm.cpp:      memory->create3d_offset(fygrid[n],nzlo_out[n],nzhi_out[n],
msm.cpp:      memory->create3d_offset(fzgrid[n],nzlo_out[n],nzhi_out[n],
msm.cpp:      memory->create3d_offset(egrid[n],nzlo_out[n],nzhi_out[n],
msm.cpp:    memory->create3d_offset(v0grid[n],nzlo_out[n],nzhi_out[n],
msm.cpp:    memory->create3d_offset(v1grid[n],nzlo_out[n],nzhi_out[n],
msm.cpp:    memory->create3d_offset(v2grid[n],nzlo_out[n],nzhi_out[n],
msm.cpp:    memory->create3d_offset(v3grid[n],nzlo_out[n],nzhi_out[n],
msm.cpp:    memory->create3d_offset(v4grid[n],nzlo_out[n],nzhi_out[n],
msm.cpp:    memory->create3d_offset(v5grid[n],nzlo_out[n],nzhi_out[n],
msm.cpp:    memory->create(buf3,nbuf_peratom,"msm:buf3");
msm.cpp:    memory->create(buf4,nbuf_peratom,"msm:buf4");
msm.cpp:  memory->destroy(buf1);
msm.cpp:  memory->destroy(buf2);
msm.cpp:    memory->destroy(buf3);
msm.cpp:    memory->destroy(buf4);
msm.cpp:  memory->destroy2d_offset(phi1d,-order+1);
msm.cpp:  memory->destroy2d_offset(dphi1d,-order+1);
msm.cpp:      memory->destroy3d_offset(qgrid[n],nzlo_out[n],nylo_out[n],nxlo_out[n]);
msm.cpp:        memory->destroy3d_offset(egrid[n],nzlo_out[n],nylo_out[n],nxlo_out[n]);
msm.cpp:        memory->destroy3d_offset(fxgrid[n],nzlo_out[n],nylo_out[n],nxlo_out[n]);
msm.cpp:        memory->destroy3d_offset(fygrid[n],nzlo_out[n],nylo_out[n],nxlo_out[n]);
msm.cpp:        memory->destroy3d_offset(fzgrid[n],nzlo_out[n],nylo_out[n],nxlo_out[n]);
msm.cpp:    memory->destroy(buf3);
msm.cpp:    memory->destroy(buf4);
msm.cpp:        memory->destroy3d_offset(egrid[n],nzlo_out[n],nylo_out[n],nxlo_out[n]);
msm.cpp:      memory->destroy3d_offset(v0grid[n],nzlo_out[n],nylo_out[n],nxlo_out[n]);
msm.cpp:      memory->destroy3d_offset(v1grid[n],nzlo_out[n],nylo_out[n],nxlo_out[n]);
msm.cpp:      memory->destroy3d_offset(v2grid[n],nzlo_out[n],nylo_out[n],nxlo_out[n]);
msm.cpp:      memory->destroy3d_offset(v3grid[n],nzlo_out[n],nylo_out[n],nxlo_out[n]);
msm.cpp:      memory->destroy3d_offset(v4grid[n],nzlo_out[n],nylo_out[n],nxlo_out[n]);
msm.cpp:      memory->destroy3d_offset(v5grid[n],nzlo_out[n],nylo_out[n],nxlo_out[n]);
msm.cpp:  memory->create3d_offset(gridn_all,nzlo_out[n],nzhi_out[n],nylo_out[n],nyhi_out[n],
msm.cpp:  memory->destroy3d_offset(gridn_all,nzlo_out[n],nylo_out[n],nxlo_out[n]);
msm.cpp:  if (g_direct) memory->destroy(g_direct);
msm.cpp:  memory->create(g_direct,levels,nmax_direct,"msm:g_direct");
msm.cpp:  if (dgx_direct) memory->destroy(dgx_direct);
msm.cpp:  memory->create(dgx_direct,levels,nmax_direct,"msm:dgx_direct");
msm.cpp:  if (dgy_direct) memory->destroy(dgy_direct);
msm.cpp:  memory->create(dgy_direct,levels,nmax_direct,"msm:dgy_direct");
msm.cpp:  if (dgz_direct) memory->destroy(dgz_direct);
msm.cpp:  memory->create(dgz_direct,levels,nmax_direct,"msm:dgz_direct");
msm.cpp:  if (v0_direct) memory->destroy(v0_direct);
msm.cpp:  memory->create(v0_direct,levels,nmax_direct,"msm:v0_direct");
msm.cpp:  if (v1_direct) memory->destroy(v1_direct);
msm.cpp:  memory->create(v1_direct,levels,nmax_direct,"msm:v1_direct");
msm.cpp:  if (v2_direct) memory->destroy(v2_direct);
msm.cpp:  memory->create(v2_direct,levels,nmax_direct,"msm:v2_direct");
msm.cpp:  if (v3_direct) memory->destroy(v3_direct);
msm.cpp:  memory->create(v3_direct,levels,nmax_direct,"msm:v3_direct");
msm.cpp:  if (v4_direct) memory->destroy(v4_direct);
msm.cpp:  memory->create(v4_direct,levels,nmax_direct,"msm:v4_direct");
msm.cpp:  if (v5_direct) memory->destroy(v5_direct);
msm.cpp:  memory->create(v5_direct,levels,nmax_direct,"msm:v5_direct");
neigh_bond.cpp:          memory->grow(bondlist,maxbond,3,"neighbor:bondlist");
neigh_bond.cpp:          memory->grow(bondlist,maxbond,3,"neighbor:bondlist");
neigh_bond.cpp:          memory->grow(anglelist,maxangle,4,"neighbor:anglelist");
neigh_bond.cpp:          memory->grow(anglelist,maxangle,4,"neighbor:anglelist");
neigh_bond.cpp:          memory->grow(dihedrallist,maxdihedral,5,"neighbor:dihedrallist");
neigh_bond.cpp:          memory->grow(dihedrallist,maxdihedral,5,"neighbor:dihedrallist");
neigh_bond.cpp:          memory->grow(improperlist,maximproper,5,"neighbor:improperlist");
neigh_bond.cpp:          memory->grow(improperlist,maximproper,5,"neighbor:improperlist");
neighbor.cpp:  memory->destroy(cutneighsq);
neighbor.cpp:  memory->destroy(cutneighghostsq);
neighbor.cpp:  memory->destroy(xhold);
neighbor.cpp:  memory->destroy(binhead);
neighbor.cpp:  memory->destroy(bins);
neighbor.cpp:  memory->destroy(ex1_type);
neighbor.cpp:  memory->destroy(ex2_type);
neighbor.cpp:  memory->destroy(ex_type);
neighbor.cpp:  memory->destroy(ex1_group);
neighbor.cpp:  memory->destroy(ex2_group);
neighbor.cpp:  memory->destroy(ex_mol_group);
neighbor.cpp:  memory->sfree(requests);
neighbor.cpp:  memory->sfree(old_requests);
neighbor.cpp:  memory->destroy(bondlist);
neighbor.cpp:  memory->destroy(anglelist);
neighbor.cpp:  memory->destroy(dihedrallist);
neighbor.cpp:  memory->destroy(improperlist);
neighbor.cpp:    memory->create(cutneighsq,n+1,n+1,"neigh:cutneighsq");
neighbor.cpp:    memory->create(cutneighghostsq,n+1,n+1,"neigh:cutneighghostsq");
neighbor.cpp:    memory->destroy(xhold);
neighbor.cpp:    memory->destroy(bins);
neighbor.cpp:    memory->destroy(binhead);
neighbor.cpp:      memory->create(xhold,maxhold,3,"neigh:xhold");
neighbor.cpp:      memory->create(bins,maxbin,"bins");
neighbor.cpp:    memory->destroy(ex_type);
neighbor.cpp:    memory->create(ex_type,n+1,n+1,"neigh:ex_type");
neighbor.cpp:  memory->sfree(old_requests);
neighbor.cpp:    memory->create(bondlist,maxbond,3,"neigh:bondlist");
neighbor.cpp:    memory->create(anglelist,maxangle,4,"neigh:anglelist");
neighbor.cpp:    memory->create(dihedrallist,maxdihedral,5,"neigh:dihedrallist");
neighbor.cpp:    memory->create(improperlist,maximproper,5,"neigh:improperlist");
neighbor.cpp:      memory->srealloc(requests,maxrequest*sizeof(NeighRequest *),
neighbor.cpp:      memory->destroy(xhold);
neighbor.cpp:      memory->create(xhold,maxhold,3,"neigh:xhold");
neighbor.cpp:    memory->destroy(bins);
neighbor.cpp:    memory->create(bins,maxbin,"bins");
neighbor.cpp:    memory->destroy(bins);
neighbor.cpp:    memory->create(bins,maxbin,"bins");
neighbor.cpp:    memory->destroy(binhead);
neighbor.cpp:    memory->create(binhead,maxhead,"neigh:binhead");
neighbor.cpp:          memory->grow(ex1_type,maxex_type,"neigh:ex1_type");
neighbor.cpp:          memory->grow(ex2_type,maxex_type,"neigh:ex2_type");
neighbor.cpp:          memory->grow(ex1_group,maxex_group,"neigh:ex1_group");
neighbor.cpp:          memory->grow(ex2_group,maxex_group,"neigh:ex2_group");
neighbor.cpp:          memory->grow(ex_mol_group,maxex_mol,"neigh:ex_mol_group");
neighbor.cpp:  bytes += memory->usage(xhold,maxhold,3);
neighbor.cpp:    bytes += memory->usage(bins,maxbin);
neighbor.cpp:    bytes += memory->usage(binhead,maxhead);
neighbor.cpp:  bytes += memory->usage(bondlist,maxbond,3);
neighbor.cpp:  bytes += memory->usage(anglelist,maxangle,4);
neighbor.cpp:  bytes += memory->usage(dihedrallist,maxdihedral,5);
neighbor.cpp:  bytes += memory->usage(improperlist,maximproper,5);
neigh_list.cpp:    memory->destroy(ilist);
neigh_list.cpp:    memory->destroy(numneigh);
neigh_list.cpp:    memory->sfree(firstneigh);
neigh_list.cpp:    memory->sfree(firstdouble);
neigh_list.cpp:    for (int i = 0; i < maxpage; i++) memory->destroy(pages[i]);
neigh_list.cpp:    memory->sfree(pages);
neigh_list.cpp:      for (int i = 0; i < maxpage; i++) memory->destroy(dpages[i]);
neigh_list.cpp:      memory->sfree(dpages);
neigh_list.cpp:  memory->destroy(ijskip);
neigh_list.cpp:  if (maxstencil) memory->destroy(stencil);
neigh_list.cpp:  if (ghostflag) memory->destroy(stencilxyz);
neigh_list.cpp:      memory->destroy(stencil_multi[i]);
neigh_list.cpp:      memory->destroy(distsq_multi[i]);
neigh_list.cpp:  memory->destroy(ilist);
neigh_list.cpp:  memory->destroy(numneigh);
neigh_list.cpp:  memory->sfree(firstneigh);
neigh_list.cpp:  memory->sfree(firstdouble);
neigh_list.cpp:  memory->create(ilist,maxatoms,"neighlist:ilist");
neigh_list.cpp:  memory->create(numneigh,maxatoms,"neighlist:numneigh");
neigh_list.cpp:  firstneigh = (int **) memory->smalloc(maxatoms*sizeof(int *),
neigh_list.cpp:    firstdouble = (double **) memory->smalloc(maxatoms*sizeof(double *),
neigh_list.cpp:      memory->destroy(stencil);
neigh_list.cpp:      memory->create(stencil,maxstencil,"neighlist:stencil");
neigh_list.cpp:        memory->destroy(stencilxyz);
neigh_list.cpp:        memory->create(stencilxyz,maxstencil,3,"neighlist:stencilxyz");
neigh_list.cpp:        memory->destroy(stencil_multi[i]);
neigh_list.cpp:        memory->destroy(distsq_multi[i]);
neigh_list.cpp:        memory->create(stencil_multi[i],maxstencil_multi,
neigh_list.cpp:        memory->create(distsq_multi[i],maxstencil_multi,
neigh_list.cpp:    memory->srealloc(pages,maxpage*sizeof(int *),"neighlist:pages");
neigh_list.cpp:    memory->create(pages[i],pgsize,"neighlist:pages[i]");
neigh_list.cpp:      memory->srealloc(dpages,maxpage*sizeof(double *),"neighlist:dpages");
neigh_list.cpp:      memory->create(dpages[i],dnum*pgsize,"neighlist:dpages[i]");
neigh_list.cpp:  memory->create(ijskip,ntypes+1,ntypes+1,"neigh_list:ijskip");
neigh_list.cpp:  bytes += memory->usage(ilist,maxatoms);
neigh_list.cpp:  bytes += memory->usage(numneigh,maxatoms);
neigh_list.cpp:  bytes += memory->usage(pages,maxpage,pgsize);
neigh_list.cpp:    bytes += memory->usage(dpages,maxpage,dnum*pgsize);
neigh_list.cpp:  if (maxstencil) bytes += memory->usage(stencil,maxstencil);
neigh_list.cpp:  if (ghostflag) bytes += memory->usage(stencilxyz,maxstencil,3);
neigh_list.cpp:    bytes += memory->usage(stencil_multi,atom->ntypes,maxstencil_multi);
neigh_list.cpp:    bytes += memory->usage(distsq_multi,atom->ntypes,maxstencil_multi);
neigh_request.cpp:  memory->destroy(ijskip);
output.cpp:  memory->destroy(every_dump);
output.cpp:  memory->destroy(next_dump);
output.cpp:  memory->destroy(last_dump);
output.cpp:  memory->sfree(var_dump);
output.cpp:  memory->destroy(ivar_dump);
output.cpp:  memory->sfree(dump);
output.cpp:      memory->srealloc(dump,max_dump*sizeof(Dump *),"output:dump");
output.cpp:    memory->grow(every_dump,max_dump,"output:every_dump");
output.cpp:    memory->grow(next_dump,max_dump,"output:next_dump");
output.cpp:    memory->grow(last_dump,max_dump,"output:last_dump");
output.cpp:      memory->srealloc(var_dump,max_dump*sizeof(char *),"output:var_dump");
output.cpp:    memory->grow(ivar_dump,max_dump,"output:ivar_dump");
pair_adp.cpp:  memory->destroy(rho);
pair_adp.cpp:  memory->destroy(fp);
pair_adp.cpp:  memory->destroy(mu);
pair_adp.cpp:  memory->destroy(lambda);
pair_adp.cpp:    memory->destroy(setflag);
pair_adp.cpp:    memory->destroy(cutsq);
pair_adp.cpp:    memory->destroy(type2rhor);
pair_adp.cpp:    memory->destroy(type2z2r);
pair_adp.cpp:    memory->destroy(type2u2r);
pair_adp.cpp:    memory->destroy(type2w2r);
pair_adp.cpp:    memory->destroy(setfl->frho);
pair_adp.cpp:    memory->destroy(setfl->rhor);
pair_adp.cpp:    memory->destroy(setfl->z2r);
pair_adp.cpp:    memory->destroy(setfl->u2r);
pair_adp.cpp:    memory->destroy(setfl->w2r);
pair_adp.cpp:  memory->destroy(frho);
pair_adp.cpp:  memory->destroy(rhor);
pair_adp.cpp:  memory->destroy(z2r);
pair_adp.cpp:  memory->destroy(u2r);
pair_adp.cpp:  memory->destroy(w2r);
pair_adp.cpp:  memory->destroy(frho_spline);
pair_adp.cpp:  memory->destroy(rhor_spline);
pair_adp.cpp:  memory->destroy(z2r_spline);
pair_adp.cpp:  memory->destroy(u2r_spline);
pair_adp.cpp:  memory->destroy(w2r_spline);
pair_adp.cpp:    memory->destroy(rho);
pair_adp.cpp:    memory->destroy(fp);
pair_adp.cpp:    memory->destroy(mu);
pair_adp.cpp:    memory->destroy(lambda);
pair_adp.cpp:    memory->create(rho,nmax,"pair:rho");
pair_adp.cpp:    memory->create(fp,nmax,"pair:fp");
pair_adp.cpp:    memory->create(mu,nmax,3,"pair:mu");
pair_adp.cpp:    memory->create(lambda,nmax,6,"pair:lambda");
pair_adp.cpp:  memory->create(setflag,n+1,n+1,"pair:setflag");
pair_adp.cpp:  memory->create(cutsq,n+1,n+1,"pair:cutsq");
pair_adp.cpp:  memory->create(type2rhor,n+1,n+1,"pair:type2rhor");
pair_adp.cpp:  memory->create(type2z2r,n+1,n+1,"pair:type2z2r");
pair_adp.cpp:  memory->create(type2u2r,n+1,n+1,"pair:type2u2r");
pair_adp.cpp:  memory->create(type2w2r,n+1,n+1,"pair:type2w2r");
pair_adp.cpp:    memory->destroy(setfl->frho);
pair_adp.cpp:    memory->destroy(setfl->rhor);
pair_adp.cpp:    memory->destroy(setfl->z2r);
pair_adp.cpp:    memory->destroy(setfl->u2r);
pair_adp.cpp:    memory->destroy(setfl->w2r);
pair_adp.cpp:  memory->create(file->frho,file->nelements,file->nrho+1,"pair:frho");
pair_adp.cpp:  memory->create(file->rhor,file->nelements,file->nr+1,"pair:rhor");
pair_adp.cpp:  memory->create(file->z2r,file->nelements,file->nelements,file->nr+1,
pair_adp.cpp:  memory->create(file->u2r,file->nelements,file->nelements,file->nr+1,
pair_adp.cpp:  memory->create(file->w2r,file->nelements,file->nelements,file->nr+1,
pair_adp.cpp:  memory->destroy(frho);
pair_adp.cpp:  memory->create(frho,nfrho,nrho+1,"pair:frho");
pair_adp.cpp:  memory->destroy(rhor);
pair_adp.cpp:  memory->create(rhor,nrhor,nr+1,"pair:rhor");
pair_adp.cpp:  memory->destroy(z2r);
pair_adp.cpp:  memory->create(z2r,nz2r,nr+1,"pair:z2r");
pair_adp.cpp:  memory->destroy(u2r);
pair_adp.cpp:  memory->create(u2r,nu2r,nr+1,"pair:u2r");
pair_adp.cpp:  memory->destroy(w2r);
pair_adp.cpp:  memory->create(w2r,nw2r,nr+1,"pair:w2r");
pair_adp.cpp:  memory->destroy(frho_spline);
pair_adp.cpp:  memory->destroy(rhor_spline);
pair_adp.cpp:  memory->destroy(z2r_spline);
pair_adp.cpp:  memory->destroy(u2r_spline);
pair_adp.cpp:  memory->destroy(w2r_spline);
pair_adp.cpp:  memory->create(frho_spline,nfrho,nrho+1,7,"pair:frho");
pair_adp.cpp:  memory->create(rhor_spline,nrhor,nr+1,7,"pair:rhor");
pair_adp.cpp:  memory->create(z2r_spline,nz2r,nr+1,7,"pair:z2r");
pair_adp.cpp:  memory->create(u2r_spline,nz2r,nr+1,7,"pair:u2r");
pair_adp.cpp:  memory->create(w2r_spline,nz2r,nr+1,7,"pair:w2r");
pair_airebo.cpp:  memory->destroy(REBO_numneigh);
pair_airebo.cpp:  memory->sfree(REBO_firstneigh);
pair_airebo.cpp:  for (int i = 0; i < maxpage; i++) memory->destroy(pages[i]);
pair_airebo.cpp:  memory->sfree(pages);
pair_airebo.cpp:  memory->destroy(nC);
pair_airebo.cpp:  memory->destroy(nH);
pair_airebo.cpp:    memory->destroy(setflag);
pair_airebo.cpp:    memory->destroy(cutsq);
pair_airebo.cpp:    memory->destroy(cutghost);
pair_airebo.cpp:    memory->destroy(cutljsq);
pair_airebo.cpp:    memory->destroy(lj1);
pair_airebo.cpp:    memory->destroy(lj2);
pair_airebo.cpp:    memory->destroy(lj3);
pair_airebo.cpp:    memory->destroy(lj4);
pair_airebo.cpp:  memory->create(setflag,n+1,n+1,"pair:setflag");
pair_airebo.cpp:  memory->create(cutsq,n+1,n+1,"pair:cutsq");
pair_airebo.cpp:  memory->create(cutghost,n+1,n+1,"pair:cutghost");
pair_airebo.cpp:  memory->create(cutljsq,2,2,"pair:cutljsq");
pair_airebo.cpp:  memory->create(lj1,2,2,"pair:lj1");
pair_airebo.cpp:  memory->create(lj2,2,2,"pair:lj2");
pair_airebo.cpp:  memory->create(lj3,2,2,"pair:lj3");
pair_airebo.cpp:  memory->create(lj4,2,2,"pair:lj4");
pair_airebo.cpp:    memory->destroy(REBO_numneigh);
pair_airebo.cpp:    memory->sfree(REBO_firstneigh);
pair_airebo.cpp:    memory->destroy(nC);
pair_airebo.cpp:    memory->destroy(nH);
pair_airebo.cpp:    memory->create(REBO_numneigh,maxlocal,"AIREBO:numneigh");
pair_airebo.cpp:    REBO_firstneigh = (int **) memory->smalloc(maxlocal*sizeof(int *),
pair_airebo.cpp:    memory->create(nC,maxlocal,"AIREBO:nC");
pair_airebo.cpp:    memory->create(nH,maxlocal,"AIREBO:nH");
pair_airebo.cpp:    memory->srealloc(pages,maxpage*sizeof(int *),"AIREBO:pages");
pair_airebo.cpp:    memory->create(pages[i],pgsize,"AIREBO:pages[i]");
pair_beck.cpp:    memory->destroy(setflag);
pair_beck.cpp:    memory->destroy(cutsq);
pair_beck.cpp:    memory->destroy(cut);
pair_beck.cpp:    memory->destroy(AA);
pair_beck.cpp:    memory->destroy(BB);
pair_beck.cpp:    memory->destroy(aa);
pair_beck.cpp:    memory->destroy(alpha);
pair_beck.cpp:    memory->destroy(beta);
pair_beck.cpp:  memory->create(setflag,n+1,n+1,"pair:setflag");
pair_beck.cpp:  memory->create(cutsq,n+1,n+1,"pair:cutsq");
pair_beck.cpp:  memory->create(cut,n+1,n+1,"pair:cut");
pair_beck.cpp:  memory->create(AA,n+1,n+1,"pair:AA");
pair_beck.cpp:  memory->create(BB,n+1,n+1,"pair:BB");
pair_beck.cpp:  memory->create(aa,n+1,n+1,"pair:aa");
pair_beck.cpp:  memory->create(alpha,n+1,n+1,"pair:alpha");
pair_beck.cpp:  memory->create(beta,n+1,n+1,"pair:beta");
pair_bop.cpp:    if (otfly==0) memory->destroy(cos_index);
pair_bop.cpp:    memory->destroy(BOP_index);
pair_bop.cpp:    memory->destroy(rcut);
pair_bop.cpp:    memory->destroy(dr);
pair_bop.cpp:    memory->destroy(rdr);
pair_bop.cpp:    memory->destroy(setflag);
pair_bop.cpp:    memory->destroy(cutsq);
pair_bop.cpp:    memory->destroy(cutghost);
pair_bop.cpp:    memory->destroy(pBetaS);
pair_bop.cpp:    memory->destroy(pBetaS1);
pair_bop.cpp:    memory->destroy(pBetaS2);
pair_bop.cpp:    memory->destroy(pBetaS3);
pair_bop.cpp:    memory->destroy(pBetaS4);
pair_bop.cpp:    memory->destroy(pBetaS5);
pair_bop.cpp:    memory->destroy(pBetaS6);
pair_bop.cpp:    memory->destroy(pBetaP);
pair_bop.cpp:    memory->destroy(pBetaP1);
pair_bop.cpp:    memory->destroy(pBetaP2);
pair_bop.cpp:    memory->destroy(pBetaP3);
pair_bop.cpp:    memory->destroy(pBetaP4);
pair_bop.cpp:    memory->destroy(pBetaP5);
pair_bop.cpp:    memory->destroy(pBetaP6);
pair_bop.cpp:    memory->destroy(pRepul);
pair_bop.cpp:    memory->destroy(pRepul1);
pair_bop.cpp:    memory->destroy(pRepul2);
pair_bop.cpp:    memory->destroy(pRepul3);
pair_bop.cpp:    memory->destroy(pRepul4);
pair_bop.cpp:    memory->destroy(pRepul5);
pair_bop.cpp:    memory->destroy(pRepul6);
pair_bop.cpp:    memory->destroy(FsigBO);
pair_bop.cpp:    memory->destroy(FsigBO1);
pair_bop.cpp:    memory->destroy(FsigBO2);
pair_bop.cpp:    memory->destroy(FsigBO3);
pair_bop.cpp:    memory->destroy(FsigBO4);
pair_bop.cpp:    memory->destroy(FsigBO5);
pair_bop.cpp:    memory->destroy(FsigBO6);
pair_bop.cpp:      memory->destroy(pi_a);
pair_bop.cpp:      memory->destroy(pro_delta);
pair_bop.cpp:      memory->destroy(pi_delta);
pair_bop.cpp:      memory->destroy(pi_p);
pair_bop.cpp:      memory->destroy(pi_c);
pair_bop.cpp:      memory->destroy(sigma_r0);
pair_bop.cpp:      memory->destroy(pi_r0);
pair_bop.cpp:      memory->destroy(phi_r0);
pair_bop.cpp:      memory->destroy(sigma_rc);
pair_bop.cpp:      memory->destroy(pi_rc);
pair_bop.cpp:      memory->destroy(phi_rc);
pair_bop.cpp:      memory->destroy(r1);
pair_bop.cpp:      memory->destroy(sigma_beta0);
pair_bop.cpp:      memory->destroy(pi_beta0);
pair_bop.cpp:      memory->destroy(phi0);
pair_bop.cpp:      memory->destroy(sigma_n);
pair_bop.cpp:      memory->destroy(pi_n);
pair_bop.cpp:      memory->destroy(phi_m);
pair_bop.cpp:      memory->destroy(sigma_nc);
pair_bop.cpp:      memory->destroy(pi_nc);
pair_bop.cpp:      memory->destroy(phi_nc);
pair_bop.cpp:      memory->destroy(pro);
pair_bop.cpp:      memory->destroy(sigma_delta);
pair_bop.cpp:      memory->destroy(sigma_c);
pair_bop.cpp:      memory->destroy(sigma_a);
pair_bop.cpp:      memory->destroy(sigma_g0);
pair_bop.cpp:      memory->destroy(sigma_g1);
pair_bop.cpp:      memory->destroy(sigma_g2);
pair_bop.cpp:      memory->destroy(sigma_g3);
pair_bop.cpp:      memory->destroy(sigma_g4);
pair_bop.cpp:      memory->destroy(sigma_f);
pair_bop.cpp:      memory->destroy(sigma_k);
pair_bop.cpp:      memory->destroy(small3);
pair_bop.cpp:      memory->destroy(pi_a);
pair_bop.cpp:      memory->destroy(pro_delta);
pair_bop.cpp:      memory->destroy(pi_delta);
pair_bop.cpp:      memory->destroy(pi_p);
pair_bop.cpp:      memory->destroy(pi_c);
pair_bop.cpp:      memory->destroy(r1);
pair_bop.cpp:      memory->destroy(pro);
pair_bop.cpp:      memory->destroy(sigma_delta);
pair_bop.cpp:      memory->destroy(sigma_c);
pair_bop.cpp:      memory->destroy(sigma_a);
pair_bop.cpp:      memory->destroy(sigma_g0);
pair_bop.cpp:      memory->destroy(sigma_g1);
pair_bop.cpp:      memory->destroy(sigma_g2);
pair_bop.cpp:      memory->destroy(sigma_f);
pair_bop.cpp:      memory->destroy(sigma_k);
pair_bop.cpp:      memory->destroy(small3);
pair_bop.cpp:  memory->create(rcut,npairs,"BOP:rcut");
pair_bop.cpp:  memory->create(dr,npairs,"BOP:dr");
pair_bop.cpp:  memory->create(rdr,npairs,"BOP:dr");
pair_bop.cpp:  memory->create(setflag,n+1,n+1,"pair:setflag");
pair_bop.cpp:  memory->create(cutsq,n+1,n+1,"pair:cutsq");
pair_bop.cpp:  memory->create(cutghost,n+1,n+1,"pair:cutghost");
pair_bop.cpp:  memory->create(pBetaS,npairs,nr,"BOP:pBetaS");
pair_bop.cpp:  memory->create(pBetaS1,npairs,nr,"BOP:pBetaS1");
pair_bop.cpp:  memory->create(pBetaS2,npairs,nr,"BOP:pBetaS2");
pair_bop.cpp:  memory->create(pBetaS3,npairs,nr,"BOP:pBetaS3");
pair_bop.cpp:  memory->create(pBetaS4,npairs,nr,"BOP:pBetaS4");
pair_bop.cpp:  memory->create(pBetaS5,npairs,nr,"BOP:pBetaS5");
pair_bop.cpp:  memory->create(pBetaS6,npairs,nr,"BOP:pBetaS6");
pair_bop.cpp:  memory->create(pBetaP,npairs,nr,"BOP:pBetaP");
pair_bop.cpp:  memory->create(pBetaP1,npairs,nr,"BOP:pBetaP1");
pair_bop.cpp:  memory->create(pBetaP2,npairs,nr,"BOP:pBetaP2");
pair_bop.cpp:  memory->create(pBetaP3,npairs,nr,"BOP:pBetaP3");
pair_bop.cpp:  memory->create(pBetaP4,npairs,nr,"BOP:pBetaP4");
pair_bop.cpp:  memory->create(pBetaP5,npairs,nr,"BOP:pBetaP5");
pair_bop.cpp:  memory->create(pBetaP6,npairs,nr,"BOP:pBetaP6");
pair_bop.cpp:  memory->create(pRepul,npairs,nr,"BOP:pRepul");
pair_bop.cpp:  memory->create(pRepul1,npairs,nr,"BOP:pRepul1");
pair_bop.cpp:  memory->create(pRepul2,npairs,nr,"BOP:pRepul2");
pair_bop.cpp:  memory->create(pRepul3,npairs,nr,"BOP:pRepul3");
pair_bop.cpp:  memory->create(pRepul4,npairs,nr,"BOP:pRepul4");
pair_bop.cpp:  memory->create(pRepul5,npairs,nr,"BOP:pRepul5");
pair_bop.cpp:  memory->create(pRepul6,npairs,nr,"BOP:pRepul6");
pair_bop.cpp:  memory->create(FsigBO,npairs,nBOt,"BOP:FsigBO");
pair_bop.cpp:  memory->create(FsigBO1,npairs,nBOt,"BOP:FsigBO1");
pair_bop.cpp:  memory->create(FsigBO2,npairs,nBOt,"BOP:FsigBO2");
pair_bop.cpp:  memory->create(FsigBO3,npairs,nBOt,"BOP:FsigBO3");
pair_bop.cpp:  memory->create(FsigBO4,npairs,nBOt,"BOP:FsigBO4");
pair_bop.cpp:  memory->create(FsigBO5,npairs,nBOt,"BOP:FsigBO5");
pair_bop.cpp:  memory->create(FsigBO6,npairs,nBOt,"BOP:FsigBO6");
pair_bop.cpp:    memory->create (BOP_index,nall,"BOP_index");
pair_bop.cpp:    if (otfly==0) memory->create (cos_index,nall,"cos_index");
pair_bop.cpp:    memory->grow (BOP_index,nall,"BOP_index");
pair_bop.cpp:    if (otfly==0) memory->grow (cos_index,nall,"cos_index");
pair_bop.cpp:  memory->create(pi_a,npairs,"BOP:pi_a");
pair_bop.cpp:  memory->create(pro_delta,bop_types,"BOP:pro_delta");
pair_bop.cpp:  memory->create(pi_delta,npairs,"BOP:pi_delta");
pair_bop.cpp:  memory->create(pi_p,bop_types,"BOP:pi_p");
pair_bop.cpp:  memory->create(pi_c,npairs,"BOP:pi_c");
pair_bop.cpp:  memory->create(sigma_r0,npairs,"BOP:sigma_r0");
pair_bop.cpp:  memory->create(pi_r0,npairs,"BOP:pi_r0");
pair_bop.cpp:  memory->create(phi_r0,npairs,"BOP:phi_r0");
pair_bop.cpp:  memory->create(sigma_rc,npairs,"BOP:sigma_rc");
pair_bop.cpp:  memory->create(pi_rc,npairs,"BOP:pi_rc");
pair_bop.cpp:  memory->create(phi_rc,npairs,"BOP:phi_rc");
pair_bop.cpp:  memory->create(r1,npairs,"BOP:r1");
pair_bop.cpp:  memory->create(sigma_beta0,npairs,"BOP:sigma_beta0");
pair_bop.cpp:  memory->create(pi_beta0,npairs,"BOP:pi_beta0");
pair_bop.cpp:  memory->create(phi0,npairs,"BOP:phi0");
pair_bop.cpp:  memory->create(sigma_n,npairs,"BOP:sigma_n");
pair_bop.cpp:  memory->create(pi_n,npairs,"BOP:pi_n");
pair_bop.cpp:  memory->create(phi_m,npairs,"BOP:phi_m");
pair_bop.cpp:  memory->create(sigma_nc,npairs,"BOP:sigma_nc");
pair_bop.cpp:  memory->create(pi_nc,npairs,"BOP:pi_nc");
pair_bop.cpp:  memory->create(phi_nc,npairs,"BOP:phi_nc");
pair_bop.cpp:  memory->create(pro,bop_types,"BOP:pro");
pair_bop.cpp:  memory->create(sigma_delta,npairs,"BOP:sigma_delta");
pair_bop.cpp:  memory->create(sigma_c,npairs,"BOP:sigma_c");
pair_bop.cpp:  memory->create(sigma_a,npairs,"BOP:sigma_a");
pair_bop.cpp:  memory->create(sigma_g0,bop_types
pair_bop.cpp:  memory->create(sigma_g1,bop_types
pair_bop.cpp:  memory->create(sigma_g2,bop_types
pair_bop.cpp:  memory->create(sigma_g3,bop_types
pair_bop.cpp:  memory->create(sigma_g4,bop_types
pair_bop.cpp:  memory->create(sigma_f,npairs,"BOP:sigma_f");
pair_bop.cpp:  memory->create(sigma_k,npairs,"BOP:sigma_k");
pair_bop.cpp:  memory->create(small3,npairs,"BOP:small3");
pair_bop.cpp:  memory->create(pi_a,npairs,"BOP:pi_a");
pair_bop.cpp:  memory->create(pro_delta,bop_types,"BOP:pro_delta");
pair_bop.cpp:  memory->create(pi_delta,npairs,"BOP:pi_delta");
pair_bop.cpp:  memory->create(pi_p,bop_types,"BOP:pi_p");
pair_bop.cpp:  memory->create(pi_c,npairs,"BOP:pi_c");
pair_bop.cpp:  memory->create(r1,npairs,"BOP:r1");
pair_bop.cpp:  memory->create(pro,bop_types,"BOP:pro");
pair_bop.cpp:  memory->create(sigma_delta,npairs,"BOP:sigma_delta");
pair_bop.cpp:  memory->create(sigma_c,npairs,"BOP:sigma_c");
pair_bop.cpp:  memory->create(sigma_a,npairs,"BOP:sigma_a");
pair_bop.cpp:  memory->create(sigma_g0,bop_types
pair_bop.cpp:  memory->create(sigma_g1,bop_types
pair_bop.cpp:  memory->create(sigma_g2,bop_types
pair_bop.cpp:  memory->create(sigma_f,npairs,"BOP:sigma_f");
pair_bop.cpp:  memory->create(sigma_k,npairs,"BOP:sigma_k");
pair_bop.cpp:  memory->create(small3,npairs,"BOP:small3");
pair_bop.cpp:  memory->create(itypeSigBk,neigh_total
pair_bop.cpp:  memory->create(nSigBk,neigh_total,"nSigBk");
pair_bop.cpp:  memory->create(sigB,neigh_total,"sigB");
pair_bop.cpp:  memory->create(sigB1,neigh_total,"sigB1");
pair_bop.cpp:  memory->create(itypePiBk,neigh_total
pair_bop.cpp:  memory->create(nPiBk,neigh_total,"nPiBk");
pair_bop.cpp:  memory->create(piB,neigh_total,"piB");
pair_bop.cpp:  memory->create(neigh_flag,neigh_total,"neigh_flag");
pair_bop.cpp:    memory->create(cosAng,cos_total,"BOP:cosAng");
pair_bop.cpp:    memory->create(dcAng,cos_total*2,3,2,"BOP:dcAng");
pair_bop.cpp:    memory->create(disij,3,neigh_total,"disij");
pair_bop.cpp:    memory->create(rij,neigh_total,"rij");
pair_bop.cpp:    memory->create(betaS,neigh_total,"betaS");
pair_bop.cpp:    memory->create(dBetaS,neigh_total,"dBetaS");
pair_bop.cpp:    memory->create(betaP,neigh_total,"betaP");
pair_bop.cpp:    memory->create(dBetaP,neigh_total,"dBetaP");
pair_bop.cpp:    memory->create(repul,neigh_total,"repul");
pair_bop.cpp:    memory->create(dRepul,neigh_total,"dRepul");
pair_bop.cpp:  memory->grow(itypeSigBk,neigh_total
pair_bop.cpp:  memory->grow(nSigBk,neigh_total,"nSigBk");
pair_bop.cpp:  memory->grow(sigB,neigh_total,"sigB");
pair_bop.cpp:  memory->grow(sigB1,neigh_total,"sigB1");
pair_bop.cpp:  memory->grow(itypePiBk,neigh_total
pair_bop.cpp:  memory->grow(nPiBk,neigh_total,"nPiBk");
pair_bop.cpp:  memory->grow(piB,neigh_total,"piB");
pair_bop.cpp:  memory->grow(neigh_flag,neigh_total,"neigh_flag");
pair_bop.cpp:    memory->grow(cosAng,cos_total,"BOP:cosAng");
pair_bop.cpp:    memory->grow(dcAng,cos_total*2,3,2,"BOP:dcAng");
pair_bop.cpp:    memory->grow(disij,3,neigh_total,"disij");
pair_bop.cpp:    memory->grow(rij,neigh_total,"rij");
pair_bop.cpp:    memory->grow(betaS,neigh_total,"betaS");
pair_bop.cpp:    memory->grow(dBetaS,neigh_total,"dBetaS");
pair_bop.cpp:    memory->grow(betaP,neigh_total,"betaP");
pair_bop.cpp:    memory->grow(dBetaP,neigh_total,"dBetaP");
pair_bop.cpp:    memory->grow(repul,neigh_total,"repul");
pair_bop.cpp:    memory->grow(dRepul,neigh_total,"dRepul");
pair_bop.cpp:  memory->destroy(itypeSigBk);
pair_bop.cpp:  memory->destroy(nSigBk);
pair_bop.cpp:  memory->destroy(sigB);
pair_bop.cpp:  memory->destroy(sigB1);
pair_bop.cpp:  memory->destroy(itypePiBk);
pair_bop.cpp:  memory->destroy(nPiBk);
pair_bop.cpp:  memory->destroy(piB);
pair_bop.cpp:  memory->destroy(neigh_flag);
pair_bop.cpp:    memory->destroy(cosAng);
pair_bop.cpp:    memory->destroy(dcAng);
pair_bop.cpp:    memory->destroy(disij);
pair_bop.cpp:    memory->destroy(rij);
pair_bop.cpp:    memory->destroy(betaS);
pair_bop.cpp:    memory->destroy(dBetaS);
pair_bop.cpp:    memory->destroy(betaP);
pair_bop.cpp:    memory->destroy(dBetaP);
pair_bop.cpp:    memory->destroy(repul);
pair_bop.cpp:    memory->destroy(dRepul);
pair_bop.cpp:  bt_pi = (B_PI *) memory->smalloc(n_tot*sizeof(B_PI),"BOP:bt_pi");
pair_bop.cpp:  bt_sg = (B_SG *) memory->smalloc(n_tot*sizeof(B_SG),"BOP:bt_sg");
pair_bop.cpp:  memory->destroy(bt_pi);
pair_bop.cpp:  memory->destroy(bt_sg);
pair_bop.cpp:  bt_temp = (B_PI *) memory->smalloc(n1*sizeof(B_PI),"BOP:b_temp");
pair_bop.cpp:  memory->destroy(bt_pi);
pair_bop.cpp:  bt_pi = (B_PI *) memory->smalloc(n2*sizeof(B_PI),"BOP:bt_pi");
pair_bop.cpp:  memory->destroy(bt_temp);
pair_bop.cpp:  bt_temp = (B_SG *) memory->smalloc(n1*sizeof(B_SG),"BOP:bt_temp");
pair_bop.cpp:  memory->destroy(bt_sg);
pair_bop.cpp:  bt_sg = (B_SG *) memory->smalloc(n2*sizeof(B_SG),"BOP:bt_sg");
pair_bop.cpp:  memory->destroy(bt_temp);
pair_born_coul_long.cpp:    memory->destroy(setflag);
pair_born_coul_long.cpp:    memory->destroy(cutsq);
pair_born_coul_long.cpp:    memory->destroy(cut_lj);
pair_born_coul_long.cpp:    memory->destroy(cut_ljsq);
pair_born_coul_long.cpp:    memory->destroy(a);
pair_born_coul_long.cpp:    memory->destroy(rho);
pair_born_coul_long.cpp:    memory->destroy(sigma);
pair_born_coul_long.cpp:    memory->destroy(c);
pair_born_coul_long.cpp:    memory->destroy(d);
pair_born_coul_long.cpp:    memory->destroy(rhoinv);
pair_born_coul_long.cpp:    memory->destroy(born1);
pair_born_coul_long.cpp:    memory->destroy(born2);
pair_born_coul_long.cpp:    memory->destroy(born3);
pair_born_coul_long.cpp:    memory->destroy(offset);
pair_born_coul_long.cpp:  memory->create(setflag,n+1,n+1,"pair:setflag");
pair_born_coul_long.cpp:  memory->create(cutsq,n+1,n+1,"pair:cutsq");
pair_born_coul_long.cpp:  memory->create(cut_lj,n+1,n+1,"pair:cut_lj");
pair_born_coul_long.cpp:  memory->create(cut_ljsq,n+1,n+1,"pair:cut_ljsq");
pair_born_coul_long.cpp:  memory->create(a,n+1,n+1,"pair:a");
pair_born_coul_long.cpp:  memory->create(rho,n+1,n+1,"pair:rho");
pair_born_coul_long.cpp:  memory->create(sigma,n+1,n+1,"pair:sigma");
pair_born_coul_long.cpp:  memory->create(c,n+1,n+1,"pair:c");
pair_born_coul_long.cpp:  memory->create(d,n+1,n+1,"pair:d");
pair_born_coul_long.cpp:  memory->create(rhoinv,n+1,n+1,"pair:rhoinv");
pair_born_coul_long.cpp:  memory->create(born1,n+1,n+1,"pair:born1");
pair_born_coul_long.cpp:  memory->create(born2,n+1,n+1,"pair:born2");
pair_born_coul_long.cpp:  memory->create(born3,n+1,n+1,"pair:born3");
pair_born_coul_long.cpp:  memory->create(offset,n+1,n+1,"pair:offset");
pair_born_coul_wolf.cpp:    memory->destroy(setflag);
pair_born_coul_wolf.cpp:    memory->destroy(cutsq);
pair_born_coul_wolf.cpp:    memory->destroy(cut_lj);
pair_born_coul_wolf.cpp:    memory->destroy(cut_ljsq);
pair_born_coul_wolf.cpp:    memory->destroy(a);
pair_born_coul_wolf.cpp:    memory->destroy(rho);
pair_born_coul_wolf.cpp:    memory->destroy(sigma);
pair_born_coul_wolf.cpp:    memory->destroy(c);
pair_born_coul_wolf.cpp:    memory->destroy(d);
pair_born_coul_wolf.cpp:    memory->destroy(rhoinv);
pair_born_coul_wolf.cpp:    memory->destroy(born1);
pair_born_coul_wolf.cpp:    memory->destroy(born2);
pair_born_coul_wolf.cpp:    memory->destroy(born3);
pair_born_coul_wolf.cpp:    memory->destroy(offset);
pair_born_coul_wolf.cpp:  memory->create(setflag,n+1,n+1,"pair:setflag");
pair_born_coul_wolf.cpp:  memory->create(cutsq,n+1,n+1,"pair:cutsq");
pair_born_coul_wolf.cpp:  memory->create(cut_lj,n+1,n+1,"pair:cut_lj");
pair_born_coul_wolf.cpp:  memory->create(cut_ljsq,n+1,n+1,"pair:cut_ljsq");
pair_born_coul_wolf.cpp:  memory->create(a,n+1,n+1,"pair:a");
pair_born_coul_wolf.cpp:  memory->create(rho,n+1,n+1,"pair:rho");
pair_born_coul_wolf.cpp:  memory->create(sigma,n+1,n+1,"pair:sigma");
pair_born_coul_wolf.cpp:  memory->create(c,n+1,n+1,"pair:c");
pair_born_coul_wolf.cpp:  memory->create(d,n+1,n+1,"pair:d");
pair_born_coul_wolf.cpp:  memory->create(rhoinv,n+1,n+1,"pair:rhoinv");
pair_born_coul_wolf.cpp:  memory->create(born1,n+1,n+1,"pair:born1");
pair_born_coul_wolf.cpp:  memory->create(born2,n+1,n+1,"pair:born2");
pair_born_coul_wolf.cpp:  memory->create(born3,n+1,n+1,"pair:born3");
pair_born_coul_wolf.cpp:  memory->create(offset,n+1,n+1,"pair:offset");
pair_born.cpp:    memory->destroy(setflag);
pair_born.cpp:    memory->destroy(cutsq);
pair_born.cpp:    memory->destroy(cut);
pair_born.cpp:    memory->destroy(a);
pair_born.cpp:    memory->destroy(rho);
pair_born.cpp:    memory->destroy(sigma);
pair_born.cpp:    memory->destroy(c);
pair_born.cpp:    memory->destroy(d);
pair_born.cpp:    memory->destroy(rhoinv);
pair_born.cpp:    memory->destroy(born1);
pair_born.cpp:    memory->destroy(born2);
pair_born.cpp:    memory->destroy(born3);
pair_born.cpp:    memory->destroy(offset);
pair_born.cpp:  memory->create(setflag,n+1,n+1,"pair:setflag");
pair_born.cpp:  memory->create(cutsq,n+1,n+1,"pair:cutsq");
pair_born.cpp:  memory->create(cut,n+1,n+1,"pair:cut");
pair_born.cpp:  memory->create(a,n+1,n+1,"pair:a");
pair_born.cpp:  memory->create(rho,n+1,n+1,"pair:rho");
pair_born.cpp:  memory->create(sigma,n+1,n+1,"pair:sigma");
pair_born.cpp:  memory->create(c,n+1,n+1,"pair:c");
pair_born.cpp:  memory->create(d,n+1,n+1,"pair:d");
pair_born.cpp:  memory->create(rhoinv,n+1,n+1,"pair:rhoinv");
pair_born.cpp:  memory->create(born1,n+1,n+1,"pair:born1");
pair_born.cpp:  memory->create(born2,n+1,n+1,"pair:born2");
pair_born.cpp:  memory->create(born3,n+1,n+1,"pair:born3");
pair_born.cpp:  memory->create(offset,n+1,n+1,"pair:offset");
pair_buck_coul_cut.cpp:    memory->destroy(setflag);
pair_buck_coul_cut.cpp:    memory->destroy(cutsq);
pair_buck_coul_cut.cpp:    memory->destroy(cut_lj);
pair_buck_coul_cut.cpp:    memory->destroy(cut_ljsq);
pair_buck_coul_cut.cpp:    memory->destroy(cut_coul);
pair_buck_coul_cut.cpp:    memory->destroy(cut_coulsq);
pair_buck_coul_cut.cpp:    memory->destroy(a);
pair_buck_coul_cut.cpp:    memory->destroy(rho);
pair_buck_coul_cut.cpp:    memory->destroy(c);
pair_buck_coul_cut.cpp:    memory->destroy(rhoinv);
pair_buck_coul_cut.cpp:    memory->destroy(buck1);
pair_buck_coul_cut.cpp:    memory->destroy(buck2);
pair_buck_coul_cut.cpp:    memory->destroy(offset);
pair_buck_coul_cut.cpp:  memory->create(setflag,n+1,n+1,"pair:setflag");
pair_buck_coul_cut.cpp:  memory->create(cutsq,n+1,n+1,"pair:cutsq");
pair_buck_coul_cut.cpp:  memory->create(cut_lj,n+1,n+1,"pair:cut_lj");
pair_buck_coul_cut.cpp:  memory->create(cut_ljsq,n+1,n+1,"pair:cut_ljsq");
pair_buck_coul_cut.cpp:  memory->create(cut_coul,n+1,n+1,"pair:cut_coul");
pair_buck_coul_cut.cpp:  memory->create(cut_coulsq,n+1,n+1,"pair:cut_coulsq");
pair_buck_coul_cut.cpp:  memory->create(a,n+1,n+1,"pair:a");
pair_buck_coul_cut.cpp:  memory->create(rho,n+1,n+1,"pair:rho");
pair_buck_coul_cut.cpp:  memory->create(c,n+1,n+1,"pair:c");
pair_buck_coul_cut.cpp:  memory->create(rhoinv,n+1,n+1,"pair:rhoinv");
pair_buck_coul_cut.cpp:  memory->create(buck1,n+1,n+1,"pair:buck1");
pair_buck_coul_cut.cpp:  memory->create(buck2,n+1,n+1,"pair:buck2");
pair_buck_coul_cut.cpp:  memory->create(offset,n+1,n+1,"pair:offset");
pair_buck_coul_long.cpp:    memory->destroy(setflag);
pair_buck_coul_long.cpp:    memory->destroy(cutsq);
pair_buck_coul_long.cpp:    memory->destroy(cut_lj);
pair_buck_coul_long.cpp:    memory->destroy(cut_ljsq);
pair_buck_coul_long.cpp:    memory->destroy(a);
pair_buck_coul_long.cpp:    memory->destroy(rho);
pair_buck_coul_long.cpp:    memory->destroy(c);
pair_buck_coul_long.cpp:    memory->destroy(rhoinv);
pair_buck_coul_long.cpp:    memory->destroy(buck1);
pair_buck_coul_long.cpp:    memory->destroy(buck2);
pair_buck_coul_long.cpp:    memory->destroy(offset);
pair_buck_coul_long.cpp:  memory->create(setflag,n+1,n+1,"pair:setflag");
pair_buck_coul_long.cpp:  memory->create(cutsq,n+1,n+1,"pair:cutsq");
pair_buck_coul_long.cpp:  memory->create(cut_lj,n+1,n+1,"pair:cut_lj");
pair_buck_coul_long.cpp:  memory->create(cut_ljsq,n+1,n+1,"pair:cut_ljsq");
pair_buck_coul_long.cpp:  memory->create(a,n+1,n+1,"pair:a");
pair_buck_coul_long.cpp:  memory->create(rho,n+1,n+1,"pair:rho");
pair_buck_coul_long.cpp:  memory->create(c,n+1,n+1,"pair:c");
pair_buck_coul_long.cpp:  memory->create(rhoinv,n+1,n+1,"pair:rhoinv");
pair_buck_coul_long.cpp:  memory->create(buck1,n+1,n+1,"pair:buck1");
pair_buck_coul_long.cpp:  memory->create(buck2,n+1,n+1,"pair:buck2");
pair_buck_coul_long.cpp:  memory->create(offset,n+1,n+1,"pair:offset");
pair_buck.cpp:    memory->destroy(setflag);
pair_buck.cpp:    memory->destroy(cutsq);
pair_buck.cpp:    memory->destroy(cut);
pair_buck.cpp:    memory->destroy(a);
pair_buck.cpp:    memory->destroy(rho);
pair_buck.cpp:    memory->destroy(c);
pair_buck.cpp:    memory->destroy(rhoinv);
pair_buck.cpp:    memory->destroy(buck1);
pair_buck.cpp:    memory->destroy(buck2);
pair_buck.cpp:    memory->destroy(offset);
pair_buck.cpp:  memory->create(setflag,n+1,n+1,"pair:setflag");
pair_buck.cpp:  memory->create(cutsq,n+1,n+1,"pair:cutsq");
pair_buck.cpp:  memory->create(cut,n+1,n+1,"pair:cut_lj");
pair_buck.cpp:  memory->create(a,n+1,n+1,"pair:a");
pair_buck.cpp:  memory->create(rho,n+1,n+1,"pair:rho");
pair_buck.cpp:  memory->create(c,n+1,n+1,"pair:c");
pair_buck.cpp:  memory->create(rhoinv,n+1,n+1,"pair:rhoinv");
pair_buck.cpp:  memory->create(buck1,n+1,n+1,"pair:buck1");
pair_buck.cpp:  memory->create(buck2,n+1,n+1,"pair:buck2");
pair_buck.cpp:  memory->create(offset,n+1,n+1,"pair:offset");
pair_buck_long_coul_long.cpp:    memory->destroy(setflag);
pair_buck_long_coul_long.cpp:    memory->destroy(cutsq);
pair_buck_long_coul_long.cpp:    memory->destroy(cut_buck_read);
pair_buck_long_coul_long.cpp:    memory->destroy(cut_buck);
pair_buck_long_coul_long.cpp:    memory->destroy(cut_bucksq);
pair_buck_long_coul_long.cpp:    memory->destroy(buck_a_read);
pair_buck_long_coul_long.cpp:    memory->destroy(buck_a);
pair_buck_long_coul_long.cpp:    memory->destroy(buck_c_read);
pair_buck_long_coul_long.cpp:    memory->destroy(buck_c);
pair_buck_long_coul_long.cpp:    memory->destroy(buck_rho_read);
pair_buck_long_coul_long.cpp:    memory->destroy(buck_rho);
pair_buck_long_coul_long.cpp:    memory->destroy(buck1);
pair_buck_long_coul_long.cpp:    memory->destroy(buck2);
pair_buck_long_coul_long.cpp:    memory->destroy(rhoinv);
pair_buck_long_coul_long.cpp:    memory->destroy(offset);
pair_buck_long_coul_long.cpp:  memory->create(setflag,n+1,n+1,"pair:setflag");
pair_buck_long_coul_long.cpp:  memory->create(cutsq,n+1,n+1,"pair:cutsq");
pair_buck_long_coul_long.cpp:  memory->create(cut_buck_read,n+1,n+1,"pair:cut_buck_read");
pair_buck_long_coul_long.cpp:  memory->create(cut_buck,n+1,n+1,"pair:cut_buck");
pair_buck_long_coul_long.cpp:  memory->create(cut_bucksq,n+1,n+1,"pair:cut_bucksq");
pair_buck_long_coul_long.cpp:  memory->create(buck_a_read,n+1,n+1,"pair:buck_a_read");
pair_buck_long_coul_long.cpp:  memory->create(buck_a,n+1,n+1,"pair:buck_a");
pair_buck_long_coul_long.cpp:  memory->create(buck_c_read,n+1,n+1,"pair:buck_c_read");
pair_buck_long_coul_long.cpp:  memory->create(buck_c,n+1,n+1,"pair:buck_c");
pair_buck_long_coul_long.cpp:  memory->create(buck_rho_read,n+1,n+1,"pair:buck_rho_read");
pair_buck_long_coul_long.cpp:  memory->create(buck_rho,n+1,n+1,"pair:buck_rho");
pair_buck_long_coul_long.cpp:  memory->create(buck1,n+1,n+1,"pair:buck1");
pair_buck_long_coul_long.cpp:  memory->create(buck2,n+1,n+1,"pair:buck2");
pair_buck_long_coul_long.cpp:  memory->create(rhoinv,n+1,n+1,"pair:rhoinv");
pair_buck_long_coul_long.cpp:  memory->create(offset,n+1,n+1,"pair:offset");
pair_buck_long_coul_long.cpp:  memory->create(rtable,ntable,"pair:rtable");
pair_buck_long_coul_long.cpp:  memory->create(ftable,ntable,"pair:ftable");
pair_buck_long_coul_long.cpp:  memory->create(ctable,ntable,"pair:ctable");
pair_buck_long_coul_long.cpp:  memory->create(etable,ntable,"pair:etable");
pair_buck_long_coul_long.cpp:  memory->create(drtable,ntable,"pair:drtable");
pair_buck_long_coul_long.cpp:  memory->create(dftable,ntable,"pair:dftable");
pair_buck_long_coul_long.cpp:  memory->create(dctable,ntable,"pair:dctable");
pair_buck_long_coul_long.cpp:  memory->create(detable,ntable,"pair:detable");
pair_buck_long_coul_long.cpp:    memory->create(vtable,ntable,"pair:vtable");
pair_buck_long_coul_long.cpp:    memory->create(ptable,ntable,"pair:ptable");
pair_buck_long_coul_long.cpp:    memory->create(dvtable,ntable,"pair:dvtable");
pair_buck_long_coul_long.cpp:    memory->create(dptable,ntable,"pair:dptable");
pair_buck_long_coul_long.cpp:  memory->destroy(rtable);
pair_buck_long_coul_long.cpp:  memory->destroy(drtable);
pair_buck_long_coul_long.cpp:  memory->destroy(ftable);
pair_buck_long_coul_long.cpp:  memory->destroy(dftable);
pair_buck_long_coul_long.cpp:  memory->destroy(ctable);
pair_buck_long_coul_long.cpp:  memory->destroy(dctable);
pair_buck_long_coul_long.cpp:  memory->destroy(etable);
pair_buck_long_coul_long.cpp:  memory->destroy(detable);
pair_buck_long_coul_long.cpp:  memory->destroy(vtable);
pair_buck_long_coul_long.cpp:  memory->destroy(dvtable);
pair_buck_long_coul_long.cpp:  memory->destroy(ptable);
pair_buck_long_coul_long.cpp:  memory->destroy(dptable);
pair_comb.cpp:  memory->destroy(NCo);
pair_comb.cpp:  memory->sfree(params);
pair_comb.cpp:  memory->destroy(elem2param);
pair_comb.cpp:  memory->destroy(intype);
pair_comb.cpp:  memory->destroy(fafb);
pair_comb.cpp:  memory->destroy(dfafb);
pair_comb.cpp:  memory->destroy(ddfafb);
pair_comb.cpp:  memory->destroy(phin);
pair_comb.cpp:  memory->destroy(dphin);
pair_comb.cpp:  memory->destroy(erpaw);
pair_comb.cpp:  memory->destroy(bbij);
pair_comb.cpp:  memory->destroy(sht_num);
pair_comb.cpp:  memory->destroy(sht_first);
pair_comb.cpp:    memory->destroy(setflag);
pair_comb.cpp:    memory->destroy(cutsq);
pair_comb.cpp: memory->create(setflag,n+1,n+1,"pair:setflag");
pair_comb.cpp: memory->create(cutsq,n+1,n+1,"pair:cutsq");
pair_comb.cpp:  memory->sfree(params);
pair_comb.cpp:      params = (Param *) memory->srealloc(params,maxparam*sizeof(Param),
pair_comb.cpp:  memory->destroy(elem2param);
pair_comb.cpp:  memory->create(elem2param,nelements,nelements,nelements,"pair:elem2param");
pair_comb.cpp:  memory->create(intype,n,n,"pair:intype");
pair_comb.cpp:  memory->create(fafb,ncoul,nntypes,"pair:fafb");
pair_comb.cpp:  memory->create(dfafb,ncoul,nntypes,"pair:dfafb");
pair_comb.cpp:  memory->create(ddfafb,ncoul,nntypes,"pair:ddfafb");
pair_comb.cpp:  memory->create(phin,ncoul,nntypes,"pair:phin");
pair_comb.cpp:  memory->create(dphin,ncoul,nntypes,"pair:dphin");
pair_comb.cpp:  memory->create(erpaw,25000,2,"pair:erpaw");
pair_comb.cpp:  memory->create(NCo,nmax,"pair:NCo");
pair_comb.cpp:  memory->create(bbij,nmax,MAXNEIGH,"pair:bbij");
pair_comb.cpp:  memory->create(sht_num,nmax,"pair:sht_num");
pair_comb.cpp:  sht_first = (int **) memory->smalloc(nmax*sizeof(int *),
pair_comb.cpp:    memory->sfree(sht_first);
pair_comb.cpp:    sht_first = (int **) memory->smalloc(nmax*sizeof(int *),
pair_comb.cpp:    memory->grow(sht_num,nmax,"pair:sht_num");
pair_comb.cpp:    memory->grow(NCo,nmax,"pair:NCo");
pair_comb.cpp:    memory->grow(bbij,nmax,MAXNEIGH,"pair:bbij");
pair_comb.cpp:    memory->srealloc(pages,maxpage*sizeof(int *),"pair:pages");
pair_comb.cpp:    memory->create(pages[i],pgsize,"pair:pages[i]");
pair_coul_cut.cpp:    memory->destroy(setflag);
pair_coul_cut.cpp:    memory->destroy(cutsq);
pair_coul_cut.cpp:    memory->destroy(cut);
pair_coul_cut.cpp:    memory->destroy(scale);
pair_coul_cut.cpp:  memory->create(setflag,n+1,n+1,"pair:setflag");
pair_coul_cut.cpp:  memory->create(cutsq,n+1,n+1,"pair:cutsq");
pair_coul_cut.cpp:  memory->create(cut,n+1,n+1,"pair:cut");
pair_coul_cut.cpp:  memory->create(scale,n+1,n+1,"pair:scale");
pair_coul_dsf.cpp:    memory->destroy(setflag);
pair_coul_dsf.cpp:    memory->destroy(cutsq);
pair_coul_dsf.cpp:  memory->create(setflag,n+1,n+1,"pair:setflag");
pair_coul_dsf.cpp:  memory->create(cutsq,n+1,n+1,"pair:cutsq");
pair_coul_long.cpp:    memory->destroy(setflag);
pair_coul_long.cpp:    memory->destroy(cutsq);
pair_coul_long.cpp:    memory->destroy(scale);
pair_coul_long.cpp:  memory->create(setflag,n+1,n+1,"pair:setflag");
pair_coul_long.cpp:  memory->create(cutsq,n+1,n+1,"pair:cutsq");
pair_coul_long.cpp:  memory->create(scale,n+1,n+1,"pair:scale");
pair_coul_long.cpp:  memory->create(rtable,ntable,"pair:rtable");
pair_coul_long.cpp:  memory->create(ftable,ntable,"pair:ftable");
pair_coul_long.cpp:  memory->create(ctable,ntable,"pair:ctable");
pair_coul_long.cpp:  memory->create(etable,ntable,"pair:etable");
pair_coul_long.cpp:  memory->create(drtable,ntable,"pair:drtable");
pair_coul_long.cpp:  memory->create(dftable,ntable,"pair:dftable");
pair_coul_long.cpp:  memory->create(dctable,ntable,"pair:dctable");
pair_coul_long.cpp:  memory->create(detable,ntable,"pair:detable");
pair_coul_long.cpp:    memory->create(vtable,ntable,"pair:vtable");
pair_coul_long.cpp:    memory->create(ptable,ntable,"pair:ptable");
pair_coul_long.cpp:    memory->create(dvtable,ntable,"pair:dvtable");
pair_coul_long.cpp:    memory->create(dptable,ntable,"pair:dptable");
pair_coul_long.cpp:  memory->destroy(rtable);
pair_coul_long.cpp:  memory->destroy(drtable);
pair_coul_long.cpp:  memory->destroy(ftable);
pair_coul_long.cpp:  memory->destroy(dftable);
pair_coul_long.cpp:  memory->destroy(ctable);
pair_coul_long.cpp:  memory->destroy(dctable);
pair_coul_long.cpp:  memory->destroy(etable);
pair_coul_long.cpp:  memory->destroy(detable);
pair_coul_long.cpp:  memory->destroy(vtable);
pair_coul_long.cpp:  memory->destroy(dvtable);
pair_coul_long.cpp:  memory->destroy(ptable);
pair_coul_long.cpp:  memory->destroy(dptable);
pair_coul_msm.cpp:  memory->create(rtable,ntable,"pair:rtable");
pair_coul_msm.cpp:  memory->create(ftable,ntable,"pair:ftable");
pair_coul_msm.cpp:  memory->create(ctable,ntable,"pair:ctable");
pair_coul_msm.cpp:  memory->create(etable,ntable,"pair:etable");
pair_coul_msm.cpp:  memory->create(drtable,ntable,"pair:drtable");
pair_coul_msm.cpp:  memory->create(dftable,ntable,"pair:dftable");
pair_coul_msm.cpp:  memory->create(dctable,ntable,"pair:dctable");
pair_coul_msm.cpp:  memory->create(detable,ntable,"pair:detable");
pair_coul_msm.cpp:    memory->create(vtable,ntable,"pair:vtable");
pair_coul_msm.cpp:    memory->create(ptable,ntable,"pair:ptable");
pair_coul_msm.cpp:    memory->create(dvtable,ntable,"pair:dvtable");
pair_coul_msm.cpp:    memory->create(dptable,ntable,"pair:dptable");
pair_coul_wolf.cpp:    memory->destroy(setflag);
pair_coul_wolf.cpp:    memory->destroy(cutsq);
pair_coul_wolf.cpp:  memory->create(setflag,n+1,n+1,"pair:setflag");
pair_coul_wolf.cpp:  memory->create(cutsq,n+1,n+1,"pair:cutsq");
pair.cpp:  memory->destroy(eatom);
pair.cpp:  memory->destroy(vatom);
pair.cpp:    memory->destroy(eatom);
pair.cpp:    memory->create(eatom,comm->nthreads*maxeatom,"pair:eatom");
pair.cpp:    memory->destroy(vatom);
pair.cpp:    memory->create(vatom,comm->nthreads*maxvatom,6,"pair:vatom");
pair_dpd.cpp:    memory->destroy(setflag);
pair_dpd.cpp:    memory->destroy(cutsq);
pair_dpd.cpp:    memory->destroy(cut);
pair_dpd.cpp:    memory->destroy(a0);
pair_dpd.cpp:    memory->destroy(gamma);
pair_dpd.cpp:    memory->destroy(sigma);
pair_dpd.cpp:  memory->create(setflag,n+1,n+1,"pair:setflag");
pair_dpd.cpp:  memory->create(cutsq,n+1,n+1,"pair:cutsq");
pair_dpd.cpp:  memory->create(cut,n+1,n+1,"pair:cut");
pair_dpd.cpp:  memory->create(a0,n+1,n+1,"pair:a0");
pair_dpd.cpp:  memory->create(gamma,n+1,n+1,"pair:gamma");
pair_dpd.cpp:  memory->create(sigma,n+1,n+1,"pair:sigma");
pair_eam_alloy.cpp:    memory->destroy(setfl->frho);
pair_eam_alloy.cpp:    memory->destroy(setfl->rhor);
pair_eam_alloy.cpp:    memory->destroy(setfl->z2r);
pair_eam_alloy.cpp:  memory->create(file->frho,file->nelements,file->nrho+1,"pair:frho");
pair_eam_alloy.cpp:  memory->create(file->rhor,file->nelements,file->nr+1,"pair:rhor");
pair_eam_alloy.cpp:  memory->create(file->z2r,file->nelements,file->nelements,file->nr+1,
pair_eam_alloy.cpp:  memory->destroy(frho);
pair_eam_alloy.cpp:  memory->create(frho,nfrho,nrho+1,"pair:frho");
pair_eam_alloy.cpp:  memory->destroy(rhor);
pair_eam_alloy.cpp:  memory->create(rhor,nrhor,nr+1,"pair:rhor");
pair_eam_alloy.cpp:  memory->destroy(z2r);
pair_eam_alloy.cpp:  memory->create(z2r,nz2r,nr+1,"pair:z2r");
pair_eam.cpp:  memory->destroy(rho);
pair_eam.cpp:  memory->destroy(fp);
pair_eam.cpp:    memory->destroy(setflag);
pair_eam.cpp:    memory->destroy(cutsq);
pair_eam.cpp:    memory->destroy(type2rhor);
pair_eam.cpp:    memory->destroy(type2z2r);
pair_eam.cpp:      memory->destroy(funcfl[i].frho);
pair_eam.cpp:      memory->destroy(funcfl[i].rhor);
pair_eam.cpp:      memory->destroy(funcfl[i].zr);
pair_eam.cpp:    memory->sfree(funcfl);
pair_eam.cpp:    memory->destroy(setfl->frho);
pair_eam.cpp:    memory->destroy(setfl->rhor);
pair_eam.cpp:    memory->destroy(setfl->z2r);
pair_eam.cpp:    memory->destroy(fs->frho);
pair_eam.cpp:    memory->destroy(fs->rhor);
pair_eam.cpp:    memory->destroy(fs->z2r);
pair_eam.cpp:  memory->destroy(frho);
pair_eam.cpp:  memory->destroy(rhor);
pair_eam.cpp:  memory->destroy(z2r);
pair_eam.cpp:  memory->destroy(frho_spline);
pair_eam.cpp:  memory->destroy(rhor_spline);
pair_eam.cpp:  memory->destroy(z2r_spline);
pair_eam.cpp:    memory->destroy(rho);
pair_eam.cpp:    memory->destroy(fp);
pair_eam.cpp:    memory->create(rho,nmax,"pair:rho");
pair_eam.cpp:    memory->create(fp,nmax,"pair:fp");
pair_eam.cpp:  memory->create(setflag,n+1,n+1,"pair:setflag");
pair_eam.cpp:  memory->create(cutsq,n+1,n+1,"pair:cutsq");
pair_eam.cpp:  memory->create(type2rhor,n+1,n+1,"pair:type2rhor");
pair_eam.cpp:  memory->create(type2z2r,n+1,n+1,"pair:type2z2r");
pair_eam.cpp:      memory->srealloc(funcfl,nfuncfl*sizeof(Funcfl),"pair:funcfl");
pair_eam.cpp:  memory->create(file->frho,(file->nrho+1),"pair:frho");
pair_eam.cpp:  memory->create(file->rhor,(file->nr+1),"pair:rhor");
pair_eam.cpp:  memory->create(file->zr,(file->nr+1),"pair:zr");
pair_eam.cpp:  memory->destroy(frho);
pair_eam.cpp:  memory->create(frho,nfrho,nrho+1,"pair:frho");
pair_eam.cpp:  memory->destroy(rhor);
pair_eam.cpp:  memory->create(rhor,nrhor,nr+1,"pair:rhor");
pair_eam.cpp:  memory->destroy(z2r);
pair_eam.cpp:  memory->create(z2r,nz2r,nr+1,"pair:z2r");
pair_eam.cpp:  memory->destroy(frho_spline);
pair_eam.cpp:  memory->destroy(rhor_spline);
pair_eam.cpp:  memory->destroy(z2r_spline);
pair_eam.cpp:  memory->create(frho_spline,nfrho,nrho+1,7,"pair:frho");
pair_eam.cpp:  memory->create(rhor_spline,nrhor,nr+1,7,"pair:rhor");
pair_eam.cpp:  memory->create(z2r_spline,nz2r,nr+1,7,"pair:z2r");
pair_eam_fs.cpp:    memory->destroy(fs->frho);
pair_eam_fs.cpp:    memory->destroy(fs->rhor);
pair_eam_fs.cpp:    memory->destroy(fs->z2r);
pair_eam_fs.cpp:  memory->create(file->frho,file->nelements,file->nrho+1,
pair_eam_fs.cpp:  memory->create(file->rhor,file->nelements,file->nelements,
pair_eam_fs.cpp:  memory->create(file->z2r,file->nelements,file->nelements,
pair_eam_fs.cpp:  memory->destroy(frho);
pair_eam_fs.cpp:  memory->create(frho,nfrho,nrho+1,"pair:frho");
pair_eam_fs.cpp:  memory->destroy(rhor);
pair_eam_fs.cpp:  memory->create(rhor,nrhor,nr+1,"pair:rhor");
pair_eam_fs.cpp:  memory->destroy(z2r);
pair_eam_fs.cpp:  memory->create(z2r,nz2r,nr+1,"pair:z2r");
pair_eim.cpp:  memory->destroy(rho);
pair_eim.cpp:  memory->destroy(fp);
pair_eim.cpp:    memory->destroy(setflag);
pair_eim.cpp:    memory->destroy(cutsq);
pair_eim.cpp:    memory->destroy(type2Fij);
pair_eim.cpp:    memory->destroy(type2Gij);
pair_eim.cpp:    memory->destroy(type2phiij);
pair_eim.cpp:  memory->destroy(cutforcesq);
pair_eim.cpp:  memory->destroy(Fij);
pair_eim.cpp:  memory->destroy(Gij);
pair_eim.cpp:  memory->destroy(phiij);
pair_eim.cpp:  memory->destroy(Fij_spline);
pair_eim.cpp:  memory->destroy(Gij_spline);
pair_eim.cpp:  memory->destroy(phiij_spline);
pair_eim.cpp:    memory->destroy(rho);
pair_eim.cpp:    memory->destroy(fp);
pair_eim.cpp:    memory->create(rho,nmax,"pair:rho");
pair_eim.cpp:    memory->create(fp,nmax,"pair:fp");
pair_eim.cpp:  memory->create(setflag,n+1,n+1,"pair:setflag");
pair_eim.cpp:  memory->create(cutsq,n+1,n+1,"pair:cutsq");
pair_eim.cpp:  memory->create(type2Fij,n+1,n+1,"pair:type2Fij");
pair_eim.cpp:  memory->create(type2Gij,n+1,n+1,"pair:type2Gij");
pair_eim.cpp:  memory->create(type2phiij,n+1,n+1,"pair:type2phiij");
pair_eim.cpp:  memory->create(setfl->cuts,nelements,nelements,"pair:cuts");
pair_eim.cpp:  memory->create(setfl->Fij,nelements,nelements,setfl->nr+1,"pair:Fij");
pair_eim.cpp:  memory->create(setfl->Gij,nelements,nelements,setfl->nr+1,"pair:Gij");
pair_eim.cpp:  memory->create(setfl->phiij,nelements,nelements,setfl->nr+1,"pair:phiij");
pair_eim.cpp:  memory->destroy(setfl->cuts);
pair_eim.cpp:  memory->destroy(setfl->Fij);
pair_eim.cpp:  memory->destroy(setfl->Gij);
pair_eim.cpp:  memory->destroy(setfl->phiij);
pair_eim.cpp:  memory->create(cutforcesq,ntypes+1,ntypes+1,"pair:cutforcesq");
pair_eim.cpp:  memory->destroy(Fij);
pair_eim.cpp:  memory->create(Fij,nFij,nr+1,"pair:Fij");
pair_eim.cpp:  memory->destroy(Gij);
pair_eim.cpp:  memory->create(Gij,nGij,nr+1,"pair:Gij");
pair_eim.cpp:  memory->destroy(phiij);
pair_eim.cpp:  memory->create(phiij,nphiij,nr+1,"pair:phiij");
pair_eim.cpp:  memory->destroy(Fij_spline);
pair_eim.cpp:  memory->destroy(Gij_spline);
pair_eim.cpp:  memory->destroy(phiij_spline);
pair_eim.cpp:  memory->create(Fij_spline,nFij,nr+1,7,"pair:Fij");
pair_eim.cpp:  memory->create(Gij_spline,nGij,nr+1,7,"pair:Gij");
pair_eim.cpp:  memory->create(phiij_spline,nphiij,nr+1,7,"pair:phiij");
pair_excluded_volume.cpp:    memory->destroy(setflag);
pair_excluded_volume.cpp:    memory->destroy(cutsq);
pair_excluded_volume.cpp:    memory->destroy(lambda);
pair_excluded_volume.cpp:    memory->destroy(prefactor);
pair_excluded_volume.cpp:    memory->destroy(cut_short);
pair_excluded_volume.cpp:    memory->destroy(cut_long);
pair_excluded_volume.cpp:  memory->create(setflag, n+1,n+1,"pair:setflag");
pair_excluded_volume.cpp:  memory->create(cutsq, n+1,n+1,"pair:cutsq");
pair_excluded_volume.cpp:   memory->create(lambda, n+1,n+1,"pair:lambda");
pair_excluded_volume.cpp:   memory->create(prefactor, n+1,n+1,"pair:prefactor");
pair_excluded_volume.cpp:   memory->create(cut_short, n+1,n+1,"pair:cut_short");
pair_excluded_volume.cpp:   memory->create(cut_long, n+1,n+1,"pair:cut_long");
pair_ex_gauss_coul_cut.cpp:    memory->destroy(setflag);
pair_ex_gauss_coul_cut.cpp:    memory->destroy(cutsq);
pair_ex_gauss_coul_cut.cpp:    memory->destroy(cut_ex);
pair_ex_gauss_coul_cut.cpp:    memory->destroy(cut_exsq);
pair_ex_gauss_coul_cut.cpp:    memory->destroy(cut_coul);
pair_ex_gauss_coul_cut.cpp:    memory->destroy(cut_coulsq);
pair_ex_gauss_coul_cut.cpp:    memory->destroy(offset);
pair_ex_gauss_coul_cut.cpp:  memory->create(setflag,n+1,n+1,"pair:setflag");
pair_ex_gauss_coul_cut.cpp:  memory->create(cutsq,n+1,n+1,"pair:cutsq");
pair_ex_gauss_coul_cut.cpp:  memory->create(cut_ex,n+1,n+1,"pair:cut_ex");
pair_ex_gauss_coul_cut.cpp:  memory->create(cut_exsq,n+1,n+1,"pair:cut_exsq");
pair_ex_gauss_coul_cut.cpp:  memory->create(cut_coul,n+1,n+1,"pair:cut_coul");
pair_ex_gauss_coul_cut.cpp:  memory->create(cut_coulsq,n+1,n+1,"pair:cut_coulsq");
pair_ex_gauss_coul_cut.cpp:  memory->create(offset,n+1,n+1,"pair:offset");
pair_gauss.cpp:    memory->destroy(setflag);
pair_gauss.cpp:    memory->destroy(cutsq);
pair_gauss.cpp:    memory->destroy(cut);
pair_gauss.cpp:    memory->destroy(a);
pair_gauss.cpp:    memory->destroy(b);
pair_gauss.cpp:    memory->destroy(offset);
pair_gauss.cpp:  memory->create(setflag,n+1,n+1,"pair:setflag");
pair_gauss.cpp:  memory->create(cutsq,n+1,n+1,"pair:cutsq");
pair_gauss.cpp:  memory->create(cut,n+1,n+1,"pair:cut_gauss");
pair_gauss.cpp:  memory->create(a,n+1,n+1,"pair:a");
pair_gauss.cpp:  memory->create(b,n+1,n+1,"pair:b");
pair_gauss.cpp:  memory->create(offset,n+1,n+1,"pair:offset");
pair_go-contacts.cpp:    memory->destroy(setflag);
pair_go-contacts.cpp:    memory->destroy(cut);
pair_go-contacts.cpp:    memory->destroy(cutsq);
pair_go-contacts.cpp:    	memory->destroy(isNative);
pair_go-contacts.cpp:    	memory->destroy(sigma);
pair_go-contacts.cpp:    	memory->destroy(sigma_sq);
pair_go-contacts.cpp:  memory->create(setflag, n+1,n+1,"pair:setflag");
pair_go-contacts.cpp:  memory->create(cut, n+1,n+1,"pair:cut");
pair_go-contacts.cpp:  memory->create(cutsq, n+1,n+1,"pair:cutsq");
pair_go-contacts.cpp:  		memory->create(isNative, nres+1,nres+1,"pair:isNative");
pair_go-contacts.cpp:  		memory->create(sigma, nres+1,nres+1,"pair:sigma");
pair_go-contacts.cpp:  		memory->create(sigma_sq, nres+1,nres+1,"pair:sigma_sq");
pair_hbond_dreiding_lj.cpp:  memory->sfree(params);
pair_hbond_dreiding_lj.cpp:    memory->destroy(setflag);
pair_hbond_dreiding_lj.cpp:    memory->destroy(cutsq);
pair_hbond_dreiding_lj.cpp:    memory->destroy(type2param);
pair_hbond_dreiding_lj.cpp:  memory->create(setflag,n+1,n+1,"pair:setflag");
pair_hbond_dreiding_lj.cpp:  memory->create(cutsq,n+1,n+1,"pair:cutsq");
pair_hbond_dreiding_lj.cpp:  memory->create(type2param,n+1,n+1,n+1,"pair:type2param");
pair_hbond_dreiding_lj.cpp:    params = (Param *) memory->srealloc(params,maxparam*sizeof(Param),
pair_hbond_dreiding_morse.cpp:    params = (Param *) memory->srealloc(params,maxparam*sizeof(Param),
pair_hybrid.cpp:    memory->destroy(setflag);
pair_hybrid.cpp:    memory->destroy(cutsq);
pair_hybrid.cpp:    memory->destroy(cutghost);
pair_hybrid.cpp:    memory->destroy(nmap);
pair_hybrid.cpp:    memory->destroy(map);
pair_hybrid.cpp:  memory->create(setflag,n+1,n+1,"pair:setflag");
pair_hybrid.cpp:  memory->create(cutsq,n+1,n+1,"pair:cutsq");
pair_hybrid.cpp:  memory->create(cutghost,n+1,n+1,"pair:cutghost");
pair_hybrid.cpp:  memory->create(nmap,n+1,n+1,"pair:nmap");
pair_hybrid.cpp:  memory->create(map,n+1,n+1,nstyles,"pair:map");
pair_hybrid.cpp:    memory->destroy(setflag);
pair_hybrid.cpp:    memory->destroy(cutsq);
pair_hybrid.cpp:    memory->destroy(cutghost);
pair_hybrid.cpp:    memory->destroy(nmap);
pair_hybrid.cpp:    memory->destroy(map);
pair_hybrid.cpp:    memory->create(ijskip,ntypes+1,ntypes+1,"pair_hybrid:ijskip");
pair_hybrid.cpp:      memory->destroy(ijskip);
pair_lcbop.cpp:  memory->destroy(SR_numneigh);
pair_lcbop.cpp:  memory->sfree(SR_firstneigh);
pair_lcbop.cpp:  for (int i = 0; i < maxpage; i++) memory->destroy(pages[i]);
pair_lcbop.cpp:  memory->sfree(pages);
pair_lcbop.cpp:  memory->destroy(N);
pair_lcbop.cpp:  memory->destroy(M);
pair_lcbop.cpp:    memory->destroy(setflag);
pair_lcbop.cpp:    memory->destroy(cutsq);
pair_lcbop.cpp:    memory->destroy(cutghost);
pair_lcbop.cpp:  memory->create(setflag,n+1,n+1,"pair:setflag");
pair_lcbop.cpp:  memory->create(cutsq,n+1,n+1,"pair:cutsq");
pair_lcbop.cpp:  memory->create(cutghost,n+1,n+1,"pair:cutghost");
pair_lcbop.cpp:    memory->destroy(SR_numneigh);
pair_lcbop.cpp:    memory->sfree(SR_firstneigh);
pair_lcbop.cpp:    memory->destroy(N);
pair_lcbop.cpp:    memory->destroy(M);
pair_lcbop.cpp:    memory->create(SR_numneigh,maxlocal,"LCBOP:numneigh");
pair_lcbop.cpp:    SR_firstneigh = (int **) memory->smalloc(maxlocal*sizeof(int *),
pair_lcbop.cpp:    memory->create(N,maxlocal,"LCBOP:N");
pair_lcbop.cpp:    memory->create(M,maxlocal,"LCBOP:M");
pair_lcbop.cpp:    memory->srealloc(pages,maxpage*sizeof(int *),"LCBOP:pages");
pair_lcbop.cpp:    memory->create(pages[i],pgsize,"LCBOP:pages[i]");
pair_lj96_cut.cpp:    memory->destroy(setflag);
pair_lj96_cut.cpp:    memory->destroy(cutsq);
pair_lj96_cut.cpp:    memory->destroy(cut);
pair_lj96_cut.cpp:    memory->destroy(epsilon);
pair_lj96_cut.cpp:    memory->destroy(sigma);
pair_lj96_cut.cpp:    memory->destroy(lj1);
pair_lj96_cut.cpp:    memory->destroy(lj2);
pair_lj96_cut.cpp:    memory->destroy(lj3);
pair_lj96_cut.cpp:    memory->destroy(lj4);
pair_lj96_cut.cpp:    memory->destroy(offset);
pair_lj96_cut.cpp:  memory->create(setflag,n+1,n+1,"pair:setflag");
pair_lj96_cut.cpp:  memory->create(cutsq,n+1,n+1,"pair:cutsq");
pair_lj96_cut.cpp:  memory->create(cut,n+1,n+1,"pair:cut");
pair_lj96_cut.cpp:  memory->create(epsilon,n+1,n+1,"pair:epsilon");
pair_lj96_cut.cpp:  memory->create(sigma,n+1,n+1,"pair:sigma");
pair_lj96_cut.cpp:  memory->create(lj1,n+1,n+1,"pair:lj1");
pair_lj96_cut.cpp:  memory->create(lj2,n+1,n+1,"pair:lj2");
pair_lj96_cut.cpp:  memory->create(lj3,n+1,n+1,"pair:lj3");
pair_lj96_cut.cpp:  memory->create(lj4,n+1,n+1,"pair:lj4");
pair_lj96_cut.cpp:  memory->create(offset,n+1,n+1,"pair:offset");
pair_lj_charmm_coul_charmm.cpp:    memory->destroy(setflag);
pair_lj_charmm_coul_charmm.cpp:    memory->destroy(cutsq);
pair_lj_charmm_coul_charmm.cpp:    memory->destroy(epsilon);
pair_lj_charmm_coul_charmm.cpp:    memory->destroy(sigma);
pair_lj_charmm_coul_charmm.cpp:    memory->destroy(eps14);
pair_lj_charmm_coul_charmm.cpp:    memory->destroy(sigma14);
pair_lj_charmm_coul_charmm.cpp:    memory->destroy(lj1);
pair_lj_charmm_coul_charmm.cpp:    memory->destroy(lj2);
pair_lj_charmm_coul_charmm.cpp:    memory->destroy(lj3);
pair_lj_charmm_coul_charmm.cpp:    memory->destroy(lj4);
pair_lj_charmm_coul_charmm.cpp:    memory->destroy(lj14_1);
pair_lj_charmm_coul_charmm.cpp:    memory->destroy(lj14_2);
pair_lj_charmm_coul_charmm.cpp:    memory->destroy(lj14_3);
pair_lj_charmm_coul_charmm.cpp:    memory->destroy(lj14_4);
pair_lj_charmm_coul_charmm.cpp:  memory->create(setflag,n+1,n+1,"pair:setflag");
pair_lj_charmm_coul_charmm.cpp:  memory->create(cutsq,n+1,n+1,"pair:cutsq");
pair_lj_charmm_coul_charmm.cpp:  memory->create(epsilon,n+1,n+1,"pair:epsilon");
pair_lj_charmm_coul_charmm.cpp:  memory->create(sigma,n+1,n+1,"pair:sigma");
pair_lj_charmm_coul_charmm.cpp:  memory->create(eps14,n+1,n+1,"pair:eps14");
pair_lj_charmm_coul_charmm.cpp:  memory->create(sigma14,n+1,n+1,"pair:sigma14");
pair_lj_charmm_coul_charmm.cpp:  memory->create(lj1,n+1,n+1,"pair:lj1");
pair_lj_charmm_coul_charmm.cpp:  memory->create(lj2,n+1,n+1,"pair:lj2");
pair_lj_charmm_coul_charmm.cpp:  memory->create(lj3,n+1,n+1,"pair:lj3");
pair_lj_charmm_coul_charmm.cpp:  memory->create(lj4,n+1,n+1,"pair:lj4");
pair_lj_charmm_coul_charmm.cpp:  memory->create(lj14_1,n+1,n+1,"pair:lj14_1");
pair_lj_charmm_coul_charmm.cpp:  memory->create(lj14_2,n+1,n+1,"pair:lj14_2");
pair_lj_charmm_coul_charmm.cpp:  memory->create(lj14_3,n+1,n+1,"pair:lj14_3");
pair_lj_charmm_coul_charmm.cpp:  memory->create(lj14_4,n+1,n+1,"pair:lj14_4");
pair_lj_charmm_coul_long.cpp:    memory->destroy(setflag);
pair_lj_charmm_coul_long.cpp:    memory->destroy(cutsq);
pair_lj_charmm_coul_long.cpp:    memory->destroy(epsilon);
pair_lj_charmm_coul_long.cpp:    memory->destroy(sigma);
pair_lj_charmm_coul_long.cpp:    memory->destroy(eps14);
pair_lj_charmm_coul_long.cpp:    memory->destroy(sigma14);
pair_lj_charmm_coul_long.cpp:    memory->destroy(lj1);
pair_lj_charmm_coul_long.cpp:    memory->destroy(lj2);
pair_lj_charmm_coul_long.cpp:    memory->destroy(lj3);
pair_lj_charmm_coul_long.cpp:    memory->destroy(lj4);
pair_lj_charmm_coul_long.cpp:    memory->destroy(lj14_1);
pair_lj_charmm_coul_long.cpp:    memory->destroy(lj14_2);
pair_lj_charmm_coul_long.cpp:    memory->destroy(lj14_3);
pair_lj_charmm_coul_long.cpp:    memory->destroy(lj14_4);
pair_lj_charmm_coul_long.cpp:  memory->create(setflag,n+1,n+1,"pair:setflag");
pair_lj_charmm_coul_long.cpp:  memory->create(cutsq,n+1,n+1,"pair:cutsq");
pair_lj_charmm_coul_long.cpp:  memory->create(epsilon,n+1,n+1,"pair:epsilon");
pair_lj_charmm_coul_long.cpp:  memory->create(sigma,n+1,n+1,"pair:sigma");
pair_lj_charmm_coul_long.cpp:  memory->create(eps14,n+1,n+1,"pair:eps14");
pair_lj_charmm_coul_long.cpp:  memory->create(sigma14,n+1,n+1,"pair:sigma14");
pair_lj_charmm_coul_long.cpp:  memory->create(lj1,n+1,n+1,"pair:lj1");
pair_lj_charmm_coul_long.cpp:  memory->create(lj2,n+1,n+1,"pair:lj2");
pair_lj_charmm_coul_long.cpp:  memory->create(lj3,n+1,n+1,"pair:lj3");
pair_lj_charmm_coul_long.cpp:  memory->create(lj4,n+1,n+1,"pair:lj4");
pair_lj_charmm_coul_long.cpp:  memory->create(lj14_1,n+1,n+1,"pair:lj14_1");
pair_lj_charmm_coul_long.cpp:  memory->create(lj14_2,n+1,n+1,"pair:lj14_2");
pair_lj_charmm_coul_long.cpp:  memory->create(lj14_3,n+1,n+1,"pair:lj14_3");
pair_lj_charmm_coul_long.cpp:  memory->create(lj14_4,n+1,n+1,"pair:lj14_4");
pair_lj_charmm_coul_long.cpp:  memory->create(rtable,ntable,"pair:rtable");
pair_lj_charmm_coul_long.cpp:  memory->create(ftable,ntable,"pair:ftable");
pair_lj_charmm_coul_long.cpp:  memory->create(ctable,ntable,"pair:ctable");
pair_lj_charmm_coul_long.cpp:  memory->create(etable,ntable,"pair:etable");
pair_lj_charmm_coul_long.cpp:  memory->create(drtable,ntable,"pair:drtable");
pair_lj_charmm_coul_long.cpp:  memory->create(dftable,ntable,"pair:dftable");
pair_lj_charmm_coul_long.cpp:  memory->create(dctable,ntable,"pair:dctable");
pair_lj_charmm_coul_long.cpp:  memory->create(detable,ntable,"pair:detable");
pair_lj_charmm_coul_long.cpp:    memory->create(vtable,ntable,"pair:vtable");
pair_lj_charmm_coul_long.cpp:    memory->create(ptable,ntable,"pair:ptable");
pair_lj_charmm_coul_long.cpp:    memory->create(dvtable,ntable,"pair:dvtable");
pair_lj_charmm_coul_long.cpp:    memory->create(dptable,ntable,"pair:dptable");
pair_lj_charmm_coul_long.cpp:  memory->destroy(rtable);
pair_lj_charmm_coul_long.cpp:  memory->destroy(drtable);
pair_lj_charmm_coul_long.cpp:  memory->destroy(ftable);
pair_lj_charmm_coul_long.cpp:  memory->destroy(dftable);
pair_lj_charmm_coul_long.cpp:  memory->destroy(ctable);
pair_lj_charmm_coul_long.cpp:  memory->destroy(dctable);
pair_lj_charmm_coul_long.cpp:  memory->destroy(etable);
pair_lj_charmm_coul_long.cpp:  memory->destroy(detable);
pair_lj_charmm_coul_long.cpp:  memory->destroy(vtable);
pair_lj_charmm_coul_long.cpp:  memory->destroy(dvtable);
pair_lj_charmm_coul_long.cpp:  memory->destroy(ptable);
pair_lj_charmm_coul_long.cpp:  memory->destroy(dptable);
pair_lj_charmm_coul_msm.cpp:  memory->create(rtable,ntable,"pair:rtable");
pair_lj_charmm_coul_msm.cpp:  memory->create(ftable,ntable,"pair:ftable");
pair_lj_charmm_coul_msm.cpp:  memory->create(ctable,ntable,"pair:ctable");
pair_lj_charmm_coul_msm.cpp:  memory->create(etable,ntable,"pair:etable");
pair_lj_charmm_coul_msm.cpp:  memory->create(drtable,ntable,"pair:drtable");
pair_lj_charmm_coul_msm.cpp:  memory->create(dftable,ntable,"pair:dftable");
pair_lj_charmm_coul_msm.cpp:  memory->create(dctable,ntable,"pair:dctable");
pair_lj_charmm_coul_msm.cpp:  memory->create(detable,ntable,"pair:detable");
pair_lj_charmm_coul_msm.cpp:    memory->create(vtable,ntable,"pair:vtable");
pair_lj_charmm_coul_msm.cpp:    memory->create(ptable,ntable,"pair:ptable");
pair_lj_charmm_coul_msm.cpp:    memory->create(dvtable,ntable,"pair:dvtable");
pair_lj_charmm_coul_msm.cpp:    memory->create(dptable,ntable,"pair:dptable");
pair_lj_cubic.cpp:    memory->destroy(setflag);
pair_lj_cubic.cpp:    memory->destroy(cutsq);
pair_lj_cubic.cpp:    memory->destroy(cut);
pair_lj_cubic.cpp:    memory->destroy(cut_inner);
pair_lj_cubic.cpp:    memory->destroy(cut_inner_sq);
pair_lj_cubic.cpp:    memory->destroy(epsilon);
pair_lj_cubic.cpp:    memory->destroy(sigma);
pair_lj_cubic.cpp:    memory->destroy(lj1);
pair_lj_cubic.cpp:    memory->destroy(lj2);
pair_lj_cubic.cpp:    memory->destroy(lj3);
pair_lj_cubic.cpp:    memory->destroy(lj4);
pair_lj_cubic.cpp:  memory->create(setflag,n+1,n+1,"pair:setflag");
pair_lj_cubic.cpp:  memory->create(cutsq,n+1,n+1,"pair:cutsq");
pair_lj_cubic.cpp:  memory->create(cut,n+1,n+1,"pair:cut");
pair_lj_cubic.cpp:  memory->create(cut_inner,n+1,n+1,"pair:cut_inner");
pair_lj_cubic.cpp:  memory->create(cut_inner_sq,n+1,n+1,"pair:cut_inner_sq");
pair_lj_cubic.cpp:  memory->create(epsilon,n+1,n+1,"pair:epsilon");
pair_lj_cubic.cpp:  memory->create(sigma,n+1,n+1,"pair:sigma");
pair_lj_cubic.cpp:  memory->create(lj1,n+1,n+1,"pair:lj1");
pair_lj_cubic.cpp:  memory->create(lj2,n+1,n+1,"pair:lj2");
pair_lj_cubic.cpp:  memory->create(lj3,n+1,n+1,"pair:lj3");
pair_lj_cubic.cpp:  memory->create(lj4,n+1,n+1,"pair:lj4");
pair_lj_cut_coul_cut.cpp:    memory->destroy(setflag);
pair_lj_cut_coul_cut.cpp:    memory->destroy(cutsq);
pair_lj_cut_coul_cut.cpp:    memory->destroy(cut_lj);
pair_lj_cut_coul_cut.cpp:    memory->destroy(cut_ljsq);
pair_lj_cut_coul_cut.cpp:    memory->destroy(cut_coul);
pair_lj_cut_coul_cut.cpp:    memory->destroy(cut_coulsq);
pair_lj_cut_coul_cut.cpp:    memory->destroy(epsilon);
pair_lj_cut_coul_cut.cpp:    memory->destroy(sigma);
pair_lj_cut_coul_cut.cpp:    memory->destroy(lj1);
pair_lj_cut_coul_cut.cpp:    memory->destroy(lj2);
pair_lj_cut_coul_cut.cpp:    memory->destroy(lj3);
pair_lj_cut_coul_cut.cpp:    memory->destroy(lj4);
pair_lj_cut_coul_cut.cpp:    memory->destroy(offset);
pair_lj_cut_coul_cut.cpp:  memory->create(setflag,n+1,n+1,"pair:setflag");
pair_lj_cut_coul_cut.cpp:  memory->create(cutsq,n+1,n+1,"pair:cutsq");
pair_lj_cut_coul_cut.cpp:  memory->create(cut_lj,n+1,n+1,"pair:cut_lj");
pair_lj_cut_coul_cut.cpp:  memory->create(cut_ljsq,n+1,n+1,"pair:cut_ljsq");
pair_lj_cut_coul_cut.cpp:  memory->create(cut_coul,n+1,n+1,"pair:cut_coul");
pair_lj_cut_coul_cut.cpp:  memory->create(cut_coulsq,n+1,n+1,"pair:cut_coulsq");
pair_lj_cut_coul_cut.cpp:  memory->create(epsilon,n+1,n+1,"pair:epsilon");
pair_lj_cut_coul_cut.cpp:  memory->create(sigma,n+1,n+1,"pair:sigma");
pair_lj_cut_coul_cut.cpp:  memory->create(lj1,n+1,n+1,"pair:lj1");
pair_lj_cut_coul_cut.cpp:  memory->create(lj2,n+1,n+1,"pair:lj2");
pair_lj_cut_coul_cut.cpp:  memory->create(lj3,n+1,n+1,"pair:lj3");
pair_lj_cut_coul_cut.cpp:  memory->create(lj4,n+1,n+1,"pair:lj4");
pair_lj_cut_coul_cut.cpp:  memory->create(offset,n+1,n+1,"pair:offset");
pair_lj_cut_coul_dsf.cpp:    memory->destroy(setflag);
pair_lj_cut_coul_dsf.cpp:    memory->destroy(cutsq);
pair_lj_cut_coul_dsf.cpp:    memory->destroy(cut_lj);
pair_lj_cut_coul_dsf.cpp:    memory->destroy(cut_ljsq);
pair_lj_cut_coul_dsf.cpp:    memory->destroy(epsilon);
pair_lj_cut_coul_dsf.cpp:    memory->destroy(sigma);
pair_lj_cut_coul_dsf.cpp:    memory->destroy(lj1);
pair_lj_cut_coul_dsf.cpp:    memory->destroy(lj2);
pair_lj_cut_coul_dsf.cpp:    memory->destroy(lj3);
pair_lj_cut_coul_dsf.cpp:    memory->destroy(lj4);
pair_lj_cut_coul_dsf.cpp:    memory->destroy(offset);
pair_lj_cut_coul_dsf.cpp:  memory->create(setflag,n+1,n+1,"pair:setflag");
pair_lj_cut_coul_dsf.cpp:  memory->create(cutsq,n+1,n+1,"pair:cutsq");
pair_lj_cut_coul_dsf.cpp:  memory->create(cut_lj,n+1,n+1,"pair:cut_lj");
pair_lj_cut_coul_dsf.cpp:  memory->create(cut_ljsq,n+1,n+1,"pair:cut_ljsq");
pair_lj_cut_coul_dsf.cpp:  memory->create(epsilon,n+1,n+1,"pair:epsilon");
pair_lj_cut_coul_dsf.cpp:  memory->create(sigma,n+1,n+1,"pair:sigma");
pair_lj_cut_coul_dsf.cpp:  memory->create(lj1,n+1,n+1,"pair:lj1");
pair_lj_cut_coul_dsf.cpp:  memory->create(lj2,n+1,n+1,"pair:lj2");
pair_lj_cut_coul_dsf.cpp:  memory->create(lj3,n+1,n+1,"pair:lj3");
pair_lj_cut_coul_dsf.cpp:  memory->create(lj4,n+1,n+1,"pair:lj4");
pair_lj_cut_coul_dsf.cpp:  memory->create(offset,n+1,n+1,"pair:offset");
pair_lj_cut_coul_long.cpp:    memory->destroy(setflag);
pair_lj_cut_coul_long.cpp:    memory->destroy(cutsq);
pair_lj_cut_coul_long.cpp:    memory->destroy(cut_lj);
pair_lj_cut_coul_long.cpp:    memory->destroy(cut_ljsq);
pair_lj_cut_coul_long.cpp:    memory->destroy(epsilon);
pair_lj_cut_coul_long.cpp:    memory->destroy(sigma);
pair_lj_cut_coul_long.cpp:    memory->destroy(lj1);
pair_lj_cut_coul_long.cpp:    memory->destroy(lj2);
pair_lj_cut_coul_long.cpp:    memory->destroy(lj3);
pair_lj_cut_coul_long.cpp:    memory->destroy(lj4);
pair_lj_cut_coul_long.cpp:    memory->destroy(offset);
pair_lj_cut_coul_long.cpp:  memory->create(setflag,n+1,n+1,"pair:setflag");
pair_lj_cut_coul_long.cpp:  memory->create(cutsq,n+1,n+1,"pair:cutsq");
pair_lj_cut_coul_long.cpp:  memory->create(cut_lj,n+1,n+1,"pair:cut_lj");
pair_lj_cut_coul_long.cpp:  memory->create(cut_ljsq,n+1,n+1,"pair:cut_ljsq");
pair_lj_cut_coul_long.cpp:  memory->create(epsilon,n+1,n+1,"pair:epsilon");
pair_lj_cut_coul_long.cpp:  memory->create(sigma,n+1,n+1,"pair:sigma");
pair_lj_cut_coul_long.cpp:  memory->create(lj1,n+1,n+1,"pair:lj1");
pair_lj_cut_coul_long.cpp:  memory->create(lj2,n+1,n+1,"pair:lj2");
pair_lj_cut_coul_long.cpp:  memory->create(lj3,n+1,n+1,"pair:lj3");
pair_lj_cut_coul_long.cpp:  memory->create(lj4,n+1,n+1,"pair:lj4");
pair_lj_cut_coul_long.cpp:  memory->create(offset,n+1,n+1,"pair:offset");
pair_lj_cut_coul_long.cpp:  memory->create(rtable,ntable,"pair:rtable");
pair_lj_cut_coul_long.cpp:  memory->create(ftable,ntable,"pair:ftable");
pair_lj_cut_coul_long.cpp:  memory->create(ctable,ntable,"pair:ctable");
pair_lj_cut_coul_long.cpp:  memory->create(etable,ntable,"pair:etable");
pair_lj_cut_coul_long.cpp:  memory->create(drtable,ntable,"pair:drtable");
pair_lj_cut_coul_long.cpp:  memory->create(dftable,ntable,"pair:dftable");
pair_lj_cut_coul_long.cpp:  memory->create(dctable,ntable,"pair:dctable");
pair_lj_cut_coul_long.cpp:  memory->create(detable,ntable,"pair:detable");
pair_lj_cut_coul_long.cpp:    memory->create(vtable,ntable*sizeof(double),"pair:vtable");
pair_lj_cut_coul_long.cpp:    memory->create(ptable,ntable*sizeof(double),"pair:ptable");
pair_lj_cut_coul_long.cpp:    memory->create(dvtable,ntable*sizeof(double),"pair:dvtable");
pair_lj_cut_coul_long.cpp:    memory->create(dptable,ntable*sizeof(double),"pair:dptable");
pair_lj_cut_coul_long.cpp:  memory->destroy(rtable);
pair_lj_cut_coul_long.cpp:  memory->destroy(drtable);
pair_lj_cut_coul_long.cpp:  memory->destroy(ftable);
pair_lj_cut_coul_long.cpp:  memory->destroy(dftable);
pair_lj_cut_coul_long.cpp:  memory->destroy(ctable);
pair_lj_cut_coul_long.cpp:  memory->destroy(dctable);
pair_lj_cut_coul_long.cpp:  memory->destroy(etable);
pair_lj_cut_coul_long.cpp:  memory->destroy(detable);
pair_lj_cut_coul_long.cpp:  memory->destroy(vtable);
pair_lj_cut_coul_long.cpp:  memory->destroy(dvtable);
pair_lj_cut_coul_long.cpp:  memory->destroy(ptable);
pair_lj_cut_coul_long.cpp:  memory->destroy(dptable);
pair_lj_cut_coul_msm.cpp:  memory->create(rtable,ntable,"pair:rtable");
pair_lj_cut_coul_msm.cpp:  memory->create(ftable,ntable,"pair:ftable");
pair_lj_cut_coul_msm.cpp:  memory->create(ctable,ntable,"pair:ctable");
pair_lj_cut_coul_msm.cpp:  memory->create(etable,ntable,"pair:etable");
pair_lj_cut_coul_msm.cpp:  memory->create(drtable,ntable,"pair:drtable");
pair_lj_cut_coul_msm.cpp:  memory->create(dftable,ntable,"pair:dftable");
pair_lj_cut_coul_msm.cpp:  memory->create(dctable,ntable,"pair:dctable");
pair_lj_cut_coul_msm.cpp:  memory->create(detable,ntable,"pair:detable");
pair_lj_cut_coul_msm.cpp:    memory->create(vtable,ntable*sizeof(double),"pair:vtable");
pair_lj_cut_coul_msm.cpp:    memory->create(ptable,ntable*sizeof(double),"pair:ptable");
pair_lj_cut_coul_msm.cpp:    memory->create(dvtable,ntable*sizeof(double),"pair:dvtable");
pair_lj_cut_coul_msm.cpp:    memory->create(dptable,ntable*sizeof(double),"pair:dptable");
pair_lj_cut.cpp:    memory->destroy(setflag);
pair_lj_cut.cpp:    memory->destroy(cutsq);
pair_lj_cut.cpp:    memory->destroy(cut);
pair_lj_cut.cpp:    memory->destroy(epsilon);
pair_lj_cut.cpp:    memory->destroy(sigma);
pair_lj_cut.cpp:    memory->destroy(lj1);
pair_lj_cut.cpp:    memory->destroy(lj2);
pair_lj_cut.cpp:    memory->destroy(lj3);
pair_lj_cut.cpp:    memory->destroy(lj4);
pair_lj_cut.cpp:    memory->destroy(offset);
pair_lj_cut.cpp:  memory->create(setflag,n+1,n+1,"pair:setflag");
pair_lj_cut.cpp:  memory->create(cutsq,n+1,n+1,"pair:cutsq");
pair_lj_cut.cpp:  memory->create(cut,n+1,n+1,"pair:cut");
pair_lj_cut.cpp:  memory->create(epsilon,n+1,n+1,"pair:epsilon");
pair_lj_cut.cpp:  memory->create(sigma,n+1,n+1,"pair:sigma");
pair_lj_cut.cpp:  memory->create(lj1,n+1,n+1,"pair:lj1");
pair_lj_cut.cpp:  memory->create(lj2,n+1,n+1,"pair:lj2");
pair_lj_cut.cpp:  memory->create(lj3,n+1,n+1,"pair:lj3");
pair_lj_cut.cpp:  memory->create(lj4,n+1,n+1,"pair:lj4");
pair_lj_cut.cpp:  memory->create(offset,n+1,n+1,"pair:offset");
pair_lj_cut_tip4p_long.cpp:  memory->destroy(hneigh);
pair_lj_cut_tip4p_long.cpp:  memory->destroy(newsite);
pair_lj_cut_tip4p_long.cpp:    memory->destroy(hneigh);
pair_lj_cut_tip4p_long.cpp:    memory->create(hneigh,nmax,3,"pair:hneigh");
pair_lj_cut_tip4p_long.cpp:    memory->destroy(newsite);
pair_lj_cut_tip4p_long.cpp:    memory->create(newsite,nmax,3,"pair:newsite");
pair_lj_expand.cpp:    memory->destroy(setflag);
pair_lj_expand.cpp:    memory->destroy(cutsq);
pair_lj_expand.cpp:    memory->destroy(cut);
pair_lj_expand.cpp:    memory->destroy(epsilon);
pair_lj_expand.cpp:    memory->destroy(sigma);
pair_lj_expand.cpp:    memory->destroy(shift);
pair_lj_expand.cpp:    memory->destroy(lj1);
pair_lj_expand.cpp:    memory->destroy(lj2);
pair_lj_expand.cpp:    memory->destroy(lj3);
pair_lj_expand.cpp:    memory->destroy(lj4);
pair_lj_expand.cpp:    memory->destroy(offset);
pair_lj_expand.cpp:  memory->create(setflag,n+1,n+1,"pair:setflag");
pair_lj_expand.cpp:  memory->create(cutsq,n+1,n+1,"pair:cutsq");
pair_lj_expand.cpp:  memory->create(cut,n+1,n+1,"pair:cut");
pair_lj_expand.cpp:  memory->create(epsilon,n+1,n+1,"pair:epsilon");
pair_lj_expand.cpp:  memory->create(sigma,n+1,n+1,"pair:sigma");
pair_lj_expand.cpp:  memory->create(shift,n+1,n+1,"pair:shift");
pair_lj_expand.cpp:  memory->create(lj1,n+1,n+1,"pair:lj1");
pair_lj_expand.cpp:  memory->create(lj2,n+1,n+1,"pair:lj2");
pair_lj_expand.cpp:  memory->create(lj3,n+1,n+1,"pair:lj3");
pair_lj_expand.cpp:  memory->create(lj4,n+1,n+1,"pair:lj4");
pair_lj_expand.cpp:  memory->create(offset,n+1,n+1,"pair:offset");
pair_lj_gromacs_coul_gromacs.cpp:    memory->destroy(setflag);
pair_lj_gromacs_coul_gromacs.cpp:    memory->destroy(cutsq);
pair_lj_gromacs_coul_gromacs.cpp:    memory->destroy(epsilon);
pair_lj_gromacs_coul_gromacs.cpp:    memory->destroy(sigma);
pair_lj_gromacs_coul_gromacs.cpp:    memory->destroy(lj1);
pair_lj_gromacs_coul_gromacs.cpp:    memory->destroy(lj2);
pair_lj_gromacs_coul_gromacs.cpp:    memory->destroy(lj3);
pair_lj_gromacs_coul_gromacs.cpp:    memory->destroy(lj4);
pair_lj_gromacs_coul_gromacs.cpp:    memory->destroy(ljsw1);
pair_lj_gromacs_coul_gromacs.cpp:    memory->destroy(ljsw2);
pair_lj_gromacs_coul_gromacs.cpp:    memory->destroy(ljsw3);
pair_lj_gromacs_coul_gromacs.cpp:    memory->destroy(ljsw4);
pair_lj_gromacs_coul_gromacs.cpp:    memory->destroy(ljsw5);
pair_lj_gromacs_coul_gromacs.cpp:  memory->create(setflag,n+1,n+1,"pair:setflag");
pair_lj_gromacs_coul_gromacs.cpp:  memory->create(cutsq,n+1,n+1,"pair:cutsq");
pair_lj_gromacs_coul_gromacs.cpp:  memory->create(epsilon,n+1,n+1,"pair:epsilon");
pair_lj_gromacs_coul_gromacs.cpp:  memory->create(sigma,n+1,n+1,"pair:sigma");
pair_lj_gromacs_coul_gromacs.cpp:  memory->create(lj1,n+1,n+1,"pair:lj1");
pair_lj_gromacs_coul_gromacs.cpp:  memory->create(lj2,n+1,n+1,"pair:lj2");
pair_lj_gromacs_coul_gromacs.cpp:  memory->create(lj3,n+1,n+1,"pair:lj3");
pair_lj_gromacs_coul_gromacs.cpp:  memory->create(lj4,n+1,n+1,"pair:lj4");
pair_lj_gromacs_coul_gromacs.cpp:  memory->create(ljsw1,n+1,n+1,"pair:ljsw1");
pair_lj_gromacs_coul_gromacs.cpp:  memory->create(ljsw2,n+1,n+1,"pair:ljsw2");
pair_lj_gromacs_coul_gromacs.cpp:  memory->create(ljsw3,n+1,n+1,"pair:ljsw3");
pair_lj_gromacs_coul_gromacs.cpp:  memory->create(ljsw4,n+1,n+1,"pair:ljsw4");
pair_lj_gromacs_coul_gromacs.cpp:  memory->create(ljsw5,n+1,n+1,"pair:ljsw5");
pair_lj_gromacs.cpp:    memory->destroy(setflag);
pair_lj_gromacs.cpp:    memory->destroy(cutsq);
pair_lj_gromacs.cpp:    memory->destroy(cut);
pair_lj_gromacs.cpp:    memory->destroy(cut_inner);
pair_lj_gromacs.cpp:    memory->destroy(cut_inner_sq);
pair_lj_gromacs.cpp:    memory->destroy(epsilon);
pair_lj_gromacs.cpp:    memory->destroy(sigma);
pair_lj_gromacs.cpp:    memory->destroy(lj1);
pair_lj_gromacs.cpp:    memory->destroy(lj2);
pair_lj_gromacs.cpp:    memory->destroy(lj3);
pair_lj_gromacs.cpp:    memory->destroy(lj4);
pair_lj_gromacs.cpp:    memory->destroy(ljsw1);
pair_lj_gromacs.cpp:    memory->destroy(ljsw2);
pair_lj_gromacs.cpp:    memory->destroy(ljsw3);
pair_lj_gromacs.cpp:    memory->destroy(ljsw4);
pair_lj_gromacs.cpp:    memory->destroy(ljsw5);
pair_lj_gromacs.cpp:  memory->create(setflag,n+1,n+1,"pair:setflag");
pair_lj_gromacs.cpp:  memory->create(cutsq,n+1,n+1,"pair:cutsq");
pair_lj_gromacs.cpp:  memory->create(cut,n+1,n+1,"pair:cut");
pair_lj_gromacs.cpp:  memory->create(cut_inner,n+1,n+1,"pair:cut_inner");
pair_lj_gromacs.cpp:  memory->create(cut_inner_sq,n+1,n+1,"pair:cut_inner_sq");
pair_lj_gromacs.cpp:  memory->create(epsilon,n+1,n+1,"pair:epsilon");
pair_lj_gromacs.cpp:  memory->create(sigma,n+1,n+1,"pair:sigma");
pair_lj_gromacs.cpp:  memory->create(lj1,n+1,n+1,"pair:lj1");
pair_lj_gromacs.cpp:  memory->create(lj2,n+1,n+1,"pair:lj2");
pair_lj_gromacs.cpp:  memory->create(lj3,n+1,n+1,"pair:lj3");
pair_lj_gromacs.cpp:  memory->create(lj4,n+1,n+1,"pair:lj4");
pair_lj_gromacs.cpp:  memory->create(ljsw1,n+1,n+1,"pair:ljsw1");
pair_lj_gromacs.cpp:  memory->create(ljsw2,n+1,n+1,"pair:ljsw2");
pair_lj_gromacs.cpp:  memory->create(ljsw3,n+1,n+1,"pair:ljsw3");
pair_lj_gromacs.cpp:  memory->create(ljsw4,n+1,n+1,"pair:ljsw4");
pair_lj_gromacs.cpp:  memory->create(ljsw5,n+1,n+1,"pair:ljsw5");
pair_lj_long_coul_long.cpp:    memory->destroy(setflag);
pair_lj_long_coul_long.cpp:    memory->destroy(cutsq);
pair_lj_long_coul_long.cpp:    memory->destroy(cut_lj_read);
pair_lj_long_coul_long.cpp:    memory->destroy(cut_lj);
pair_lj_long_coul_long.cpp:    memory->destroy(cut_ljsq);
pair_lj_long_coul_long.cpp:    memory->destroy(epsilon_read);
pair_lj_long_coul_long.cpp:    memory->destroy(epsilon);
pair_lj_long_coul_long.cpp:    memory->destroy(sigma_read);
pair_lj_long_coul_long.cpp:    memory->destroy(sigma);
pair_lj_long_coul_long.cpp:    memory->destroy(lj1);
pair_lj_long_coul_long.cpp:    memory->destroy(lj2);
pair_lj_long_coul_long.cpp:    memory->destroy(lj3);
pair_lj_long_coul_long.cpp:    memory->destroy(lj4);
pair_lj_long_coul_long.cpp:    memory->destroy(offset);
pair_lj_long_coul_long.cpp:  memory->create(setflag,n+1,n+1,"pair:setflag");
pair_lj_long_coul_long.cpp:  memory->create(cutsq,n+1,n+1,"pair:cutsq");
pair_lj_long_coul_long.cpp:  memory->create(cut_lj_read,n+1,n+1,"pair:cut_lj_read");
pair_lj_long_coul_long.cpp:  memory->create(cut_lj,n+1,n+1,"pair:cut_lj");
pair_lj_long_coul_long.cpp:  memory->create(cut_ljsq,n+1,n+1,"pair:cut_ljsq");
pair_lj_long_coul_long.cpp:  memory->create(epsilon_read,n+1,n+1,"pair:epsilon_read");
pair_lj_long_coul_long.cpp:  memory->create(epsilon,n+1,n+1,"pair:epsilon");
pair_lj_long_coul_long.cpp:  memory->create(sigma_read,n+1,n+1,"pair:sigma_read");
pair_lj_long_coul_long.cpp:  memory->create(sigma,n+1,n+1,"pair:sigma");
pair_lj_long_coul_long.cpp:  memory->create(lj1,n+1,n+1,"pair:lj1");
pair_lj_long_coul_long.cpp:  memory->create(lj2,n+1,n+1,"pair:lj2");
pair_lj_long_coul_long.cpp:  memory->create(lj3,n+1,n+1,"pair:lj3");
pair_lj_long_coul_long.cpp:  memory->create(lj4,n+1,n+1,"pair:lj4");
pair_lj_long_coul_long.cpp:  memory->create(offset,n+1,n+1,"pair:offset");
pair_lj_long_coul_long.cpp:  memory->create(rtable,ntable,"pair:rtable");
pair_lj_long_coul_long.cpp:  memory->create(ftable,ntable,"pair:ftable");
pair_lj_long_coul_long.cpp:  memory->create(ctable,ntable,"pair:ctable");
pair_lj_long_coul_long.cpp:  memory->create(etable,ntable,"pair:etable");
pair_lj_long_coul_long.cpp:  memory->create(drtable,ntable,"pair:drtable");
pair_lj_long_coul_long.cpp:  memory->create(dftable,ntable,"pair:dftable");
pair_lj_long_coul_long.cpp:  memory->create(dctable,ntable,"pair:dctable");
pair_lj_long_coul_long.cpp:  memory->create(detable,ntable,"pair:detable");
pair_lj_long_coul_long.cpp:    memory->create(vtable,ntable,"pair:vtable");
pair_lj_long_coul_long.cpp:    memory->create(ptable,ntable,"pair:ptable");
pair_lj_long_coul_long.cpp:    memory->create(dvtable,ntable,"pair:dvtable");
pair_lj_long_coul_long.cpp:    memory->create(dptable,ntable,"pair:dptable");
pair_lj_long_coul_long.cpp:  memory->destroy(rtable);
pair_lj_long_coul_long.cpp:  memory->destroy(drtable);
pair_lj_long_coul_long.cpp:  memory->destroy(ftable);
pair_lj_long_coul_long.cpp:  memory->destroy(dftable);
pair_lj_long_coul_long.cpp:  memory->destroy(ctable);
pair_lj_long_coul_long.cpp:  memory->destroy(dctable);
pair_lj_long_coul_long.cpp:  memory->destroy(etable);
pair_lj_long_coul_long.cpp:  memory->destroy(detable);
pair_lj_long_coul_long.cpp:  memory->destroy(vtable);
pair_lj_long_coul_long.cpp:  memory->destroy(dvtable);
pair_lj_long_coul_long.cpp:  memory->destroy(ptable);
pair_lj_long_coul_long.cpp:  memory->destroy(dptable);
pair_lj_long_tip4p_long.cpp:  memory->destroy(hneigh);
pair_lj_long_tip4p_long.cpp:  memory->destroy(newsite);
pair_lj_long_tip4p_long.cpp:    memory->destroy(hneigh);
pair_lj_long_tip4p_long.cpp:    memory->create(hneigh,nmax,3,"pair:hneigh");
pair_lj_long_tip4p_long.cpp:    memory->destroy(newsite);
pair_lj_long_tip4p_long.cpp:    memory->create(newsite,nmax,3,"pair:newsite");
pair_lj_smooth.cpp:    memory->destroy(setflag);
pair_lj_smooth.cpp:    memory->destroy(cutsq);
pair_lj_smooth.cpp:    memory->destroy(cut);
pair_lj_smooth.cpp:    memory->destroy(cut_inner);
pair_lj_smooth.cpp:    memory->destroy(cut_inner_sq);
pair_lj_smooth.cpp:    memory->destroy(epsilon);
pair_lj_smooth.cpp:    memory->destroy(sigma);
pair_lj_smooth.cpp:    memory->destroy(lj1);
pair_lj_smooth.cpp:    memory->destroy(lj2);
pair_lj_smooth.cpp:    memory->destroy(lj3);
pair_lj_smooth.cpp:    memory->destroy(lj4);
pair_lj_smooth.cpp:    memory->destroy(ljsw0);
pair_lj_smooth.cpp:    memory->destroy(ljsw1);
pair_lj_smooth.cpp:    memory->destroy(ljsw2);
pair_lj_smooth.cpp:    memory->destroy(ljsw3);
pair_lj_smooth.cpp:    memory->destroy(ljsw4);
pair_lj_smooth.cpp:    memory->destroy(offset);
pair_lj_smooth.cpp:  memory->create(setflag,n+1,n+1,"pair:setflag");
pair_lj_smooth.cpp:  memory->create(cutsq,n+1,n+1,"pair:cutsq");
pair_lj_smooth.cpp:  memory->create(cut,n+1,n+1,"pair:cut");
pair_lj_smooth.cpp:  memory->create(cut_inner,n+1,n+1,"pair:cut_inner");
pair_lj_smooth.cpp:  memory->create(cut_inner_sq,n+1,n+1,"pair:cut_inner_sq");
pair_lj_smooth.cpp:  memory->create(epsilon,n+1,n+1,"pair:epsilon");
pair_lj_smooth.cpp:  memory->create(sigma,n+1,n+1,"pair:sigma");
pair_lj_smooth.cpp:  memory->create(lj1,n+1,n+1,"pair:lj1");
pair_lj_smooth.cpp:  memory->create(lj2,n+1,n+1,"pair:lj2");
pair_lj_smooth.cpp:  memory->create(lj3,n+1,n+1,"pair:lj3");
pair_lj_smooth.cpp:  memory->create(lj4,n+1,n+1,"pair:lj4");
pair_lj_smooth.cpp:  memory->create(ljsw0,n+1,n+1,"pair:ljsw0");
pair_lj_smooth.cpp:  memory->create(ljsw1,n+1,n+1,"pair:ljsw1");
pair_lj_smooth.cpp:  memory->create(ljsw2,n+1,n+1,"pair:ljsw2");
pair_lj_smooth.cpp:  memory->create(ljsw3,n+1,n+1,"pair:ljsw3");
pair_lj_smooth.cpp:  memory->create(ljsw4,n+1,n+1,"pair:ljsw4");
pair_lj_smooth.cpp:  memory->create(offset,n+1,n+1,"pair:offset");
pair_lj_smooth_linear.cpp:    memory->destroy(setflag);
pair_lj_smooth_linear.cpp:    memory->destroy(cutsq);
pair_lj_smooth_linear.cpp:    memory->destroy(cut);
pair_lj_smooth_linear.cpp:    memory->destroy(epsilon);
pair_lj_smooth_linear.cpp:    memory->destroy(sigma);
pair_lj_smooth_linear.cpp:    memory->destroy(ljcut);
pair_lj_smooth_linear.cpp:    memory->destroy(dljcut);
pair_lj_smooth_linear.cpp:    memory->destroy(lj1);
pair_lj_smooth_linear.cpp:    memory->destroy(lj2);
pair_lj_smooth_linear.cpp:    memory->destroy(lj3);
pair_lj_smooth_linear.cpp:    memory->destroy(lj4);
pair_lj_smooth_linear.cpp:  memory->create(setflag,n+1,n+1,"pair:setflag");
pair_lj_smooth_linear.cpp:  memory->create(cutsq,n+1,n+1,"pair:cutsq");
pair_lj_smooth_linear.cpp:  memory->create(cut,n+1,n+1,"pair:cut");
pair_lj_smooth_linear.cpp:  memory->create(epsilon,n+1,n+1,"pair:epsilon");
pair_lj_smooth_linear.cpp:  memory->create(sigma,n+1,n+1,"pair:sigma");
pair_lj_smooth_linear.cpp:  memory->create(ljcut,n+1,n+1,"pair:ljcut");
pair_lj_smooth_linear.cpp:  memory->create(dljcut,n+1,n+1,"pair:dljcut");
pair_lj_smooth_linear.cpp:  memory->create(lj1,n+1,n+1,"pair:lj1");
pair_lj_smooth_linear.cpp:  memory->create(lj2,n+1,n+1,"pair:lj2");
pair_lj_smooth_linear.cpp:  memory->create(lj3,n+1,n+1,"pair:lj3");
pair_lj_smooth_linear.cpp:  memory->create(lj4,n+1,n+1,"pair:lj4");
pair_morse.cpp:    memory->destroy(setflag);
pair_morse.cpp:    memory->destroy(cutsq);
pair_morse.cpp:    memory->destroy(cut);
pair_morse.cpp:    memory->destroy(d0);
pair_morse.cpp:    memory->destroy(alpha);
pair_morse.cpp:    memory->destroy(r0);
pair_morse.cpp:    memory->destroy(morse1);
pair_morse.cpp:    memory->destroy(offset);
pair_morse.cpp:  memory->create(setflag,n+1,n+1,"pair:setflag");
pair_morse.cpp:  memory->create(cutsq,n+1,n+1,"pair:cutsq");
pair_morse.cpp:  memory->create(cut,n+1,n+1,"pair:cut");
pair_morse.cpp:  memory->create(d0,n+1,n+1,"pair:d0");
pair_morse.cpp:  memory->create(alpha,n+1,n+1,"pair:alpha");
pair_morse.cpp:  memory->create(r0,n+1,n+1,"pair:r0");
pair_morse.cpp:  memory->create(morse1,n+1,n+1,"pair:morse1");
pair_morse.cpp:  memory->create(offset,n+1,n+1,"pair:offset");
pair_soft.cpp:    memory->destroy(setflag);
pair_soft.cpp:    memory->destroy(cutsq);
pair_soft.cpp:    memory->destroy(prefactor);
pair_soft.cpp:    memory->destroy(cut);
pair_soft.cpp:  memory->create(setflag,n+1,n+1,"pair:setflag");
pair_soft.cpp:  memory->create(cutsq,n+1,n+1,"pair:cutsq");
pair_soft.cpp:  memory->create(prefactor,n+1,n+1,"pair:prefactor");
pair_soft.cpp:  memory->create(cut,n+1,n+1,"pair:cut");
pair_sw.cpp:  memory->destroy(params);
pair_sw.cpp:  memory->destroy(elem2param);
pair_sw.cpp:    memory->destroy(setflag);
pair_sw.cpp:    memory->destroy(cutsq);
pair_sw.cpp:  memory->create(setflag,n+1,n+1,"pair:setflag");
pair_sw.cpp:  memory->create(cutsq,n+1,n+1,"pair:cutsq");
pair_sw.cpp:  memory->sfree(params);
pair_sw.cpp:      params = (Param *) memory->srealloc(params,maxparam*sizeof(Param),
pair_sw.cpp:  memory->destroy(elem2param);
pair_sw.cpp:  memory->create(elem2param,nelements,nelements,nelements,"pair:elem2param");
pair_table.cpp:  memory->sfree(tables);
pair_table.cpp:    memory->destroy(setflag);
pair_table.cpp:    memory->destroy(cutsq);
pair_table.cpp:    memory->destroy(tabindex);
pair_table.cpp:  memory->create(setflag,nt+1,nt+1,"pair:setflag");
pair_table.cpp:  memory->create(cutsq,nt+1,nt+1,"pair:cutsq");
pair_table.cpp:  memory->create(tabindex,nt+1,nt+1,"pair:tabindex");
pair_table.cpp:  memory->sfree(tables);
pair_table.cpp:    memory->destroy(setflag);
pair_table.cpp:    memory->destroy(cutsq);
pair_table.cpp:    memory->destroy(tabindex);
pair_table.cpp:    memory->srealloc(tables,(ntables+1)*sizeof(Table),"pair:tables");
pair_table.cpp:  memory->create(tb->rfile,tb->ninput,"pair:rfile");
pair_table.cpp:  memory->create(tb->efile,tb->ninput,"pair:efile");
pair_table.cpp:  memory->create(tb->ffile,tb->ninput,"pair:ffile");
pair_table.cpp:    memory->create(tb->rfile,tb->ninput,"pair:rfile");
pair_table.cpp:    memory->create(tb->efile,tb->ninput,"pair:efile");
pair_table.cpp:    memory->create(tb->ffile,tb->ninput,"pair:ffile");
pair_table.cpp:  memory->create(tb->e2file,tb->ninput,"pair:e2file");
pair_table.cpp:  memory->create(tb->f2file,tb->ninput,"pair:f2file");
pair_table.cpp:    memory->create(tb->e,tlm1,"pair:e");
pair_table.cpp:    memory->create(tb->f,tlm1,"pair:f");
pair_table.cpp:    memory->create(tb->rsq,tablength,"pair:rsq");
pair_table.cpp:    memory->create(tb->e,tablength,"pair:e");
pair_table.cpp:    memory->create(tb->f,tablength,"pair:f");
pair_table.cpp:    memory->create(tb->de,tlm1,"pair:de");
pair_table.cpp:    memory->create(tb->df,tlm1,"pair:df");
pair_table.cpp:    memory->create(tb->rsq,tablength,"pair:rsq");
pair_table.cpp:    memory->create(tb->e,tablength,"pair:e");
pair_table.cpp:    memory->create(tb->f,tablength,"pair:f");
pair_table.cpp:    memory->create(tb->e2,tablength,"pair:e2");
pair_table.cpp:    memory->create(tb->f2,tablength,"pair:f2");
pair_table.cpp:    memory->create(tb->rsq,ntable,"pair:rsq");
pair_table.cpp:    memory->create(tb->e,ntable,"pair:e");
pair_table.cpp:    memory->create(tb->f,ntable,"pair:f");
pair_table.cpp:    memory->create(tb->de,ntable,"pair:de");
pair_table.cpp:    memory->create(tb->df,ntable,"pair:df");
pair_table.cpp:    memory->create(tb->drsq,ntable,"pair:drsq");
pair_table.cpp:  memory->destroy(tb->rfile);
pair_table.cpp:  memory->destroy(tb->efile);
pair_table.cpp:  memory->destroy(tb->ffile);
pair_table.cpp:  memory->destroy(tb->e2file);
pair_table.cpp:  memory->destroy(tb->f2file);
pair_table.cpp:  memory->destroy(tb->rsq);
pair_table.cpp:  memory->destroy(tb->drsq);
pair_table.cpp:  memory->destroy(tb->e);
pair_table.cpp:  memory->destroy(tb->de);
pair_table.cpp:  memory->destroy(tb->f);
pair_table.cpp:  memory->destroy(tb->df);
pair_table.cpp:  memory->destroy(tb->e2);
pair_table.cpp:  memory->destroy(tb->f2);
pair_tersoff.cpp:  memory->destroy(params);
pair_tersoff.cpp:  memory->destroy(elem2param);
pair_tersoff.cpp:    memory->destroy(setflag);
pair_tersoff.cpp:    memory->destroy(cutsq);
pair_tersoff.cpp:  memory->create(setflag,n+1,n+1,"pair:setflag");
pair_tersoff.cpp:  memory->create(cutsq,n+1,n+1,"pair:cutsq");
pair_tersoff.cpp:  memory->sfree(params);
pair_tersoff.cpp:      params = (Param *) memory->srealloc(params,maxparam*sizeof(Param),
pair_tersoff.cpp:  memory->destroy(elem2param);
pair_tersoff.cpp:  memory->create(elem2param,nelements,nelements,nelements,"pair:elem2param");
pair_tersoff_zbl.cpp:  memory->sfree(params);
pair_tersoff_zbl.cpp:      params = (Param *) memory->srealloc(params,maxparam*sizeof(Param),
pair_yukawa.cpp:    memory->destroy(setflag);
pair_yukawa.cpp:    memory->destroy(cutsq);
pair_yukawa.cpp:    memory->destroy(rad);
pair_yukawa.cpp:    memory->destroy(cut);
pair_yukawa.cpp:    memory->destroy(a);
pair_yukawa.cpp:    memory->destroy(offset);
pair_yukawa.cpp:  memory->create(setflag,n+1,n+1,"pair:setflag");
pair_yukawa.cpp:  memory->create(cutsq,n+1,n+1,"pair:cutsq");
pair_yukawa.cpp:  memory->create(rad,n+1,"pair:rad");
pair_yukawa.cpp:  memory->create(cut,n+1,n+1,"pair:cut");
pair_yukawa.cpp:  memory->create(a,n+1,n+1,"pair:a");
pair_yukawa.cpp:  memory->create(offset,n+1,n+1,"pair:offset");
pppm_cg.cpp:  memory->destroy(is_charged);
pppm_cg.cpp:    memory->destroy(part2grid);
pppm_cg.cpp:    memory->destroy(is_charged);
pppm_cg.cpp:    memory->create(part2grid,nmax,3,"pppm:part2grid");
pppm_cg.cpp:    memory->create(is_charged,nmax,"pppm/cg:is_charged");
pppm.cpp:  memory->create(acons,8,7,"pppm:acons");
pppm.cpp:  memory->destroy(part2grid);
pppm.cpp:  memory->destroy(acons);
pppm.cpp:    memory->destroy(part2grid);
pppm.cpp:    memory->create(part2grid,nmax,3,"pppm:part2grid");
pppm.cpp:  memory->create3d_offset(density_brick,nzlo_out,nzhi_out,nylo_out,nyhi_out,
pppm.cpp:  memory->create(density_fft,nfft_both,"pppm:density_fft");
pppm.cpp:  memory->create(greensfn,nfft_both,"pppm:greensfn");
pppm.cpp:  memory->create(work1,2*nfft_both,"pppm:work1");
pppm.cpp:  memory->create(work2,2*nfft_both,"pppm:work2");
pppm.cpp:  memory->create(vg,nfft_both,6,"pppm:vg");
pppm.cpp:  memory->create1d_offset(fkx,nxlo_fft,nxhi_fft,"pppm:fkx");
pppm.cpp:  memory->create1d_offset(fky,nylo_fft,nyhi_fft,"pppm:fky");
pppm.cpp:  memory->create1d_offset(fkz,nzlo_fft,nzhi_fft,"pppm:fkz");
pppm.cpp:  memory->create(buf1,nbuf,"pppm:buf1");
pppm.cpp:  memory->create(buf2,nbuf,"pppm:buf2");
pppm.cpp:    memory->create3d_offset(u_brick,nzlo_out,nzhi_out,nylo_out,nyhi_out,
pppm.cpp:    memory->create(sf_precoeff1,nfft_both,"pppm:sf_precoeff1");
pppm.cpp:    memory->create(sf_precoeff2,nfft_both,"pppm:sf_precoeff2");
pppm.cpp:    memory->create(sf_precoeff3,nfft_both,"pppm:sf_precoeff3");
pppm.cpp:    memory->create(sf_precoeff4,nfft_both,"pppm:sf_precoeff4");
pppm.cpp:    memory->create(sf_precoeff5,nfft_both,"pppm:sf_precoeff5");
pppm.cpp:    memory->create(sf_precoeff6,nfft_both,"pppm:sf_precoeff6");
pppm.cpp:    memory->create3d_offset(vdx_brick,nzlo_out,nzhi_out,nylo_out,nyhi_out,
pppm.cpp:    memory->create3d_offset(vdy_brick,nzlo_out,nzhi_out,nylo_out,nyhi_out,
pppm.cpp:    memory->create3d_offset(vdz_brick,nzlo_out,nzhi_out,nylo_out,nyhi_out,
pppm.cpp:  memory->create(gf_b,order,"pppm:gf_b");
pppm.cpp:  memory->create2d_offset(rho1d,3,-order/2,order/2,"pppm:rho1d");
pppm.cpp:  memory->create2d_offset(drho1d,3,-order/2,order/2,"pppm:drho1d");
pppm.cpp:  memory->create2d_offset(rho_coeff,order,(1-order)/2,order/2,"pppm:rho_coeff");
pppm.cpp:  memory->create2d_offset(drho_coeff,order,(1-order)/2,order/2,
pppm.cpp:    memory->create3d_offset(u_brick,nzlo_out,nzhi_out,nylo_out,nyhi_out,
pppm.cpp:  memory->create3d_offset(v0_brick,nzlo_out,nzhi_out,nylo_out,nyhi_out,
pppm.cpp:  memory->create3d_offset(v1_brick,nzlo_out,nzhi_out,nylo_out,nyhi_out,
pppm.cpp:  memory->create3d_offset(v2_brick,nzlo_out,nzhi_out,nylo_out,nyhi_out,
pppm.cpp:  memory->create3d_offset(v3_brick,nzlo_out,nzhi_out,nylo_out,nyhi_out,
pppm.cpp:  memory->create3d_offset(v4_brick,nzlo_out,nzhi_out,nylo_out,nyhi_out,
pppm.cpp:  memory->create3d_offset(v5_brick,nzlo_out,nzhi_out,nylo_out,nyhi_out,
pppm.cpp:  memory->create(buf3,nbuf_peratom,"pppm:buf3");
pppm.cpp:  memory->create(buf4,nbuf_peratom,"pppm:buf4");
pppm.cpp:  memory->destroy3d_offset(density_brick,nzlo_out,nylo_out,nxlo_out);
pppm.cpp:    memory->destroy3d_offset(u_brick,nzlo_out,nylo_out,nxlo_out);
pppm.cpp:    memory->destroy(sf_precoeff1);
pppm.cpp:    memory->destroy(sf_precoeff2);
pppm.cpp:    memory->destroy(sf_precoeff3);
pppm.cpp:    memory->destroy(sf_precoeff4);
pppm.cpp:    memory->destroy(sf_precoeff5);
pppm.cpp:    memory->destroy(sf_precoeff6);
pppm.cpp:    memory->destroy3d_offset(vdx_brick,nzlo_out,nylo_out,nxlo_out);
pppm.cpp:    memory->destroy3d_offset(vdy_brick,nzlo_out,nylo_out,nxlo_out);
pppm.cpp:    memory->destroy3d_offset(vdz_brick,nzlo_out,nylo_out,nxlo_out);
pppm.cpp:  memory->destroy(density_fft);
pppm.cpp:  memory->destroy(greensfn);
pppm.cpp:  memory->destroy(work1);
pppm.cpp:  memory->destroy(work2);
pppm.cpp:  memory->destroy(vg);
pppm.cpp:  memory->destroy1d_offset(fkx,nxlo_fft);
pppm.cpp:  memory->destroy1d_offset(fky,nylo_fft);
pppm.cpp:  memory->destroy1d_offset(fkz,nzlo_fft);
pppm.cpp:  memory->destroy(buf1);
pppm.cpp:  memory->destroy(buf2);
pppm.cpp:  memory->destroy(gf_b);
pppm.cpp:  memory->destroy2d_offset(rho1d,-order/2);
pppm.cpp:  memory->destroy2d_offset(drho1d,-order/2);
pppm.cpp:  memory->destroy2d_offset(rho_coeff,(1-order)/2);
pppm.cpp:  memory->destroy2d_offset(drho_coeff,(1-order)/2);
pppm.cpp:  memory->destroy3d_offset(v0_brick,nzlo_out,nylo_out,nxlo_out);
pppm.cpp:  memory->destroy3d_offset(v1_brick,nzlo_out,nylo_out,nxlo_out);
pppm.cpp:  memory->destroy3d_offset(v2_brick,nzlo_out,nylo_out,nxlo_out);
pppm.cpp:  memory->destroy3d_offset(v3_brick,nzlo_out,nylo_out,nxlo_out);
pppm.cpp:  memory->destroy3d_offset(v4_brick,nzlo_out,nylo_out,nxlo_out);
pppm.cpp:  memory->destroy3d_offset(v5_brick,nzlo_out,nylo_out,nxlo_out);
pppm.cpp:    memory->destroy3d_offset(u_brick,nzlo_out,nylo_out,nxlo_out);
pppm.cpp:  memory->destroy(buf3);
pppm.cpp:  memory->destroy(buf4);
pppm.cpp:  memory->create2d_offset(a,order,-order,order,"pppm:a");
pppm.cpp:  memory->destroy2d_offset(a,-order);
pppm.cpp:  memory->create3d_offset(density_A_brick,nzlo_out,nzhi_out,nylo_out,nyhi_out,
pppm.cpp:  memory->create3d_offset(density_B_brick,nzlo_out,nzhi_out,nylo_out,nyhi_out,
pppm.cpp:  memory->create(density_A_fft,nfft_both,"pppm:density_A_fft");
pppm.cpp:  memory->create(density_B_fft,nfft_both,"pppm:density_B_fft");
pppm.cpp:  memory->destroy3d_offset(density_A_brick,nzlo_out,nylo_out,nxlo_out);
pppm.cpp:  memory->destroy3d_offset(density_B_brick,nzlo_out,nylo_out,nxlo_out);
pppm.cpp:  memory->destroy(density_A_fft);
pppm.cpp:  memory->destroy(density_B_fft);
pppm_disp.cpp:  memory->destroy(part2grid);
pppm_disp.cpp:  memory->destroy(part2grid_6);
pppm_disp.cpp:  memory->destroy(com_order);
pppm_disp.cpp:  memory->destroy(com_each);
pppm_disp.cpp:  memory->destroy(dict_send);
pppm_disp.cpp:  memory->destroy(dict_rec);
pppm_disp.cpp:  memory->destroy(splitbuf1);
pppm_disp.cpp:  memory->destroy(splitbuf2);
pppm_disp.cpp:    if (function[0]) memory->destroy(part2grid);
pppm_disp.cpp:    if (function[1] + function[2]) memory->destroy(part2grid_6);
pppm_disp.cpp:    if (function[0]) memory->create(part2grid,nmax,3,"pppm/disp:part2grid");
pppm_disp.cpp:    if (function[1] + function[2]) memory->create(part2grid_6,nmax,3,"pppm/disp:part2grid_6");
pppm_disp.cpp:    memory->create(work1,2*nfft_both,"pppm/disp:work1");
pppm_disp.cpp:    memory->create(work2,2*nfft_both,"pppm/disp:work2");
pppm_disp.cpp:    memory->create1d_offset(fkx,nxlo_fft,nxhi_fft,"pppm/disp:fkx");
pppm_disp.cpp:    memory->create1d_offset(fky,nylo_fft,nyhi_fft,"pppm/disp:fky");
pppm_disp.cpp:    memory->create1d_offset(fkz,nzlo_fft,nzhi_fft,"pppm/disp:fkz");
pppm_disp.cpp:    memory->create1d_offset(fkx2,nxlo_fft,nxhi_fft,"pppm/disp:fkx2");
pppm_disp.cpp:    memory->create1d_offset(fky2,nylo_fft,nyhi_fft,"pppm/disp:fky2");
pppm_disp.cpp:    memory->create1d_offset(fkz2,nzlo_fft,nzhi_fft,"pppm/disp:fkz2");
pppm_disp.cpp:    memory->create(gf_b,order,"pppm/disp:gf_b");
pppm_disp.cpp:    memory->create2d_offset(rho1d,3,-order/2,order/2,"pppm/disp:rho1d");
pppm_disp.cpp:    memory->create2d_offset(rho_coeff,order,(1-order)/2,order/2,"pppm/disp:rho_coeff");
pppm_disp.cpp:    memory->create2d_offset(drho1d,3,-order/2,order/2,"pppm/disp:rho1d");
pppm_disp.cpp:    memory->create2d_offset(drho_coeff,order,(1-order)/2,order/2,"pppm/disp:drho_coeff");
pppm_disp.cpp:    memory->create(buf1,nbuf,"pppm/disp:buf1");
pppm_disp.cpp:    memory->create(buf2,nbuf,"pppm/disp:buf2");
pppm_disp.cpp:    memory->create(greensfn,nfft_both,"pppm/disp:greensfn");
pppm_disp.cpp:    memory->create(vg,nfft_both,6,"pppm/disp:vg");
pppm_disp.cpp:    memory->create(vg2,nfft_both,3,"pppm/disp:vg2");
pppm_disp.cpp:    memory->create3d_offset(density_brick,nzlo_out,nzhi_out,nylo_out,nyhi_out,
pppm_disp.cpp:      memory->create3d_offset(u_brick,nzlo_out,nzhi_out,nylo_out,nyhi_out,
pppm_disp.cpp:      memory->create(sf_precoeff1,nfft_both,"pppm/disp:sf_precoeff1");
pppm_disp.cpp:      memory->create(sf_precoeff2,nfft_both,"pppm/disp:sf_precoeff2");
pppm_disp.cpp:      memory->create(sf_precoeff3,nfft_both,"pppm/disp:sf_precoeff3");
pppm_disp.cpp:      memory->create(sf_precoeff4,nfft_both,"pppm/disp:sf_precoeff4");
pppm_disp.cpp:      memory->create(sf_precoeff5,nfft_both,"pppm/disp:sf_precoeff5");
pppm_disp.cpp:      memory->create(sf_precoeff6,nfft_both,"pppm/disp:sf_precoeff6");
pppm_disp.cpp:      memory->create3d_offset(vdx_brick,nzlo_out,nzhi_out,nylo_out,nyhi_out,
pppm_disp.cpp:      memory->create3d_offset(vdy_brick,nzlo_out,nzhi_out,nylo_out,nyhi_out,
pppm_disp.cpp:      memory->create3d_offset(vdz_brick,nzlo_out,nzhi_out,nylo_out,nyhi_out,
pppm_disp.cpp:    memory->create(density_fft,nfft_both,"pppm/disp:density_fft");
pppm_disp.cpp:    memory->create(work1_6,2*nfft_both_6,"pppm/disp:work1_6");
pppm_disp.cpp:    memory->create(work2_6,2*nfft_both_6,"pppm/disp:work2_6");
pppm_disp.cpp:    memory->create1d_offset(fkx_6,nxlo_fft_6,nxhi_fft_6,"pppm/disp:fkx_6");
pppm_disp.cpp:    memory->create1d_offset(fky_6,nylo_fft_6,nyhi_fft_6,"pppm/disp:fky_6");
pppm_disp.cpp:    memory->create1d_offset(fkz_6,nzlo_fft_6,nzhi_fft_6,"pppm/disp:fkz_6");
pppm_disp.cpp:    memory->create1d_offset(fkx2_6,nxlo_fft_6,nxhi_fft_6,"pppm/disp:fkx2_6");
pppm_disp.cpp:    memory->create1d_offset(fky2_6,nylo_fft_6,nyhi_fft_6,"pppm/disp:fky2_6");
pppm_disp.cpp:    memory->create1d_offset(fkz2_6,nzlo_fft_6,nzhi_fft_6,"pppm/disp:fkz2_6");
pppm_disp.cpp:    memory->create(gf_b_6,order_6,"pppm/disp:gf_b_6");
pppm_disp.cpp:    memory->create2d_offset(rho1d_6,3,-order_6/2,order_6/2,"pppm/disp:rho1d_6");
pppm_disp.cpp:    memory->create2d_offset(rho_coeff_6,order_6,(1-order_6)/2,order_6/2,"pppm/disp:rho_coeff_6");
pppm_disp.cpp:    memory->create2d_offset(drho1d_6,3,-order_6/2,order_6/2,"pppm/disp:drho1d_6");
pppm_disp.cpp:    memory->create2d_offset(drho_coeff_6,order_6,(1-order_6)/2,order_6/2,"pppm/disp:drho_coeff_6");
pppm_disp.cpp:    memory->create(buf1_6,nbuf_6,"pppm/disp:buf1_6");
pppm_disp.cpp:    memory->create(buf2_6,nbuf_6,"pppm/disp:buf2_6");
pppm_disp.cpp:    memory->create(greensfn_6,nfft_both_6,"pppm/disp:greensfn_6");
pppm_disp.cpp:    memory->create(vg_6,nfft_both_6,6,"pppm/disp:vg_6");
pppm_disp.cpp:    memory->create(vg2_6,nfft_both_6,3,"pppm/disp:vg2_6");
pppm_disp.cpp:    memory->create3d_offset(density_brick_g,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:      memory->create3d_offset(u_brick_g,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:      memory->create(sf_precoeff1_6,nfft_both_6,"pppm/disp:sf_precoeff1_6");
pppm_disp.cpp:      memory->create(sf_precoeff2_6,nfft_both_6,"pppm/disp:sf_precoeff2_6");
pppm_disp.cpp:      memory->create(sf_precoeff3_6,nfft_both_6,"pppm/disp:sf_precoeff3_6");
pppm_disp.cpp:      memory->create(sf_precoeff4_6,nfft_both_6,"pppm/disp:sf_precoeff4_6");
pppm_disp.cpp:      memory->create(sf_precoeff5_6,nfft_both_6,"pppm/disp:sf_precoeff5_6");
pppm_disp.cpp:      memory->create(sf_precoeff6_6,nfft_both_6,"pppm/disp:sf_precoeff6_6");
pppm_disp.cpp:      memory->create3d_offset(vdx_brick_g,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:      memory->create3d_offset(vdy_brick_g,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:      memory->create3d_offset(vdz_brick_g,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:    memory->create(density_fft_g,nfft_both_6,"pppm/disp:density_fft_g");
pppm_disp.cpp:    memory->create(work1_6,2*nfft_both_6,"pppm/disp:work1_6");
pppm_disp.cpp:    memory->create(work2_6,2*nfft_both_6,"pppm/disp:work2_6");
pppm_disp.cpp:    memory->create1d_offset(fkx_6,nxlo_fft_6,nxhi_fft_6,"pppm/disp:fkx_6");
pppm_disp.cpp:    memory->create1d_offset(fky_6,nylo_fft_6,nyhi_fft_6,"pppm/disp:fky_6");
pppm_disp.cpp:    memory->create1d_offset(fkz_6,nzlo_fft_6,nzhi_fft_6,"pppm/disp:fkz_6");
pppm_disp.cpp:    memory->create1d_offset(fkx2_6,nxlo_fft_6,nxhi_fft_6,"pppm/disp:fkx2_6");
pppm_disp.cpp:    memory->create1d_offset(fky2_6,nylo_fft_6,nyhi_fft_6,"pppm/disp:fky2_6");
pppm_disp.cpp:    memory->create1d_offset(fkz2_6,nzlo_fft_6,nzhi_fft_6,"pppm/disp:fkz2_6");
pppm_disp.cpp:    memory->create(gf_b_6,order_6,"pppm/disp:gf_b_6");
pppm_disp.cpp:    memory->create2d_offset(rho1d_6,3,-order_6/2,order_6/2,"pppm/disp:rho1d_6");
pppm_disp.cpp:    memory->create2d_offset(rho_coeff_6,order_6,(1-order_6)/2,order_6/2,"pppm/disp:rho_coeff_6");
pppm_disp.cpp:    memory->create2d_offset(drho1d_6,3,-order_6/2,order_6/2,"pppm/disp:drho1d_6");
pppm_disp.cpp:    memory->create2d_offset(drho_coeff_6,order_6,(1-order_6)/2,order_6/2,"pppm/disp:drho_coeff_6");
pppm_disp.cpp:    memory->create(buf1_6,7*nbuf_6,"pppm/disp:buf1_6");
pppm_disp.cpp:    memory->create(buf2_6,7*nbuf_6,"pppm/disp:buf2_6");
pppm_disp.cpp:    memory->create(split_1,2*nfft_both_6 , "pppm/disp:split_1");
pppm_disp.cpp:    memory->create(split_2,2*nfft_both_6 , "pppm/disp:split_2");
pppm_disp.cpp:    memory->create(greensfn_6,nfft_both_6,"pppm/disp:greensfn_6");
pppm_disp.cpp:    memory->create(vg_6,nfft_both_6,6,"pppm/disp:vg_6");
pppm_disp.cpp:    memory->create(vg2_6,nfft_both_6,3,"pppm/disp:vg2_6");
pppm_disp.cpp:    memory->create3d_offset(density_brick_a0,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:    memory->create3d_offset(density_brick_a1,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:    memory->create3d_offset(density_brick_a2,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:    memory->create3d_offset(density_brick_a3,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:    memory->create3d_offset(density_brick_a4,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:    memory->create3d_offset(density_brick_a5,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:    memory->create3d_offset(density_brick_a6,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:    memory->create(density_fft_a0,nfft_both_6,"pppm/disp:density_fft_a0");
pppm_disp.cpp:    memory->create(density_fft_a1,nfft_both_6,"pppm/disp:density_fft_a1");
pppm_disp.cpp:    memory->create(density_fft_a2,nfft_both_6,"pppm/disp:density_fft_a2");
pppm_disp.cpp:    memory->create(density_fft_a3,nfft_both_6,"pppm/disp:density_fft_a3");
pppm_disp.cpp:    memory->create(density_fft_a4,nfft_both_6,"pppm/disp:density_fft_a4");
pppm_disp.cpp:    memory->create(density_fft_a5,nfft_both_6,"pppm/disp:density_fft_a5");
pppm_disp.cpp:    memory->create(density_fft_a6,nfft_both_6,"pppm/disp:density_fft_a6");
pppm_disp.cpp:      memory->create3d_offset(u_brick_a0,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:      memory->create3d_offset(u_brick_a1,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:      memory->create3d_offset(u_brick_a2,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:      memory->create3d_offset(u_brick_a3,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:      memory->create3d_offset(u_brick_a4,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:      memory->create3d_offset(u_brick_a5,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:      memory->create3d_offset(u_brick_a6,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:      memory->create(sf_precoeff1_6,nfft_both_6,"pppm/disp:sf_precoeff1_6");
pppm_disp.cpp:      memory->create(sf_precoeff2_6,nfft_both_6,"pppm/disp:sf_precoeff2_6");
pppm_disp.cpp:      memory->create(sf_precoeff3_6,nfft_both_6,"pppm/disp:sf_precoeff3_6");
pppm_disp.cpp:      memory->create(sf_precoeff4_6,nfft_both_6,"pppm/disp:sf_precoeff4_6");
pppm_disp.cpp:      memory->create(sf_precoeff5_6,nfft_both_6,"pppm/disp:sf_precoeff5_6");
pppm_disp.cpp:      memory->create(sf_precoeff6_6,nfft_both_6,"pppm/disp:sf_precoeff6_6");
pppm_disp.cpp:      memory->create3d_offset(vdx_brick_a0,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:      memory->create3d_offset(vdy_brick_a0,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:      memory->create3d_offset(vdz_brick_a0,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:      memory->create3d_offset(vdx_brick_a1,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:      memory->create3d_offset(vdy_brick_a1,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:      memory->create3d_offset(vdz_brick_a1,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:      memory->create3d_offset(vdx_brick_a2,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:      memory->create3d_offset(vdy_brick_a2,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:      memory->create3d_offset(vdz_brick_a2,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:      memory->create3d_offset(vdx_brick_a3,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:      memory->create3d_offset(vdy_brick_a3,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:      memory->create3d_offset(vdz_brick_a3,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:      memory->create3d_offset(vdx_brick_a4,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:      memory->create3d_offset(vdy_brick_a4,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:      memory->create3d_offset(vdz_brick_a4,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:      memory->create3d_offset(vdx_brick_a5,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:      memory->create3d_offset(vdy_brick_a5,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:      memory->create3d_offset(vdz_brick_a5,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:      memory->create3d_offset(vdx_brick_a6,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:      memory->create3d_offset(vdy_brick_a6,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:      memory->create3d_offset(vdz_brick_a6,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:    memory->create(buf3,nbuf_pa,"pppm/disp:buf3");
pppm_disp.cpp:    memory->create(buf4,nbuf_pa,"pppm/disp:buf4");
pppm_disp.cpp:      memory->create3d_offset(u_brick,nzlo_out,nzhi_out,nylo_out,nyhi_out,
pppm_disp.cpp:    memory->create3d_offset(v0_brick,nzlo_out,nzhi_out,nylo_out,nyhi_out,
pppm_disp.cpp:    memory->create3d_offset(v1_brick,nzlo_out,nzhi_out,nylo_out,nyhi_out,
pppm_disp.cpp:    memory->create3d_offset(v2_brick,nzlo_out,nzhi_out,nylo_out,nyhi_out,
pppm_disp.cpp:    memory->create3d_offset(v3_brick,nzlo_out,nzhi_out,nylo_out,nyhi_out,
pppm_disp.cpp:    memory->create3d_offset(v4_brick,nzlo_out,nzhi_out,nylo_out,nyhi_out,
pppm_disp.cpp:    memory->create3d_offset(v5_brick,nzlo_out,nzhi_out,nylo_out,nyhi_out,
pppm_disp.cpp:    memory->create(buf3_6,nbuf_pa_6,"pppm/disp:buf3_6");
pppm_disp.cpp:    memory->create(buf4_6,nbuf_pa_6,"pppm/disp:buf4_6");
pppm_disp.cpp:      memory->create3d_offset(u_brick_g,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:    memory->create3d_offset(v0_brick_g,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:    memory->create3d_offset(v1_brick_g,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:    memory->create3d_offset(v2_brick_g,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:    memory->create3d_offset(v3_brick_g,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:    memory->create3d_offset(v4_brick_g,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:    memory->create3d_offset(v5_brick_g,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:    memory->create(buf3_6,7*nbuf_pa_6,"pppm/disp:buf3");
pppm_disp.cpp:    memory->create(buf4_6,7*nbuf_pa_6,"pppm/disp:buf4");
pppm_disp.cpp:      memory->create3d_offset(u_brick_a0,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:      memory->create3d_offset(u_brick_a1,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:      memory->create3d_offset(u_brick_a2,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:      memory->create3d_offset(u_brick_a3,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:      memory->create3d_offset(u_brick_a4,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:      memory->create3d_offset(u_brick_a5,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:      memory->create3d_offset(u_brick_a6,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:    memory->create3d_offset(v0_brick_a0,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:    memory->create3d_offset(v1_brick_a0,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:    memory->create3d_offset(v2_brick_a0,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:    memory->create3d_offset(v3_brick_a0,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:    memory->create3d_offset(v4_brick_a0,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:    memory->create3d_offset(v5_brick_a0,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:    memory->create3d_offset(v0_brick_a1,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:    memory->create3d_offset(v1_brick_a1,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:    memory->create3d_offset(v2_brick_a1,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:    memory->create3d_offset(v3_brick_a1,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:    memory->create3d_offset(v4_brick_a1,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:    memory->create3d_offset(v5_brick_a1,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:    memory->create3d_offset(v0_brick_a2,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:    memory->create3d_offset(v1_brick_a2,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:    memory->create3d_offset(v2_brick_a2,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:    memory->create3d_offset(v3_brick_a2,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:    memory->create3d_offset(v4_brick_a2,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:    memory->create3d_offset(v5_brick_a2,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:    memory->create3d_offset(v0_brick_a3,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:    memory->create3d_offset(v1_brick_a3,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:    memory->create3d_offset(v2_brick_a3,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:    memory->create3d_offset(v3_brick_a3,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:    memory->create3d_offset(v4_brick_a3,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:    memory->create3d_offset(v5_brick_a3,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:    memory->create3d_offset(v0_brick_a4,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:    memory->create3d_offset(v1_brick_a4,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:    memory->create3d_offset(v2_brick_a4,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:    memory->create3d_offset(v3_brick_a4,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:    memory->create3d_offset(v4_brick_a4,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:    memory->create3d_offset(v5_brick_a4,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:    memory->create3d_offset(v0_brick_a5,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:    memory->create3d_offset(v1_brick_a5,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:    memory->create3d_offset(v2_brick_a5,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:    memory->create3d_offset(v3_brick_a5,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:    memory->create3d_offset(v4_brick_a5,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:    memory->create3d_offset(v5_brick_a5,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:    memory->create3d_offset(v0_brick_a6,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:    memory->create3d_offset(v1_brick_a6,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:    memory->create3d_offset(v2_brick_a6,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:    memory->create3d_offset(v3_brick_a6,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:    memory->create3d_offset(v4_brick_a6,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:    memory->create3d_offset(v5_brick_a6,nzlo_out_6,nzhi_out_6,nylo_out_6,nyhi_out_6,
pppm_disp.cpp:  memory->destroy3d_offset(density_brick,nzlo_out,nylo_out,nxlo_out);
pppm_disp.cpp:  memory->destroy3d_offset(vdx_brick,nzlo_out,nylo_out,nxlo_out);
pppm_disp.cpp:  memory->destroy3d_offset(vdy_brick,nzlo_out,nylo_out,nxlo_out);
pppm_disp.cpp:  memory->destroy3d_offset(vdz_brick,nzlo_out,nylo_out,nxlo_out);
pppm_disp.cpp:  memory->destroy(density_fft);
pppm_disp.cpp:  memory->destroy3d_offset(density_brick_g,nzlo_out_6,nylo_out_6,nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(vdx_brick_g,nzlo_out_6,nylo_out_6,nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(vdy_brick_g,nzlo_out_6,nylo_out_6,nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(vdz_brick_g,nzlo_out_6,nylo_out_6,nxlo_out_6);
pppm_disp.cpp:  memory->destroy(density_fft_g);
pppm_disp.cpp:  memory->destroy3d_offset(density_brick_a0,nzlo_out_6,nylo_out_6,nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(vdx_brick_a0,nzlo_out_6,nylo_out_6,nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(vdy_brick_a0,nzlo_out_6,nylo_out_6,nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(vdz_brick_a0,nzlo_out_6,nylo_out_6,nxlo_out_6);
pppm_disp.cpp:  memory->destroy(density_fft_a0);
pppm_disp.cpp:  memory->destroy3d_offset(density_brick_a1,nzlo_out_6,nylo_out_6,nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(vdx_brick_a1,nzlo_out_6,nylo_out_6,nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(vdy_brick_a1,nzlo_out_6,nylo_out_6,nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(vdz_brick_a1,nzlo_out_6,nylo_out_6,nxlo_out_6);
pppm_disp.cpp:  memory->destroy(density_fft_a1);
pppm_disp.cpp:  memory->destroy3d_offset(density_brick_a2,nzlo_out_6,nylo_out_6,nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(vdx_brick_a2,nzlo_out_6,nylo_out_6,nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(vdy_brick_a2,nzlo_out_6,nylo_out_6,nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(vdz_brick_a2,nzlo_out_6,nylo_out_6,nxlo_out_6);
pppm_disp.cpp:  memory->destroy(density_fft_a2);
pppm_disp.cpp:  memory->destroy3d_offset(density_brick_a3,nzlo_out_6,nylo_out_6,nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(vdx_brick_a3,nzlo_out_6,nylo_out_6,nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(vdy_brick_a3,nzlo_out_6,nylo_out_6,nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(vdz_brick_a3,nzlo_out_6,nylo_out_6,nxlo_out_6);
pppm_disp.cpp:  memory->destroy(density_fft_a3);
pppm_disp.cpp:  memory->destroy3d_offset(density_brick_a4,nzlo_out_6,nylo_out_6,nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(vdx_brick_a4,nzlo_out_6,nylo_out_6,nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(vdy_brick_a4,nzlo_out_6,nylo_out_6,nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(vdz_brick_a4,nzlo_out_6,nylo_out_6,nxlo_out_6);
pppm_disp.cpp:  memory->destroy(density_fft_a4);
pppm_disp.cpp:  memory->destroy3d_offset(density_brick_a5,nzlo_out_6,nylo_out_6,nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(vdx_brick_a5,nzlo_out_6,nylo_out_6,nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(vdy_brick_a5,nzlo_out_6,nylo_out_6,nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(vdz_brick_a5,nzlo_out_6,nylo_out_6,nxlo_out_6);
pppm_disp.cpp:  memory->destroy(density_fft_a5);
pppm_disp.cpp:  memory->destroy3d_offset(density_brick_a6,nzlo_out_6,nylo_out_6,nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(vdx_brick_a6,nzlo_out_6,nylo_out_6,nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(vdy_brick_a6,nzlo_out_6,nylo_out_6,nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(vdz_brick_a6,nzlo_out_6,nylo_out_6,nxlo_out_6);
pppm_disp.cpp:  memory->destroy(density_fft_a6);
pppm_disp.cpp:  memory->destroy(sf_precoeff1);
pppm_disp.cpp:  memory->destroy(sf_precoeff2);
pppm_disp.cpp:  memory->destroy(sf_precoeff3);
pppm_disp.cpp:  memory->destroy(sf_precoeff4);
pppm_disp.cpp:  memory->destroy(sf_precoeff5);
pppm_disp.cpp:  memory->destroy(sf_precoeff6);
pppm_disp.cpp:  memory->destroy(sf_precoeff1_6);
pppm_disp.cpp:  memory->destroy(sf_precoeff2_6);
pppm_disp.cpp:  memory->destroy(sf_precoeff3_6);
pppm_disp.cpp:  memory->destroy(sf_precoeff4_6);
pppm_disp.cpp:  memory->destroy(sf_precoeff5_6);
pppm_disp.cpp:  memory->destroy(sf_precoeff6_6);
pppm_disp.cpp:  memory->destroy(greensfn);
pppm_disp.cpp:  memory->destroy(greensfn_6);
pppm_disp.cpp:  memory->destroy(work1);
pppm_disp.cpp:  memory->destroy(work2);
pppm_disp.cpp:  memory->destroy(work1_6);
pppm_disp.cpp:  memory->destroy(work2_6);
pppm_disp.cpp:  memory->destroy(vg);
pppm_disp.cpp:  memory->destroy(vg2);
pppm_disp.cpp:  memory->destroy(vg_6);
pppm_disp.cpp:  memory->destroy(vg2_6);
pppm_disp.cpp:  memory->destroy1d_offset(fkx,nxlo_fft);
pppm_disp.cpp:  memory->destroy1d_offset(fky,nylo_fft);
pppm_disp.cpp:  memory->destroy1d_offset(fkz,nzlo_fft);
pppm_disp.cpp:  memory->destroy1d_offset(fkx2,nxlo_fft);
pppm_disp.cpp:  memory->destroy1d_offset(fky2,nylo_fft);
pppm_disp.cpp:  memory->destroy1d_offset(fkz2,nzlo_fft);
pppm_disp.cpp:  memory->destroy1d_offset(fkx_6,nxlo_fft_6);
pppm_disp.cpp:  memory->destroy1d_offset(fky_6,nylo_fft_6);
pppm_disp.cpp:  memory->destroy1d_offset(fkz_6,nzlo_fft_6);
pppm_disp.cpp:  memory->destroy1d_offset(fkx2_6,nxlo_fft_6);
pppm_disp.cpp:  memory->destroy1d_offset(fky2_6,nylo_fft_6);
pppm_disp.cpp:  memory->destroy1d_offset(fkz2_6,nzlo_fft_6);
pppm_disp.cpp:  memory->destroy(buf1);
pppm_disp.cpp:  memory->destroy(buf2);
pppm_disp.cpp:  memory->destroy(buf1_6);
pppm_disp.cpp:  memory->destroy(buf2_6);
pppm_disp.cpp:  memory->destroy(split_1);
pppm_disp.cpp:  memory->destroy(split_2);
pppm_disp.cpp:  memory->destroy(gf_b);
pppm_disp.cpp:  memory->destroy2d_offset(rho1d,-order/2);
pppm_disp.cpp:  memory->destroy2d_offset(rho_coeff,(1-order)/2);
pppm_disp.cpp:  memory->destroy2d_offset(drho1d,-order/2);
pppm_disp.cpp:  memory->destroy2d_offset(drho_coeff, (1-order)/2);
pppm_disp.cpp:  memory->destroy(gf_b_6);
pppm_disp.cpp:  memory->destroy2d_offset(rho1d_6,-order_6/2);
pppm_disp.cpp:  memory->destroy2d_offset(rho_coeff_6,(1-order_6)/2);
pppm_disp.cpp:  memory->destroy2d_offset(drho1d_6,-order_6/2); 
pppm_disp.cpp:  memory->destroy2d_offset(drho_coeff_6,(1-order_6)/2);
pppm_disp.cpp:  memory->destroy3d_offset(u_brick, nzlo_out, nylo_out, nxlo_out);
pppm_disp.cpp:  memory->destroy3d_offset(v0_brick, nzlo_out, nylo_out, nxlo_out);
pppm_disp.cpp:  memory->destroy3d_offset(v1_brick, nzlo_out, nylo_out, nxlo_out);
pppm_disp.cpp:  memory->destroy3d_offset(v2_brick, nzlo_out, nylo_out, nxlo_out);
pppm_disp.cpp:  memory->destroy3d_offset(v3_brick, nzlo_out, nylo_out, nxlo_out);
pppm_disp.cpp:  memory->destroy3d_offset(v4_brick, nzlo_out, nylo_out, nxlo_out);
pppm_disp.cpp:  memory->destroy3d_offset(v5_brick, nzlo_out, nylo_out, nxlo_out);
pppm_disp.cpp:  memory->destroy3d_offset(u_brick_g, nzlo_out_6, nylo_out_6, nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(v0_brick_g, nzlo_out_6, nylo_out_6, nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(v1_brick_g, nzlo_out_6, nylo_out_6, nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(v2_brick_g, nzlo_out_6, nylo_out_6, nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(v3_brick_g, nzlo_out_6, nylo_out_6, nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(v4_brick_g, nzlo_out_6, nylo_out_6, nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(v5_brick_g, nzlo_out_6, nylo_out_6, nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(u_brick_a0, nzlo_out_6, nylo_out_6, nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(v0_brick_a0, nzlo_out_6, nylo_out_6, nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(v1_brick_a0, nzlo_out_6, nylo_out_6, nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(v2_brick_a0, nzlo_out_6, nylo_out_6, nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(v3_brick_a0, nzlo_out_6, nylo_out_6, nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(v4_brick_a0, nzlo_out_6, nylo_out_6, nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(v5_brick_a0, nzlo_out_6, nylo_out_6, nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(u_brick_a1, nzlo_out_6, nylo_out_6, nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(v0_brick_a1, nzlo_out_6, nylo_out_6, nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(v1_brick_a1, nzlo_out_6, nylo_out_6, nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(v2_brick_a1, nzlo_out_6, nylo_out_6, nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(v3_brick_a1, nzlo_out_6, nylo_out_6, nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(v4_brick_a1, nzlo_out_6, nylo_out_6, nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(v5_brick_a1, nzlo_out_6, nylo_out_6, nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(u_brick_a2, nzlo_out_6, nylo_out_6, nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(v0_brick_a2, nzlo_out_6, nylo_out_6, nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(v1_brick_a2, nzlo_out_6, nylo_out_6, nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(v2_brick_a2, nzlo_out_6, nylo_out_6, nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(v3_brick_a2, nzlo_out_6, nylo_out_6, nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(v4_brick_a2, nzlo_out_6, nylo_out_6, nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(v5_brick_a2, nzlo_out_6, nylo_out_6, nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(u_brick_a3, nzlo_out_6, nylo_out_6, nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(v0_brick_a3, nzlo_out_6, nylo_out_6, nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(v1_brick_a3, nzlo_out_6, nylo_out_6, nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(v2_brick_a3, nzlo_out_6, nylo_out_6, nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(v3_brick_a3, nzlo_out_6, nylo_out_6, nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(v4_brick_a3, nzlo_out_6, nylo_out_6, nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(v5_brick_a3, nzlo_out_6, nylo_out_6, nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(u_brick_a4, nzlo_out_6, nylo_out_6, nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(v0_brick_a4, nzlo_out_6, nylo_out_6, nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(v1_brick_a4, nzlo_out_6, nylo_out_6, nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(v2_brick_a4, nzlo_out_6, nylo_out_6, nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(v3_brick_a4, nzlo_out_6, nylo_out_6, nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(v4_brick_a4, nzlo_out_6, nylo_out_6, nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(v5_brick_a4, nzlo_out_6, nylo_out_6, nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(u_brick_a5, nzlo_out_6, nylo_out_6, nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(v0_brick_a5, nzlo_out_6, nylo_out_6, nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(v1_brick_a5, nzlo_out_6, nylo_out_6, nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(v2_brick_a5, nzlo_out_6, nylo_out_6, nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(v3_brick_a5, nzlo_out_6, nylo_out_6, nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(v4_brick_a5, nzlo_out_6, nylo_out_6, nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(v5_brick_a5, nzlo_out_6, nylo_out_6, nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(u_brick_a6, nzlo_out_6, nylo_out_6, nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(v0_brick_a6, nzlo_out_6, nylo_out_6, nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(v1_brick_a6, nzlo_out_6, nylo_out_6, nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(v2_brick_a6, nzlo_out_6, nylo_out_6, nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(v3_brick_a6, nzlo_out_6, nylo_out_6, nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(v4_brick_a6, nzlo_out_6, nylo_out_6, nxlo_out_6);
pppm_disp.cpp:  memory->destroy3d_offset(v5_brick_a6, nzlo_out_6, nylo_out_6, nxlo_out_6);
pppm_disp.cpp:  memory->destroy(buf3);
pppm_disp.cpp:  memory->destroy(buf4);
pppm_disp.cpp:  memory->destroy(buf3_6);
pppm_disp.cpp:  memory->destroy(buf4_6);
pppm_disp.cpp:  memory->create(communication, nprocs, "pppm/disp:communication");
pppm_disp.cpp:  memory->create(com_matrix, nprocs, nprocs, "pppm/disp:com_matrix");
pppm_disp.cpp:  memory->create(com_matrix_all, nprocs, nprocs, "pppm/disp:com_matrix_all");
pppm_disp.cpp:  memory->create(fftpoints, nprocs, 4, "pppm/disp:fftpoints");
pppm_disp.cpp:  memory->create(splitbuf1, com_procs, com_max*2, "pppm/disp:splitbuf1");
pppm_disp.cpp:  memory->create(splitbuf2, com_procs, com_max*2, "pppm/disp:splitbuf2");
pppm_disp.cpp:  memory->create(dict_send, nfft_6, 2, "pppm/disp:dict_send");
pppm_disp.cpp:  memory->create(dict_rec,com_procs, com_max, "pppm/disp:dict_rec");
pppm_disp.cpp:  memory->create(com_each, com_procs, "pppm/disp:com_each");
pppm_disp.cpp:  memory->create(com_order, com_procs, "pppm/disp:com_order");
pppm_disp.cpp:  memory->create(com_send, com_procs, "pppm/disp:com_send");
pppm_disp.cpp:  memory->create(changelist, nfft_6, 5, "pppm/disp:changelist");
pppm_disp.cpp:  memory->destroy(communication);
pppm_disp.cpp:  memory->destroy(com_matrix);
pppm_disp.cpp:  memory->destroy(com_matrix_all);
pppm_disp.cpp:  memory->destroy(fftpoints);
pppm_disp.cpp:  memory->destroy(com_send);
pppm_disp.cpp:  memory->destroy(changelist);
pppm_disp.cpp:  memory->create(busy, nprocs, "pppm/disp:busy");
pppm_disp.cpp:  memory->create(act_point, nprocs, "pppm/disp:actpoint");
pppm_disp.cpp:  memory->destroy(busy);
pppm_disp.cpp:  memory->destroy(act_point);
pppm_disp.cpp:  memory->create2d_offset(a,ord,-ord,ord,"pppm/disp:a");
pppm_disp.cpp:  memory->destroy2d_offset(a,-ord);
pppm_old.cpp:  memory->destroy(part2grid);
pppm_old.cpp:    memory->destroy(part2grid);
pppm_old.cpp:    memory->create(part2grid,nmax,3,"pppm:part2grid");
pppm_old.cpp:  memory->create3d_offset(density_brick,nzlo_out,nzhi_out,nylo_out,nyhi_out,
pppm_old.cpp:  memory->create3d_offset(vdx_brick,nzlo_out,nzhi_out,nylo_out,nyhi_out,
pppm_old.cpp:  memory->create3d_offset(vdy_brick,nzlo_out,nzhi_out,nylo_out,nyhi_out,
pppm_old.cpp:  memory->create3d_offset(vdz_brick,nzlo_out,nzhi_out,nylo_out,nyhi_out,
pppm_old.cpp:  memory->create(density_fft,nfft_both,"pppm:density_fft");
pppm_old.cpp:  memory->create(greensfn,nfft_both,"pppm:greensfn");
pppm_old.cpp:  memory->create(work1,2*nfft_both,"pppm:work1");
pppm_old.cpp:  memory->create(work2,2*nfft_both,"pppm:work2");
pppm_old.cpp:  memory->create(vg,nfft_both,6,"pppm:vg");
pppm_old.cpp:  memory->create1d_offset(fkx,nxlo_fft,nxhi_fft,"pppm:fkx");
pppm_old.cpp:  memory->create1d_offset(fky,nylo_fft,nyhi_fft,"pppm:fky");
pppm_old.cpp:  memory->create1d_offset(fkz,nzlo_fft,nzhi_fft,"pppm:fkz");
pppm_old.cpp:  memory->create(buf1,nbuf,"pppm:buf1");
pppm_old.cpp:  memory->create(buf2,nbuf,"pppm:buf2");
pppm_old.cpp:  memory->create(gf_b,order,"pppm:gf_b");
pppm_old.cpp:  memory->create2d_offset(rho1d,3,-order/2,order/2,"pppm:rho1d");
pppm_old.cpp:  memory->create2d_offset(rho_coeff,order,(1-order)/2,order/2,"pppm:rho_coeff");
pppm_old.cpp:  memory->create3d_offset(u_brick,nzlo_out,nzhi_out,nylo_out,nyhi_out,
pppm_old.cpp:  memory->create3d_offset(v0_brick,nzlo_out,nzhi_out,nylo_out,nyhi_out,
pppm_old.cpp:  memory->create3d_offset(v1_brick,nzlo_out,nzhi_out,nylo_out,nyhi_out,
pppm_old.cpp:  memory->create3d_offset(v2_brick,nzlo_out,nzhi_out,nylo_out,nyhi_out,
pppm_old.cpp:  memory->create3d_offset(v3_brick,nzlo_out,nzhi_out,nylo_out,nyhi_out,
pppm_old.cpp:  memory->create3d_offset(v4_brick,nzlo_out,nzhi_out,nylo_out,nyhi_out,
pppm_old.cpp:  memory->create3d_offset(v5_brick,nzlo_out,nzhi_out,nylo_out,nyhi_out,
pppm_old.cpp:  memory->create(buf3,nbuf_peratom,"pppm:buf3");
pppm_old.cpp:  memory->create(buf4,nbuf_peratom,"pppm:buf4");
pppm_old.cpp:  memory->destroy3d_offset(density_brick,nzlo_out,nylo_out,nxlo_out);
pppm_old.cpp:  memory->destroy3d_offset(vdx_brick,nzlo_out,nylo_out,nxlo_out);
pppm_old.cpp:  memory->destroy3d_offset(vdy_brick,nzlo_out,nylo_out,nxlo_out);
pppm_old.cpp:  memory->destroy3d_offset(vdz_brick,nzlo_out,nylo_out,nxlo_out);
pppm_old.cpp:  memory->destroy(density_fft);
pppm_old.cpp:  memory->destroy(greensfn);
pppm_old.cpp:  memory->destroy(work1);
pppm_old.cpp:  memory->destroy(work2);
pppm_old.cpp:  memory->destroy(vg);
pppm_old.cpp:  memory->destroy1d_offset(fkx,nxlo_fft);
pppm_old.cpp:  memory->destroy1d_offset(fky,nylo_fft);
pppm_old.cpp:  memory->destroy1d_offset(fkz,nzlo_fft);
pppm_old.cpp:  memory->destroy(buf1);
pppm_old.cpp:  memory->destroy(buf2);
pppm_old.cpp:  memory->destroy(gf_b);
pppm_old.cpp:  memory->destroy2d_offset(rho1d,-order/2);
pppm_old.cpp:  memory->destroy2d_offset(rho_coeff,(1-order)/2);
pppm_old.cpp:  memory->destroy3d_offset(u_brick,nzlo_out,nylo_out,nxlo_out);
pppm_old.cpp:  memory->destroy3d_offset(v0_brick,nzlo_out,nylo_out,nxlo_out);
pppm_old.cpp:  memory->destroy3d_offset(v1_brick,nzlo_out,nylo_out,nxlo_out);
pppm_old.cpp:  memory->destroy3d_offset(v2_brick,nzlo_out,nylo_out,nxlo_out);
pppm_old.cpp:  memory->destroy3d_offset(v3_brick,nzlo_out,nylo_out,nxlo_out);
pppm_old.cpp:  memory->destroy3d_offset(v4_brick,nzlo_out,nylo_out,nxlo_out);
pppm_old.cpp:  memory->destroy3d_offset(v5_brick,nzlo_out,nylo_out,nxlo_out);
pppm_old.cpp:  memory->destroy(buf3);
pppm_old.cpp:  memory->destroy(buf4);
pppm_old.cpp:  memory->create(acons,8,7,"pppm:acons");
pppm_old.cpp:  memory->destroy(acons);
pppm_old.cpp:  memory->create2d_offset(a,order,-order,order,"pppm:a");
pppm_old.cpp:  memory->destroy2d_offset(a,-order);
pppm_old.cpp:  memory->create3d_offset(density_A_brick,nzlo_out,nzhi_out,nylo_out,nyhi_out,
pppm_old.cpp:  memory->create3d_offset(density_B_brick,nzlo_out,nzhi_out,nylo_out,nyhi_out,
pppm_old.cpp:  memory->create(density_A_fft,nfft_both,"pppm:density_A_fft");
pppm_old.cpp:  memory->create(density_B_fft,nfft_both,"pppm:density_B_fft");
pppm_old.cpp:  memory->destroy3d_offset(density_A_brick,nzlo_out,nylo_out,nxlo_out);
pppm_old.cpp:  memory->destroy3d_offset(density_B_brick,nzlo_out,nylo_out,nxlo_out);
pppm_old.cpp:  memory->destroy(density_A_fft);
pppm_old.cpp:  memory->destroy(density_B_fft);
procmap.cpp:  memory->create(factors,npossible,3,"procmap:factors");
procmap.cpp:  memory->destroy(factors);
procmap.cpp:  memory->create(nfactors,nnpossible,3,"procmap:nfactors");
procmap.cpp:  memory->create(cfactors,ncpossible,3,"procmap:cfactors");
procmap.cpp:  memory->create(factors,npossible,4,"procmap:factors");
procmap.cpp:  memory->destroy(nfactors);
procmap.cpp:  memory->destroy(cfactors);
procmap.cpp:  memory->destroy(factors);
procmap.cpp:  memory->create(numafactors,numapossible,3,"procmap:numafactors");
procmap.cpp:  memory->create(nodefactors,nodepossible,3,"procmap:nodefactors");
procmap.cpp:  memory->destroy(numafactors);
procmap.cpp:  memory->destroy(nodefactors);
procmap.cpp:  memory->create(cmap,nprocs,4,"procmap:cmap");
procmap.cpp:  memory->create(gridi,nprocs,3,"comm:gridi");
procmap.cpp:  memory->destroy(gridi);
procmap.cpp:  memory->destroy(cmap);
read_data.cpp:  memory->sfree(arg);
read_data.cpp:      memory->grow(fix_index,nfix+1,"read_data:fix_index");
read_data.cpp:        memory->srealloc(fix_header,(nfix+1)*sizeof(char *),
read_data.cpp:        memory->srealloc(fix_section,(nfix+1)*sizeof(char *),
read_data.cpp:  memory->create(count,cmax,"read_data:count");
read_data.cpp:  memory->destroy(count);
read_data.cpp:  memory->grow(count,amax+1,"read_data:count");
read_data.cpp:        memory->srealloc(arg,maxarg*sizeof(char *),"read_data:arg");
read_dump.cpp:  memory->destroy(fields);
read_dump.cpp:  memory->create(fields,CHUNK,nfield,"read_dump:fields");
read_dump.cpp:  memory->create(uflag,nlocal,"read_dump:uflag");
read_dump.cpp:  memory->create(ucflag,CHUNK,"read_dump:ucflag");
read_dump.cpp:  memory->create(ucflag_all,CHUNK,"read_dump:ucflag");
read_dump.cpp:  memory->destroy(uflag);
read_dump.cpp:  memory->destroy(ucflag);
read_dump.cpp:  memory->destroy(ucflag_all);
reader_native.cpp:  memory->destroy(fieldindex);
reader_native.cpp:  memory->create(fieldindex,nfield,"read_dump:fieldindex");
reader_xyz.cpp:  memory->destroy(fieldindex);
reader_xyz.cpp:  memory->create(fieldindex,nfield,"read_dump:fieldindex");
read_restart.cpp:  memory->create(atom->extra,n,nextra,"atom:extra");
read_restart.cpp:        memory->destroy(buf);
read_restart.cpp:        memory->create(buf,maxbuf,"read_restart:buf");
read_restart.cpp:        memory->destroy(buf);
read_restart.cpp:        memory->create(buf,maxbuf,"read_restart:buf");
read_restart.cpp:      memory->destroy(atom->extra);
read_restart.cpp:      memory->create(atom->extra,atom->nmax,nextra,"atom:extra");
read_restart.cpp:  memory->destroy(buf);
replicate.cpp:  memory->create(buf,max_size,"replicate:buf");
replicate.cpp:  memory->destroy(buf);
smart_matrix_lib.h:        memory->create(v_sigma,n+1,m+1,"well:sigma");
smart_matrix_lib.h:        memory->create(gSigma,n+1,m+1,"well:gsigma");
smart_matrix_lib.h:        memory->create(v_theta,    nw+1,n+1,m+1,"well:vtheta");
smart_matrix_lib.h:        memory->create(v_prd_theta,nw+1,n+1,m+1,"well:vptheta");
smart_matrix_lib.h:        memory->create(gTheta,     nw+1,n+1,m+1,"well:gtheta");
smart_matrix_lib.h:        memory->destroy(v_sigma);
smart_matrix_lib.h:        memory->destroy(gSigma);
smart_matrix_lib.h:        memory->destroy(v_theta);
smart_matrix_lib.h:        memory->destroy(v_prd_theta);
smart_matrix_lib.h:        memory->destroy(gTheta);
special.cpp:  memory->destroy(onetwo);
special.cpp:  memory->destroy(onethree);
special.cpp:  memory->destroy(onefour);
special.cpp:  memory->create(onetwo,nlocal,maxall,"special:onetwo");
special.cpp:  memory->create(onethree,nlocal,maxall,"special:onethree");
special.cpp:  memory->create(onefour,nlocal,maxall,"special:onefour");
special.cpp:  memory->destroy(atom->special);
special.cpp:  memory->create(atom->special,atom->nmax,atom->maxspecial,"atom:special");
special.cpp:    memory->create(dflag,nlocal,maxcount,"special::dflag");
special.cpp:    memory->destroy(dflag);
special.cpp:    memory->create(dflag,nlocal,maxcount,"special::dflag");
special.cpp:    memory->destroy(dflag);
timer.cpp:  memory->create(array,TIME_N,"array");
timer.cpp:  memory->destroy(array);
universe.cpp:  memory->create(uni2orig,nprocs,"universe:uni2orig");
universe.cpp:  memory->destroy(procs_per_world);
universe.cpp:  memory->destroy(root_proc);
universe.cpp:  memory->destroy(uni2orig);
universe.cpp:  memory->grow(procs_per_world,nworlds+n,"universe:procs_per_world");
universe.cpp:  memory->grow(root_proc,(nworlds+n),"universe:root_proc");
variable.cpp:  memory->sfree(names);
variable.cpp:  memory->destroy(style);
variable.cpp:  memory->destroy(num);
variable.cpp:  memory->destroy(which);
variable.cpp:  memory->destroy(pad);
variable.cpp:  memory->sfree(data);
variable.cpp:  memory->destroy(eval_in_progress);
variable.cpp:  memory->srealloc(names,maxvar*sizeof(char *),"var:names");
variable.cpp:  memory->grow(style,maxvar,"var:style");
variable.cpp:  memory->grow(num,maxvar,"var:num");
variable.cpp:  memory->grow(which,maxvar,"var:which");
variable.cpp:  memory->grow(pad,maxvar,"var:pad");
variable.cpp:  data = (char ***) memory->srealloc(data,maxvar*sizeof(char **),"var:data");
variable.cpp:  memory->grow(eval_in_progress,maxvar,"var:eval_in_progress");
variable.cpp:          memory->create(result,atom->nlocal,"variable:result");
variable.cpp:          memory->destroy(result);
velocity.cpp:  memory->create(vhold,nlocal,3,"velocity:vnew");
velocity.cpp:  memory->destroy(vhold);
velocity.cpp:  if (varflag == ATOM) memory->create(vfield,atom->nlocal,3,"velocity:vfield");
velocity.cpp:  memory->destroy(vfield);
write_restart.cpp:  if (me == 0) memory->create(buf,max_size,"write_restart:buf");
write_restart.cpp:  else memory->create(buf,send_size,"write_restart:buf");
write_restart.cpp:  memory->destroy(buf);
